{"_id":{"$oid":"563d9b67bf652a600632cffe"},"title":"Hello, World!","create":{"$date":"2013-08-17T08:36:00.000Z"},"modify":{"$date":"2013-08-17T08:36:00.000Z"},"categories":["Octopress"],"image":null,"body":"\nこんにちは、世界！\n\n"}
{"_id":{"$oid":"563d9b67bf652a600632cfff"},"title":"Octopressの初期設定","create":{"$date":"2013-08-17T10:52:00.000Z"},"modify":{"$date":"2013-08-17T10:52:00.000Z"},"categories":["Octopress"],"image":null,"body":"\n「そうだ！ブログを作ろう！！」\n\nそう思って、WordPressに手を付けようかと思っていたが、MySQLとかApacheとか設定がめんどくさい。\n\nでもそんな時に、Emacsで記事書けて、GitHubにデプロイするだけでブログができる！！\n\nっていうOctopressを見つけたので、初期設定についてまとめておく。\n\n\u003c!-- more --\u003e\n\n\n## Rubyの設定\n\nMacの場合、デフォルトで入っているRubyのversionでは、Octopressを使うことが出来ないため、RVMでRuby 1.9.3-p448をインストールしておく。\n\n### RVMをインストール\n\n\u0009$ \\curl -L https://get.rvm.io | bash -s stable\n\u0009$ rvm install 1.9.3\n\n\n## Octopressの設定\n\nRubyをインストール出来たら、Octopressの設定をする。\n\n### Octpressをインストール\n\n\u0009$ git clone git://github.com/imathis/octopress.git octopress\n\u0009$ cd octopress\n\u0009$ gem install bundler\n\u0009$ bundle install\n\u0009$ rake install\n\n\n### GitHub Pagesを設定\n\n\u0009$ rake setup_github_pages\n\u0009Enter the read/write url for your repository\n\u0009\u0009(For example, 'git@github.com:your_username/your_username.github.io)\n\u0009\u0009\u0009or 'https://github.com/your_username/your_username.github.io')\n\u0009Repository url:\n\nGitHub Pagesのリポジトリを事前に作成しておき、Repository url: に入力する\n\n\n### Octopressのデプロイ\n\n\u0009$ rake generate\n\u0009$ rake deploy\n\nこれでGitHub Pagesのページにアクセスすると、Octopressが表示されます。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d000"},"title":"Octopress + Google Analytics","create":{"$date":"2013-08-20T12:30:00.000Z"},"modify":{"$date":"2013-08-20T12:30:00.000Z"},"categories":["Analytics","Octopress","Google","Google Analytics"],"image":null,"body":"\nOctopressの初期設定も終わったので、Google Analyticsの設定をやってみた。\n\n\u003c!-- more --\u003e\n\nAnalyticsのトラッキングコードとドメインを_config.ymlに入力するのみ。\n\n簡単！\n\n\n\u0009# ----------------------- #\n\u0009#   3rd Party Settings    #\n\u0009# ----------------------- #\n\u0009# Google Analytics\n\u0009google_analytics_tracking_id: UA-xxxxxxxx-x\n\u0009google_analytics_domain: blog.yug1224.com\n\n検索すると、ドメインを設定していない人もいるから、必要ないのかもしれない。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d001"},"title":"Octopressでの記事の投稿の仕方","create":{"$date":"2013-08-20T12:00:00.000Z"},"modify":{"$date":"2013-08-20T12:00:00.000Z"},"categories":["Octopress"],"image":null,"body":"\nOctopressでの記事の投稿の仕方について。\n\n記事を投稿するためには、3つのステップが必要。\n\n1. 記事ファイルの作成\n2. 記事の中身を作成\n3. 実際に投稿する\n\n\u003c!-- more --\u003e\n\n　\n\n## 記事ファイルを作成する\n\noctopressで記事を投稿するためには、まず記事のファイルを作る必要があります。\n\n```\n$ rake new_post[\"title\"]\nCreating new post: source/_posts/2013-08-20-title.markdown\n```\n\nYYYY-MM-DD-title.markdown というファイルが作成されますが、これが記事の元ファイルになります。\n\n\"title\"に日本語を含めることは出来ず、日本語を入力した場合はアルファベットに変換されるので注意。\n\n　\n\n## 記事の中身を作成する\n\n作成した記事ファイルの中を見ると、すでに基本的な設定が記述されています。\n\n```\n---\nlayout: post\ntitle: \"title\"\ndate: 2013-08-20 21:00\ncomments: true\ncategories:\n---\n```\n\n\"title\"には $ rake new_post[] で入力したtitleが入力されていますが、\nこれを変更することで、実際に記事に表示されるタイトルを変更することができます。\n\n記事の内容については、この設定の下に[markdown](http://ja.wikipedia.org/wiki/Markdown 'Markdown - Wikipedia')で入力していきます。\n\n　\n\n## 記事を投稿する\n\n作成した記事を投稿するには、いつものようにHTMLを生成してデプロイします。\n\n```\n$ rake generate\n$ rake deploy\n```\n"}
{"_id":{"$oid":"563d9b67bf652a600632d002"},"title":"東京Node学園 10時限目に行ってきました。","create":{"$date":"2013-08-21T10:19:00.000Z"},"modify":{"$date":"2013-08-21T10:19:00.000Z"},"categories":["Node.js","Meetup"],"image":null,"body":"\n前々から参加したいと思っていた東京Node学園に行ってきたので、個人的なメモ。\n\n\u003c!-- more --\u003e\n\n## NodeのHTTP2.0モジュール iij-http2 の実装苦労話（[@jovi0608さん](https://twitter.com/jovi0608)）\n\n[slideshare](http://www.slideshare.net/shigeki_ohtsu/iij-http2-25435309)\n\nNodeを使ってHTTP/2.0を実装したというお話。\n\n今までのテキストベースのプロトコルから、これからはバイナリベースのプロトコルになる。\n\nGoogleのサービスは100%SPDY化しているので、[Googleが止まった時に世界のトラフィックが40%減った](http://www.gizmodo.jp/2013/08/google540.html)なら、世界のトラフィックの40%はSPDYってこと。\n\nこれにTwitterやFacebookなどを合わせると、インターネットのトラフィックの半分以上はもうすでにSPDY化されているんじゃないか。\n\nTwitterがバルスに耐えられたのもSPDYの恩恵かも。\n\n### HTTP Serverのコア\n\nconnectionListenerの中では、GETやPOSTなどの判断は頭文字でしかやっていないらしい！\n\nGOTなんかでも通しちゃうけど、誰も困ってないしいいよね。みたいな？ｗ\n\n### HTTP/2.0フレームヘッダのパース\n\nテキストベースだと何文字目が0がどうかなんてチェックをしなければならないが、\nバイナリベースだとビット単位でのチェックを仕掛けることができる\n\n### まとめ\n\nhttpと同じようにhttp2が使える！！\n\n\n## 新しいテスト用ライブラリのご提案（[@t_wadaさん](https://twitter.com/t_wada)）\n\n標準のassertモジュールを使うと、書きやすいが、失敗した時の情報量が足りない。\n\nJsUnit以外のxUnitの場合は、assertの第一引数にメッセージを入れるが、JsUnitにはメッセージが無い！\n\nこれを改善するためには、expect.jsを使うと失敗時の情報を表示することができる。\n\nでも、表示するための構文を覚えるのは大変...\n\n### power-assert\n\nGroovyのpawer-assertを元に、これをjsに移植することで、\nassertの構文で失敗時の情報を見やすくすることを実現！\n\n実際はgruntを介してjavascriptのコードを解析して生成しているらしい。\n\n### まとめ\n\n覚えることは少なく、かつテスト失敗時の情報を多く。\n\nテストのハードルを下げたので、テストを書きましょう！ｗ\n\n\n## Socket.IO 1.0 について（[@nkzawaさん](https://twitter.com/nkzawa)）\n\n[slideshare](http://www.slideshare.net/lagos.jp/socketio-10-25438209)\n\n* Socket.IO 1.0\n* Engine.IO\n\n\n## Socket.IOを使った残暑見舞い（[@kiyuさん](https://twitter.com/kiyu)）\n\nwebで鳴らす風鈴アプリ[「すまほ風鈴」](http://summer.sinap.jp/13/)\n\n同時アクセスで他の人の風鈴を鳴らすことも出来る。\n\n\n## 感想\n\n全体を通して、実装寄りですごく高度な内容。ついていくのが精一杯。\n\nいや、ついていけてなかった。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d003"},"title":"iTunes アフィリエイトプログラムを登録してみた。","create":{"$date":"2013-08-26T15:30:00.000Z"},"modify":{"$date":"2013-08-26T15:30:00.000Z"},"categories":["Apple","affiliate"],"image":null,"body":"\n以前やってたブログではAmazonのアフィリエイトをやってたので、このブログでも小金稼ぎしようかと思っていたところ、iTunesでもアフィリエイトがあるらしいので登録してみた！\n\n\u003c!-- more --\u003e\n\n最近、提携先をリンクシェアってとこから、PHGってとこに変更したらしく、料率がぐんと上がっている模様。ラッキー！\n\n![サインイン画面](https://dl.dropboxusercontent.com/u/3189929/images/2013/08/27/0001.png)\n\nここ http://www.apple.com/jp/itunes/affiliates/ から登録。\n\n審査完了までに5営業日とのことだったのが、2日で審査結果が届いた。土日挟んだからかなり待った気がしたけど。\n\n\n## 概要画面\n\nとりあえず、審査完了のメールに記載されたURLにアクセスしてサインインすると、グラフUIが出現！\n\n![グラフUIの概要画面](https://dl.dropboxusercontent.com/u/3189929/images/2013/08/27/0002.png)\n\nAppleらしいシンプルで洗練されたデザインの概要画面。\n\n他のアフィリエイトの管理ツールもこれくらいシンプルにしてくれると、見やすくて使いやすいと思うんだけどなぁ。\n\n数字は今はまだ0ばかりだけど、これがどんどん大きくなっていくのを想像するのは楽しいぞｗ\n\n\n## 振込先設定\n\n報酬が振り込まれる銀行の追加は、「設定」→「支払い方法」→「支払い方法を追加」から行う。\n\n![振込先講座の設定画面](https://dl.dropboxusercontent.com/u/3189929/images/2013/08/27/0004.png)\n\n+ 銀行所在国：\u0009Japan\n\n+ トラックされた通過：\u0009Japanese yen\n\n+ 支払い受け取り通過：\u0009Japanese yen\n\n+ アカウント番号：\u0009銀行口座番号\n\n+ スイフトコード：\u0009国際的な送金に利用される銀行コードのこと\n\n\u0009詳しくは、[日本の金融機関のSWIFTコード一覧 - Wikipedia](http://ja.wikipedia.org/wiki/日本の金融機関のSWIFTコード一覧)\n\n+ アカウント名：\u0009口座名義人（カタカナ）\n\n+ 銀行名：\u0009銀行の名前\n\n+ 支店名：\u0009銀行口座の支店名\n\n+ 支店番号：\u0009銀行口座の支店番号\n\n+ 間隔：\u0009報酬を受取る頻度\n\n+ しきい値：\u0009受取る報酬の下限（最低30000）\n\n　\n\nひとまずこれで登録系は終わり。\n\nあとは自分でアプリを宣伝して、購入に誘導しなければいけないのが大変そうだけど。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d004"},"title":"D3勉強会#0に行ってきました。","create":{"$date":"2013-09-03T12:30:00.000Z"},"modify":{"$date":"2013-09-03T12:30:00.000Z"},"categories":["D3.js"],"image":null,"body":"\n[D3勉強会#0 D3.jsで棒グラフをつくろう！](http://atnd.org/events/42411)に行ってきました。\n\n\u003c!-- more --\u003e\n\n## ライブコーディング\n\n前半は[CodePen](http://codepen.io)を使って[@_shimizu](https://twitter.com/_shimizu)先生のライブコーディング。\n\nあっという間に棒グラフが完成してしまった！\n\n\n\u003cscript src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\u003csvg style=\"margin:10px; width:250px; height:200px; padding:10px\"\u003e\u003c/svg\u003e\n\u003cscript\u003e\nwindow.onload = function(){\nvar svg = d3.select('svg');\nvar dataSet = [100,200,300,500,400];\n\nvar max = d3.max(dataSet);\nvar height = 200;\n\nvar yScale = d3.scale.linear().domain([0, max]).range([height, 0]);\nvar color = d3.scale.category20();\n\nsvg.selectAll('rect')\n.data(dataSet)\n.enter()\n.append('rect')\n.attr({\nx:function(d,i){ return i * 40},\ny:function(d){ return yScale(d) },\nwidth:30,\nheight:function(d,i){ return height - yScale(d) },\nfill:function(d,i){ return color(i) }\n});\n\nvar yAxis = d3.svg.axis()\n.ticks(5)\n.orient('right')\n.scale(yScale);\n\nsvg.append('g')\n.attr('transform','translate('+[dataSet.length * 40, 0]+')')\n.call(yAxis);\n})();\n}\n\u003c/script\u003e\n\nこのグラフのソースは以下の通り。\n\n基本的にはjQueryを使って要素を操作するのとほぼ変わらないイメージ。\n\n``` html\n\u003c!-- D3.jsの読み込み --\u003e\n\u003cscript src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\n\u003c!-- グラフの表示するエリア --\u003e\n\u003csvg style=\"margin:10px; width:250px; height:200px; padding:10px\"\u003e\u003c/svg\u003e\n\n\u003c!-- グラフの作成 --\u003e\n\u003cscript\u003e\n\u0009var svg = d3.select('svg');\n\u0009var dataSet = [100,200,300,500,400];\n\n\u0009var max = d3.max(dataSet);\u0009// データの最大値を取得\n\u0009var height = 200;\n\u0009var yScale = d3.scale.linear().domain([0, max]).range([height, 0]);\u0009// y軸の設定\n\u0009var color = d3.scale.category20();\u0009// カラー設定\n\n\u0009svg.selectAll('rect')\n\u0009\u0009.data(dataSet)\n\u0009\u0009.enter()\n\u0009\u0009.append('rect')\n\u0009\u0009.attr({\n\u0009\u0009\u0009x:function(d,i){ return i * 40},\u0009// iには読み込んだデータのindexが入る\n\u0009\u0009\u0009y:function(d){ return yScale(d) },\u0009// dには読み込んだデータの値が入る\n\u0009\u0009\u0009width:30,\n\u0009\u0009\u0009height:function(d,i){ return height - yScale(d) },\n\u0009\u0009\u0009fill:function(d,i){ return color(i) }\n\u0009});\n\n\u0009var yAxis = d3.svg.axis()\n\u0009\u0009.ticks(5)\n\u0009\u0009.orient('right')\n\u0009\u0009.scale(yScale);\n\n\u0009svg.append('g')\n\u0009\u0009.attr('transform','translate('+[dataSet.length * 40, 0]+')')\n\u0009\u0009.call(yAxis);\n\n\u003c/script\u003e\n```\n\n## ビジュアライゼーションについて\n\n後半はビジュアライゼーションについてのプレゼン。\n\nまず D3.js（Data-Driven Documents）とは、データ駆動のドキュメントを作るためのフレームワークのことであり、データビジュアライゼーションを簡単に実現することができるもの。\n\n　\n\nビジュアライゼーションとは、図やグラフなどを使ってデータを視覚的に表現すること。\n\nビジュアライゼーションには大きく分けて2種類、「説明的ビジュアライゼーション」と「探索的ビジュアライゼーション」が存在する。\n\n### 説明的ビジュアライゼーション\n\n+ [ナイチンゲールの統計図](http://www.florence-nightingale-avenging-angel.co.uk/japanese/coxcomb.htm)\n+ クリミア戦争で死亡した兵士の死亡要因が、戦闘での傷ではなく感染症であることを表現\n+ ナイチンゲールは歴史上最も「戦闘的な統計学者」\n+ 問題を説明するために用いる\n\n### 探索的ビジュアライゼーション\n\n+ 海外ドラマ「[NUMB3RS](http://ja.wikipedia.org/wiki/NUMBERS_天才数学者の事件ファイル)」シーズン1 第1話 地理的プロファイリング\n+ 犯罪者の行動心理を数理モデル化\n+ ブロック毎に犯人が潜んでいる確率を計算してヒートマップで表現\n+ 問題を見つけるために用いる\n\n## まとめ\n\n少人数で知り合いの方も多かったので、和気あいあいとして楽しかったー。\n\n公式で地図系のexampleもたくさんあるし、ただのグラフツールとしてじゃなく、UIの実現方法の1つとして使えるようになりたい！\n\nとりあえず、オライリー本買うか。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d005"},"title":"OctopressにTwitterのタイムラインを表示させる。","create":{"$date":"2013-09-04T14:44:00.000Z"},"modify":{"$date":"2013-09-04T14:44:00.000Z"},"categories":["Octopress","Twitter"],"image":null,"body":"\nOctopressにTwitterのタイムラインを表示させるには、Twitter公式の埋め込みタイムライン（Embedded Timelines）の機能を使ってHTMLにコードを埋め込みます。\n\n以前はOctopressの機能であったらしいですが、Twitter API 1.1 への移行に伴い、使えなくなってしまったようです。\n\n \u003c!-- more --\u003e\n\n## タイムラインの表示コード生成\n\n埋め込みタイムラインは、Twitter.comの[ウィジェット設定](https://twitter.com/settings/widgets)の新規作成から、タイムラインのコードを生成します。\n\n![ウィジェット設定画面](https://dl.dropboxusercontent.com/u/3189929/images/2013/09/04/0001.png)\n\n入力フォームでカスタマイズすることができるのは、表示するツイートの内容と高さや色合いだけですが、コード内の\\\u003ca\\\u003eタグの属性を変更することで、さらに細かく[カスタマイズ](https://dev.twitter.com/ja/docs/embedded-timelines#customization)することができます。\n\n　\n\n実際にカスタマイズしてみたタイムラインが以下。\n\n生成されたコードをHTMLに埋め込むだけでタイムラインを表示することが出来ます。\n\nヘッダーやフォローボタン、ツイートボックスやツイートボタンを削除するカスタマイズを適用してあります。\n\n\u003ca class=\"twitter-timeline\" href=\"https://twitter.com/YuG_1224\" data-widget-id=\"621833614255263745\" data-chrome=\"noheader nofooter\"\u003e@YuG1224さんのツイート\u003c/a\u003e\n\u003cscript\u003e!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\"://platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");\u003c/script\u003e\n\n``` html\n\u003ca class=\"twitter-timeline\" href=\"https://twitter.com/YuG_1224\" data-widget-id=\"621833614255263745\" data-chrome=\"noheader nofooter\"\u003e@YuG1224さんのツイート\u003c/a\u003e\n\u003cscript\u003e!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\"://platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");\u003c/script\u003e\n```\n\n　\n\n### Octopressのサイドバーに表示する ###\n\n生成したコードを元に、`/source/_includes/custom/asides/twitter.html`というファイルを作成。\n\n```\n\u003csection\u003e\n  \u003ca class=\"twitter-timeline\" href=\"https://twitter.com/YuG_1224\" data-widget-id=\"621833614255263745\" data-chrome=\"noheader nofooter\"\u003e@YuG1224さんのツイート\u003c/a\u003e\n  \u003cscript\u003e!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\"://platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");\u003c/script\u003e\n\u003c/section\u003e\n```\n\n`_config.yml`の`default_asides:`に生成したファイルパスを追加。\n\n```\ndefault_asides: [asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html, custom/asides/twitter.html]\n```\n\nまとめると、ウィジェットのコードを\\\u003csection\\\u003eタグで囲んで、_config.ymlにパスを追加するだけ。\n\n自分は応用してAmazonのアフィリエイトも設置してみました。\n\nあとでタグリストなんかも設置してみよう。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d006"},"title":"iPhone 5c 開封の儀","create":{"$date":"2013-09-22T15:35:00.000Z"},"modify":{"$date":"2013-09-22T15:35:00.000Z"},"categories":["iPhone"],"image":null,"body":"\n妻のiPhone 4SをiPhone 5cに機種変更したので、開封の儀！\n\n世の中が5s中心に回っている中、敢えての5c イエローに変えてみました。\n\n\u003c!-- more --\u003e\n\n[![iPhone 5cケース外観][img01]][img01]\n\n端末本体と同じく角が丸いケースに入って登場。\n\nなんとなくiPod touchのようなイメージ。\n\n内容物はいつも通りの充電器、コード、イヤホンの3種類。\n\n## アクティベート\n\nアクティベートはSBショップでしてもらったけれど、とりあえずもう一回初期化して再設定。\n\nやっぱアクティベートから自分でやらないとね！\n\n[![こんにちは][img02]][img02]\n\n　\n\n基本は画面の指示通りに進めるのだけど、今回は「**新しいiPhoneとして設定**」を選択。\n\n[![iPhoneを設定][img03]][img03]\n\n　\n\nApple IDを入力する時は素直に入力せずに、「**iCloudとiTunesで別のApple IDを使用しますか？**」のリンクをタップ。\n\n[![Apple ID][img04]][img04]\n\n　\n\nこれで、iCloudとiTunesで別のApple IDを使用し、家族でインストールするアプリの決済情報を共有しつつ、iCloudにバックアップする情報は個別化することが出来るようになります！\n\n[![iCloud][img05]][img05]\n[![iTunes][img06]][img06]\n\n　\n\nアクティベート終了後、ホーム画面を開くと真っ黄色！！\n\n5cでは、それぞれの色の壁紙が初期設定されているらしいけど、ちょっと派手すぎて即変更かなーｗ\n\n[![完了][img07]][img07]\n\n\n\u003c!-- 画像 --\u003e\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/23/0001.png\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/23/0002.png\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/23/0003.png\n[img04]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/23/0004.png\n[img05]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/23/0005.png\n[img06]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/23/0006.png\n[img07]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/23/0007.png\n"}
{"_id":{"$oid":"563d9b67bf652a600632d007"},"title":"iPhoneやiOSのバッテリを長持ちさせるな。","create":{"$date":"2013-09-25T15:23:00.000Z"},"modify":{"$date":"2013-09-25T15:23:00.000Z"},"categories":["iPhone"],"image":null,"body":"\niPhoneやiOSがアップデートされる度に思うこと。\n\nそれは「バッテリを長持ちさせる方法を書くな」ということ。\n\n　\n\n「*自動アップデートはオフ！7GB制限かかるの嫌だもんね！♪*」\n\n「*位置情報はオフ！プライバシー的にもこれで安心！♪*」\n\n「*Bluetoothもオフ！Bluetoothイヤホンを使わないなら意味ないよね！♪*」\n\n「*WiFiオフ！移動中は接続確認されるのめんどくさいよね！♪*」\n\n　\n\n\nまじ、ふっざけんなよ。\n\nバッテリを長持ちさせるために機能を制限させるなんて言語道断。\n\nせっかくAppleのエンジニアたちが、素晴らしい機能を搭載させたOSと端末をリリースしているのに、\nバッテリを消費するって理由でオフにされたら、宝の持ち腐れだ。\n\n\u003c!-- more --\u003e\n\n## 自動アップデート\n\n自動アップデートは絶対にオンにするべきだ！\n\n使っているアプリでバグ修正があった場合など即座に反映してくれて、常に最新の安定した状態のアプリを使うことが出来る！\n\n[![自動アップデート][img01]][img01]\n\n古いバージョンを使い続けていて、最新バージョンで直っているバグに文句言っている奴らなんて滅べばいいのに。（IE6とか...IE6とか...\n\n## 位置情報\n\n位置情報もオンにしておいて損はない！\n\n位置情報を使って、さらに便利に使えるアプリはとても多い！\n\n例えば、[乗換案内](https://itunes.apple.com/jp/app/cheng-huan-nei-wu-liaono-dian/id299490481?mt=8)は出発または到着に「現在地」と入力すると、位置情報を取得して検索してくれる！\n\n[![乗換案内][img02]][img02]\n\niPhone紛失時に探すことが出来るアプリ[iPhoneを探す](https://itunes.apple.com/jp/app/iphonewo-tansu/id376101648?mt=8)だって、位置情報がオンになっていないと探すことすら出来ない！\n\n[![iPhoneを探す][img03]][img03]\n\n## AirDrop\n\niOS 7からは、近くの端末とAirDropで写真や動画、さらにはWebページなんかを共有できるようになった。\n\nこのAirDropを利用するには、BluetoothとWiFiをオンにしておく必要がある！\n\nちなみに、iOS 7にはBluetoothを利用するiBeaconという近距離無線通信機能もついていて、世の中がどんどん便利になっていきそうなのに、これをオフにするなんて愚の骨頂だ！\n\n参考:[[iOS 7] O2O業界の新たな風!?　iBeaconとは](http://dev.classmethod.jp/references/ios7-features-ibeacon/)\n\n## 結論\n\nテクノロジーは進化していくのに、それに付いて来れない人間が多すぎる。\n\n古い考えは捨てて、新しい機能をどんどん利用して、毎日を有意義に過ごした方が何倍何十倍も幸せになれる。\n\nそれでもやっぱりバッテリの持ちが気になるならば、こまめに充電したり、外部バッテリを持ち歩くべきだと思う。\n\n\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=B00CY6P968\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=B00ASSGJ3Q\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=B007RAC7BQ\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=B007P81MDY\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\n\n\u003c!-- 画像 --\u003e\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/26/0001.png\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/26/0002.png\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/26/0003.png\n"}
{"_id":{"$oid":"563d9b67bf652a600632d008"},"title":"PhoneGap 3.0 をインストールして、 Hello, World.","create":{"$date":"2013-09-26T15:45:00.000Z"},"modify":{"$date":"2013-09-26T15:45:00.000Z"},"categories":["PhoneGap"],"image":null,"body":"\niOSアプリを作ってみたいけど、Objective-Cは出来ないのでPhoneGapに手を出してみる。\n\nPhonGap 3.0 から Node.js の npm を使ってインストール出来るようになったらしくすごく簡単！\n\nインストールの手順としては、[公式ページ](http://phonegap.com/install/)に書いてある通り。\n\n\u003c!-- more --\u003e\n\n\u0009// インストール\n\u0009$ npm install -g phonegap\n\u0009npm http GET https://registry.npmjs.org/phonegap\n\u0009npm http 304 https://registry.npmjs.org/phonegap\n\u0009npm http GET https://registry.npmjs.org/node-static/0.7.0\n\u0009npm http GET https://registry.npmjs.org/cordova/3.0.9\n\u0009npm http GET https://registry.npmjs.org/phonegap-build/0.8.4\n\u0009npm http GET https://registry.npmjs.org/optimist/0.6.0\n\u0009...以下略\n\nインストールが完了したら、試しに Hello, World.\n\n\u0009// PhoneGap Projectの作成\n\u0009$ phonegap create helloWorld\n\u0009[phonegap] created project at /Users/user/helloWorld\n\n\u0009// iOS用にビルド\n\u0009$ cd helloWorld\n\u0009$ phonegap build ios\n\u0009[phonegap] detecting iOS SDK environment...\n\u0009[phonegap] using the local environment\n\u0009[phonegap] adding the iOS platform...\n\u0009[phonegap] compiling iOS...\n\u0009[phonegap] successfully compiled iOS app\n\nビルドが完了すると、helloWorld/platforms/の中にiosディレクトリが作成され、iOSアプリ用のプロジェクトファイル類が格納されています。\n\n同様に、*$ phonegap build ios* のios部分をandroidに変更するだけで、androidディレクトリが作成されます。\n\nビルドされているのを確認したら、iosディレクトリ内にある HelloWorld.xcodeproj を Xcode で実行します。\n\n実機ではなくiOSシミュレータでですが、問題なくアプリとして起動出来ることも確認できました。\n\n[![iOSシミュレータ画面][img01]][img01]\n\n\n\u003c!-- 画像 --\u003e\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/27/0001.png\n"}
{"_id":{"$oid":"563d9b67bf652a600632d009"},"title":"Homebrew で tree コマンドをインストール","create":{"$date":"2013-09-26T15:20:00.000Z"},"modify":{"$date":"2013-09-26T15:20:00.000Z"},"categories":["Mac","Homebrew"],"image":null,"body":"\nターミナルで、ディレクトリ構造をどかーんと一気に表示する方法はないかと探していたら、treeコマンドを見つけた。\n\nしかし、Mac OS X Mountain Lion には入っていないので、Homebrewでインストール！\n\n\u003c!-- more --\u003e\n\n\u0009$ brew install tree\n\u0009==\u003e Downloading http://mama.indstate.edu/users/ice/tree/src/tree-1.6.0.tgz\n\u0009######################################################################## 100.0%\n\u0009==\u003e make prefix=/usr/local/Cellar/tree/1.6.0 MANDIR=/usr/local/Cellar/tree/1.6.0/share/man/man1 CC=c\n\u0009🍺  /usr/local/Cellar/tree/1.6.0: 7 files, 120K, built in 2 seconds\n\n試しにexpressでhoge作って実行すると以下。\n\n\u0009$ tree hoge/\n\u0009hoge/\n\u0009├── app.js\n\u0009├── package.json\n\u0009├── public\n\u0009│   ├── images\n\u0009│   ├── javascripts\n\u0009│   └── stylesheets\n\u0009│       └── style.css\n\u0009├── routes\n\u0009│   ├── index.js\n\u0009│   └── user.js\n\u0009└── views\n    ├── index.jade\n    └── layout.jade\n\n\u00096 directories, 7 files\n\nおまけにディレクトリとファイルの数もカウントしてくれて便利！\n"}
{"_id":{"$oid":"563d9b67bf652a600632d00a"},"title":"iOS 7でバックグラウンド フェッチを有効化する。","create":{"$date":"2013-09-29T11:37:00.000Z"},"modify":{"$date":"2013-09-29T11:37:00.000Z"},"categories":["Objective-C"],"image":null,"body":"\niOS 7からフェッチ処理をバックグラウンドで定期的に実行出来るようになったそうなので、試してみました。\n\n実行するために必要なステップは以下の3ステップ\n\n+ Background fetchの有効化\n+ 実行する間隔の設定\n+ 実行する処理の処理\n\n\u003c!-- more --\u003e\n\n## Background fetchの有効化\n\n左サイドバーの**Project**をクリックし、**TARGETS**の**Capabilities**にある**Background Modes**をONにします。\n\nBackgrounds Modesには、バックグラウンドで処理させる機能の一覧があります。\n\nこの中にある**Background fetch**にチェックを入れるだけで、有効化は完了。\n\n[![Background fetchの有効化][img01]][img01]\n\n## 実行する間隔の設定\n\nBackground fetchを実行するためには、有効化するだけではなく、最短実行間隔の設定も必要。\n\n`didFinishLaunchingWithOptions:`で間隔を設定します。\n\n\u0009- (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary*)launchOptions\n\u0009{\n\u0009\u0009[[UIApplication sharedApplication] setMinimumBackgroundFetchInterval:UIApplicationBackgroundFetchIntervalMinimum];\n\u0009\u0009retrun YES;\n\u0009}\n\n`setMinimumBackgroundFetchInterval:` に `UIApplicationBackgroundFetchIntervalMinimum` を設定するとOSデフォルトの最短時間が設定され、`NSTimeInterval`にすると、任意の時間が設定出来るようです。\n\nしかし、あくまでも最短の実行間隔を設定するだけで、実際に実行されるかどうかはアプリの利用状況をOSが判別して決定されるようです。\n\nまた、`UIApplicationBackgroundFetchIntervalNever`を設定すると、有効化していてもフェッチ処理は実行されなくなります。\n\n\n## 実行する処理の設定\n\n実行する間隔を設定したら、`performFetchWithCompletionHandler:`に実際の処理を記述します。\n\n\u0009- (void)application:(UIApplication *)application performFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n\u0009{\n\u0009\u0009NSLog(@\"Fetch!!!!!\");\n\u0009\u0009completionHandler(UIBackgroundFetchResultNewData);\n\u0009}\n\nフェッチ処理後には、`completionHandler`を絶対に呼ばなければならないのですが、フェッチ処理の結果によって渡す引数が変わります。\n\n成功した時は、`UIBackgroundFetchResultNewData`\n\nフェッチ取得するデータが無かった時は、`UIBackgroundFetchResultNoData`\n\n失敗したときは、`UIBackgroundFetchResultFailed`を引数に渡します。\n\n\n## フェッチ処理のデバッグ\n\nバッググラウンドフェッチのデバッグをする時、そのままデバッグしていてもフェッチ処理は実行されず、**Debug**→**Simulate Background Fetch**をクリックする度にフェッチ処理を実行します。\n\n[![フェッチ処理のデバッグ1][img02]][img02]\n\n　  \n\nまた、バックグラウンドフェッチ処理のデバッグをする時には、**Product**→**Scheme**→**Edit Scheme...**の設定を開いて、**Launch due to a background fetch event**にチェックを入れると、デバッグ時にアプリをバックグラウンド起動するようになります。\n\n[![フェッチ処理のデバッグ1][img03]][img03]\n\n　  \n\n[![フェッチ処理のデバッグ2][img04]][img04]\n\n　  \n\n以上。これでバックグラウンド処理出来るようになったことだし、何を処理させようか。\n\n　  \n\n\n参考：\n\n[Background Fetch を試してみた](http://qiita.com/griffin_stewie/items/8371c09059b3ba7bb202)\n\n[[iOS 7] [MultiTasking] バックグラウンドで定期的にフェッチ処理を実行する](http://dev.classmethod.jp/references/ios-background-fetch/)\n\n\n\u003c!-- 画像 --\u003e\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/29/0001.png\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/29/0002.png\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/29/0003.png\n[img04]: https://dl.dropboxusercontent.com/u/3189929/images/2013/09/29/0004.png\n"}
{"_id":{"$oid":"563d9b67bf652a600632d00b"},"title":"Homebrewでプログラミング用フォントRictyをインストール。","create":{"$date":"2013-10-04T13:00:00.000Z"},"modify":{"$date":"2013-10-04T13:00:00.000Z"},"categories":["Mac","Homebrew"],"image":null,"body":"\nターミナルとEmacsのフォントはいつもはMenloだったのだけど、なんか滲むよう見えるそんな気がしたので、プログラミング用フォントのRictyを入れてみた。\n\n構築環境\n\n+ MacBook Air 11-inch Mid 2012\n+ Mac OS X 10.8.5\n\n本来ならば、Rictyの生成スクリプトをダウンロードして実行しなければならないのだが、今回は[@sanemat](https://twitter.com/sanemat)氏が作成したformulaを拝借します。\n\n参考: [brew install ricty | 實松アウトプット](http://sanematsu.wordpress.com/2013/05/11/brew-install-ricty/)\n\n\u003c!-- more --\u003e\n\n　  \n\n設定手順は以下の通り\n\n1. Homebrewのtapコマンドでリポジトリを追加\n2. HomebrewでRictyをインストール\n3. 生成されたRictyをfontディレクトリにコピー\n4. ターミナルとEmacsに設定\n\n\n## Homebrewのtapコマンドでリポジトリを追加\n\nまずはリポジトリを追加\n\n\u0009$ brew tap sanemat/font\n\u0009Cloning into '/usr/local/Library/Taps/sanemat-font'...\n\u0009remote: Counting objects: 72, done.\n\u0009remote: Compressing objects: 100% (52/52), done.\n\u0009remote: Total 72 (delta 23), reused 58 (delta 18)\n\u0009Unpacking objects: 100% (72/72), done.\n\u0009Checking connectivity... done\n\u0009Tapped 1 formula\n\n\n## HomebrewでRictyをインストール\n\n次にRictyをインストール。\n\nこの時、fontforgeやlibtiffなど、生成時に必要なものもまとめてインストールしてくれているっぽい。\n\n\n\u0009$ brew install ricty\n\u0009==\u003e Installing dependencies for ricty: gettext, libpng, libtiff, freetype, fontconfig, fontfo\n\u0009==\u003e Installing ricty dependency: gettext\n\u0009==\u003e Downloading https://downloads.sf.net/project/machomebrew/Bottles/gettext-0.18.3.1.mountain_lion.\n\u0009######################################################################## 100.0%\n\u0009==\u003e Pouring gettext-0.18.3.1.mountain_lion.bottle.tar.gz\n\u0009==\u003e Caveats\n\u0009This formula is keg-only: so it was not symlinked into /usr/local.\n\n\u0009OS X provides the BSD gettext library and some software gets confused if both are in the library path.\n\n\u0009Generally there are no consequences of this for you. If you build your\n\u0009own software and it requires this formula, you'll need to add to your\n\u0009build variables:\n\n    LDFLAGS:  -L/usr/local/opt/gettext/lib\n    CPPFLAGS: -I/usr/local/opt/gettext/include\n\n\u0009==\u003e Summary\n\u0009🍺  /usr/local/Cellar/gettext/0.18.3.1: 374 files, 12M\n\u0009==\u003e Installing ricty dependency: libpng\n\u0009==\u003e Downloading https://downloads.sf.net/project/machomebrew/Bottles/libpng-1.5.14.mountain_lion.bot\n\u0009######################################################################## 100.0%\n\u0009==\u003e Pouring libpng-1.5.14.mountain_lion.bottle.tar.gz\n\u0009🍺  /usr/local/Cellar/libpng/1.5.14: 15 files, 1.0M\n\u0009==\u003e Installing ricty dependency: libtiff\n\n\u0009~~~~~~~~~~ 途中省略 ~~~~~~~~~~\n\n\u0009==\u003e Caveats\n\u0009***************************************************\n\u0009Generated files:\n\u0009/usr/local/Cellar/ricty/3.2.2/share/fonts/Ricty-Bold.ttf\n\u0009/usr/local/Cellar/ricty/3.2.2/share/fonts/Ricty-Regular.ttf\n\u0009/usr/local/Cellar/ricty/3.2.2/share/fonts/RictyDiscord-Bold.ttf\n\u0009/usr/local/Cellar/ricty/3.2.2/share/fonts/RictyDiscord-Regular.ttf\n\u0009***************************************************\n\u0009To install Ricty:\n\u0009$ cp -f /usr/local/Cellar/ricty/3.2.2/share/fonts/Ricty*.ttf ~/Library/Fonts/\n\u0009$ fc-cache -vf\n\u0009***************************************************\n\u0009==\u003e Summary\n\u0009🍺  /usr/local/Cellar/ricty/3.2.2: 12 files, 19M, built in 87 seconds\n\u0009==\u003e Downloading ftp://ftp.remotesensing.org/pub/libtiff/tiff-4.0.3.tar.gz\n\u0009######################################################################## 100.0%\n\u0009######################################################################## 100.0%==\u003e ./configure --prefix=/usr/local/Cellar/libtiff/4.0.3 --without-x --disable-lzma --with-jpeg-incl\n\u0009==\u003e make install\n\u0009🍺  /usr/local/Cellar/libtiff/4.0.3: 254 files, 3.8M, built in 52 seconds\n\u0009==\u003e Installing ricty dependency: freetype\n\u0009==\u003e Downloading https://downloads.sf.net/project/machomebrew/Bottles/freetype-2.5.0.1.mountain_lion.\n\u0009######################################################################## 100.0%\n\u0009==\u003e Pouring freetype-2.5.0.1.mountain_lion.bottle.tar.gz\n\u0009🍺  /usr/local/Cellar/freetype/2.5.0.1: 59 files, 2.6M\n\u0009==\u003e Installing ricty dependency: fontconfig\n\u0009==\u003e Downloading http://fontconfig.org/release/fontconfig-2.10.95.tar.bz2\n\u0009######################################################################## 100.0%\n\u0009==\u003e ./configure --with-add-fonts=/Library/Fonts,~/Library/Fonts --prefix=/usr/local/Cellar/fontconfi\n\u0009==\u003e make install\n\u0009🍺  /usr/local/Cellar/fontconfig/2.10.95: 447 files, 4.8M, built in 98 seconds\n\u0009==\u003e Installing ricty dependency: fontforge\n\u0009==\u003e Downloading http://downloads.sourceforge.net/project/fontforge/fontforge-source/fontforge_full-2\n\u0009######################################################################## 100.0%\n\u0009==\u003e Downloading patches\n\u0009######################################################################## 100.0%\n\u0009==\u003e Patching\n\u0009patching file fontforge/startui.c\n\u0009Hunk #1 succeeded at 50 with fuzz 2.\n\u0009==\u003e ./configure --prefix=/usr/local/Cellar/fontforge/20120731 --enable-double --without-freetype-byt\n\u0009==\u003e make\n\u0009==\u003e make install\n\u0009🍺  /usr/local/Cellar/fontforge/20120731: 362 files, 13M, built in 76 seconds\n\u0009==\u003e Installing ricty\n\u0009==\u003e Downloading https://github.com/yascentur/Ricty/archive/3.2.2.tar.gz\n\u0009######################################################################## 100.0%\n\u0009==\u003e Downloading http://levien.com/type/myfonts/Inconsolata.otf\n\u0009######################################################################## 100.0%\n\u0009==\u003e Downloading http://sourceforge.jp/frs/redir.php?m=iij\u0026f=%2Fmix-mplus-ipa%2F59022%2Fmigu-1m-20130\n\u0009######################################################################## 100.0%\n\u0009==\u003e sh ./ricty_generator.sh /usr/local/Cellar/ricty/3.2.2/share/fonts/Inconsolata.otf /usr/local/Cel\n\n　  \n\n#### 生成されたRictyをfontディレクトリにコピー ####\n\nRictyインストール時に表示されるコマンドをコピペして、生成されているフォントファイルをコピーする。\n\n\u0009$ cp -f /usr/local/Cellar/ricty/3.2.2/share/fonts/Ricty*.ttf ~/Library/Fonts/\n\u0009$ fc-cache -vf\n\u0009/usr/share/fonts: skipping, no such directory\n\u0009/Library/Fonts: caching, new cache contents: 323 fonts, 0 dirs\n\u0009/Users/yuji/Library/Fonts: caching, new cache contents: 4 fonts, 0 dirs\n\u0009/Users/yuji/.local/share/fonts: skipping, no such directory\n\u0009/Users/yuji/.fonts: skipping, no such directory\n\u0009/usr/local/Cellar/fontconfig/2.10.95/var/cache/fontconfig: cleaning cache directory\n\u0009/Users/yuji/.cache/fontconfig: not cleaning non-existent cache directory\n\u0009/Users/yuji/.fontconfig: not cleaning non-existent cache directory\n\u0009fc-cache: succeeded\n\n\n## ターミナルとEmacsに設定\n\n生成されたRictyをEmacsに設定する。\n\nEmacsは`~/.emacs.d/init.el`に以下を記述するだけでRictyが反映されるはず。\n\n\u0009(set-face-attribute 'default nil\n\u0009\u0009\u0009\u0009\u0009\u0009:family \"Ricty\"\n\u0009\u0009\u0009\u0009\u0009\u0009:height 140)\n\u0009(set-fontset-font\n\u0009\u0009nil 'japanese-jisx0208\n\u0009\u0009\u0009(font-spec :family \"Ricty\"))\n\n　  \n\nターミナルの場合は、環境設定のテキストタブからフォントを選択する。\n\nこの時、アンチエイリアス処理にチェックを入れておかないと、綺麗に表示されないので注意。\n\n[![ターミナルの表現設定][img01]][img01]\n\n\n## 感想\n\n変更して使ってみた感想としては、「確かに読みやすいように思うけど、まぁこんなもんか」って感じ。\n\nこだわらない人にとってはどうでも良かったかもｗ\n\n\n\u003c!-- 画像 --\u003e\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/04/0001.png\n"}
{"_id":{"$oid":"563d9b67bf652a600632d00c"},"title":"MacにNodeOSを入れてみた。","create":{"$date":"2013-10-17T16:14:00.000Z"},"modify":{"$date":"2013-10-17T16:14:00.000Z"},"categories":["Mac","Node.js"],"image":null,"body":"\n[NodeOS](http://nodeos.github.io)が気になったので、試しに環境構築してみた。\n\n##### 必要なもの\n\n+ VirtualBox\n+ Vagrant\n+ Docker\n+ NodeOS\n\n　  \n\n\u003c!-- more --\u003e\n\nとりあえずVirtualBoxとVagrantをダウンロードしてきてインストール。\n\n[Downloads – Oracle VM VirtualBox](https://www.virtualbox.org/wiki/Downloads)\n\n[Vagrant - Downloads](http://downloads.vagrantup.com/)\n\n　  \n\nDockerはgitでclone。その後Vagrantを起動して接続。\n\n\u0009$ git clone https://github.com/dotcloud/docker.git\n\u0009$ cd docker/\n\u0009$ vagrant up\n\u0009$ vagrant ssh\n\nちなみに、ここでVitualBoxを起動してみると、仮想環境でUbuntuが起動しているのがわかるはず。\n\n[![仮想環境実行中][img01]][img01]\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/18/0001.png\n\n`$ cat /proc/version`でもUbuntuと表示。\n\n\u0009vagrant@precise64:~$ cat /proc/version\n\u0009Linux version 3.8.0-31-generic (buildd@panlong) (gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5) ) #46~precise1-Ubuntu SMP Wed Sep 11 18:21:16 UTC 2013\n\n　  \n\nここからやっとNodeOSのインストール作業。\n\n\u0009vagrant@precise64:~$ git clone https://gist.github.com/6757451.git NodeOS\n\u0009The program 'git' is currently not installed.  You can install it by typing:\n\u0009sudo apt-get install git\n\nまずはgitでcloneのはずが、gitが入っていないと怒られたのでapt-getして再挑戦。\n\n\u0009vagrant@precise64:~$ sudo apt-get install git\n\u0009vagrant@precise64:~$ git clone https://gist.github.com/6757451.git NodeOS\n\u0009Cloning into 'NodeOS'...\n\u0009remote: Counting objects: 6, done.\n\u0009remote: Compressing objects: 100% (4/4), done.\n\u0009remote: Total 6 (delta 2), reused 0 (delta 0)\n\u0009Unpacking objects: 100% (6/6), done.\n\nきちんとclone出来たら、NodeOSをbuildして起動。\n\n\u0009vagrant@precise64:~$ sudo docker build -t MyOS NodeOS\n\u0009vagrant@precise64:~$ sudo docker run -t -i MyOS\n\u0009Starting Init Process\n\u0009Activated Loopback Device\n\u0009Server Listening on 127.0.0.1:1\n\u0009Spawning First Runner [nsh] with Arguments []\n\u0009/ #\n\nなんとなくlsコマンド。\n\n\u0009/ # ls\n\u0009.dockerinit\n\u0009bin\n\u0009dev\n\u0009etc\n\u0009lib\n\u0009lib64\n\u0009proc\n\u0009root\n\u0009sbin\n\u0009share\n\u0009sys\n\u0009usr\n\u0009/ #\n\nnpm listはempty\n\n\u0009/ # npm list\n\u0009/\n\u0009└── (empty)\n\n\u0009/ #\n\nnodeが動く\n\n\u0009/ # node\n\u0009\u003e new Date();\n\u0009Thu Oct 17 2013 16:04:53 GMT+0000 (UTC)\n\u0009\u003e\n\nとりあえず動かせたけど、結局NodeOSで何が出来るのかはよくわからない。\n\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=4048703676\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=4797370904\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=4798037060\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=4873116066\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d00d"},"title":"SoftBankに3Gのみ速度制御をかけられた話。","create":{"$date":"2013-10-20T14:22:00.000Z"},"modify":{"$date":"2013-10-20T14:22:00.000Z"},"categories":["SoftBank","iPhone"],"image":null,"body":"\n## 2013/10/18 夜\n\n「どうもiPhoneの調子が悪い。ネットワークの速度が遅い気がする。」そんなことを思いながら高崎線の発車を待っていた。\n\n上野駅はいつも速度は遅いので、今回も場所的な問題だと思ってスルーしていたのだが、上野駅を発車していくら経っても速度が改善しない。\n\n機内モードON/OFF、電源ON/OFF、ネットワーク設定のリセットを実行してみたが結果は変わらず。\n\n\u003c!-- more --\u003e\n\nふと、4GのON/OFFをした時で気が付いた。どうやら遅いのは3Gのみで、4Gでは全く問題ない。\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\u003cp\u003e速度制限かかってるわけじゃないんだけど、かなり遅い。\u0026#10;0.03Mbpsってなんだよww \u003ca href=\"http://t.co/vKyDa3fBKC\"\u003epic.twitter.com/vKyDa3fBKC\u003c/a\u003e\u003c/p\u003e\u0026mdash; ぷーじ (@YuG1224) \u003ca href=\"https://twitter.com/YuG_1224/statuses/391195907359649792\"\u003eOctober 18, 2013\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\nソフトウェア系でやれることはほとんどやったので、この時は端末かSIMの問題を疑ってた。\n\n自宅に帰ってきてとりあえずSIMの抜き差し。結果は変わらず。\n\nもう一台のiPhone 5とSIMを交換してみると、交換先のiPhone 5で現象再現。\n\nとりあえず、SIMの不良が原因ではないかと判断して、翌日SoftBank Shopに持っていくことに決めて就寝。\n\n## 2013/10/19 朝\n\n「夜中に妖精さんが直してくれてた！」的な期待も虚しく、相変わらず3Gだけ速度が遅い。\n\nMy SoftBank 利用状況のステータス上では「通常速度」なのに、たったの0.02Mbpsしか出ない。\n\n[![3G回線速度][img01]][img01]\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/20/0001.png\n\n[![利用状況][img02]][img02]\n\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/20/0002.png\n\n仕方ないので予定通り、SoftBank Shopに来店。\n\n## SoftBank Shopにて\n\nSoftBank Shopのお姉さんに対して、今まで行ったことを報告。\n\n+ 3Gのみ速度が遅い。\n+ My SoftBank上は通常速度表示であり、7GB/月の制限ではない。\n+ 機内モードON/OFF、電源ON/OFF、ネットワーク設定のリセット、SIM抜き差しを実行しても回復しない。\n+ 別iPhoneのSIMと入れ替えると回復、入れ替え先で同様の現象が発生。\n\n自分の見立て通り、SIMに問題がありそうとのことで、SIMの交換での対応をしてもらいました。\n\n　  \n　  \n\n## が、問題は回復せず。\n\niPhoneに表示される通信速度にお姉さんと一緒に悩みながら、ショップ経由でカスタマーサポート窓口に電話。\n\nすると電話のお姉さんから予想してなかった言葉が。\n\n　  \n\n「1GB/3日を超過していらっしゃるため、通信制御をかけています。」\n\n　  \n\nなんですと！？\n\n　  \n\n## 1GB/3日の通信制御は、3Gと4Gで同時に実施されるとは限らない。\n\nいろいろ聞いた結果としては、1GB/3日の速度制御は3G/4Gどちらに実施するかは、SoftBank次第ということだそうだ。\n\n確かに、My SoftBankにも「実施する場合があります」と記載してあったが、「3G/4Gを同時に」なんて記載は無かった。一本取られたｗ\n\n[![データ通信量][img03]][img03]\n\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/20/0003.png\n\n　  \n\n## 2013/10/20/ 朝\n\n原因が速度制御ってことだったので、翌日には無事に解除されていました。\n\n[![3G通信速度][img04]][img04]\n\n[img04]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/20/0004.png\n\n速度制御の実施方法について、今回は3Gのみの速度制御だったけど、場合によっては4Gのみの場合や両方実施される場合があるってことをお勉強出来ただけ良しとしよう。\n\n無知な自分と一緒に悩ませてしまったSoftBank Shopのお姉さん、申し訳ありませんでしたｗ\n"}
{"_id":{"$oid":"563d9b67bf652a600632d00e"},"title":"Octopressにtag cloudを表示させる。","create":{"$date":"2013-10-22T13:55:00.000Z"},"modify":{"$date":"2013-10-22T13:55:00.000Z"},"categories":["Octopress"],"image":null,"body":"\n記事が少しずつ増えてきたので、Octopressのサイドバーにtag cloud風のカテゴリリストを表示してみました。\n\n\n## tag cloud とは\n\n*タグ・クラウド (tag cloud) はウェブサイト上で使用されるタグの視覚的記述を指す。直訳すると「タグの雲」を意味し、雲のように表示されるタグ文字列が大小さまざまに浮かんでいるように見えることからこの名前が付けられた。概してタグはアルファベット順にリスト化され、タグの頻出度はフォント・サイズや色によって表示される。したがって、アルファベットと人気度数の両方でタグを見つけることが可能となる。* [タグクラウド - Wikipedia](http://ja.wikipedia.org/wiki/タグクラウド)\n\n要するに、ただのリストではなくて、そのタグが使われていればいるほど、フォントが大きくなったり、色が濃くなったりして強調されるタグリストのこと。\n\n\u003c!-- more --\u003e\n\n\n## octopress-category-list を git clone\n\nまず [ctdk/octopress-category-list](https://github.com/ctdk/octopress-category-list) を git clone。\n\n`octopress-category-list/plugins/category_list.rb` を `/plugins/` にコピーしておく。\n\n\n## tagcloud.html を作成\n\n``` html\n\u003csection class=\"well\"\u003e\n  \u003cul id=\"tag-cloud\" class=\"nav nav-list\"\u003e\n    \u003cli class=\"nav-header\"\u003eCategory\u003c/li\u003e\n    {% raw %}{% category_cloud counter:true %}{% endraw %}\n  \u003c/ul\u003e\n\u003c/section\u003e\n```\n\n`/source/_includes/custom/asides/tagcloud.html` を作成。\n\n今回は、RECENT POSTS とデザインを同じにするため、[ctdk/octopress-category-list](https://github.com/ctdk/octopress-category-list) に書いてあるものと構造を変えてみました。\n\n\n## _config.yml の編集\n\n``` yaml\ndefault_asides: [custom/asides/amazon.html, asides/recent_posts.html, custom/asides/tagcloud.html, custom/asides/twitter.html]\n\ncategory_dir: categories\n```\n\n`_config.yml` の `default_asides:` に先ほど作成した `tagcloud.html` を追加。\n\nさらに、カテゴリーページのデフォルトURL `http://blog.yug1224.com/blog/categories/hoge` を `http://blog.yug1224.com/categories/hoge` としたかったので、`category_dir:` も修正。\n\n以上でカテゴリリストがサイドバーに表示されるはず。\n\ntag cloudなのかcategory listなのかごっちゃになってるのがもやもやするけどまぁいいか。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d00f"},"title":"Apple Online Storeのアフィリエイトを登録してみた。","create":{"$date":"2013-10-25T12:43:00.000Z"},"modify":{"$date":"2013-10-25T12:43:00.000Z"},"categories":["Apple","affiliate"],"image":null,"body":"\n[iTunes アフィリエイトプログラムを登録してみた。](http://blog.yug1224.com/2013/08/27/affiliate/)に引き続き、Apple Online Storeのアフィリエイトにも登録してみました。\n\niTunesアフィリエイトプログラムと同様に、提携先がPHGに変更したらしく、Appleの公式ページに載っているバリューコマースの方では登録出来なくなっていましたが、[Apple Online Store サインアップ](https://signup.performancehorizon.com/signup/jp/appleaffiliates)から登録できました。\n\n\u003c!-- more --\u003e\n\n必要事項を入力して登録。例によって審査があるので数日我慢。\n\n\n## 初期設定\n\n審査が終わったら、Appleからログインページへのリンクが送られてくるので初期設定。\n\n基本的にはiTunesのアフィリエイトプログラムの時と変わらず。\n\nまずは 「Programs」から「Japan」を選んで「Join」\n\n[![国を選ぶ][img01]][img01]\n\n　  \n\n処理中になるのですが、処理完了するまでは結構時間がかかりました。\n\n[![処理中][img02]][img02]\n\n\n## 日本語化\n\n自分の場合、英語表記になっていたので、「Settings」の「Locale」から「日本語」を選択で日本語化しておきました。\n\n[![日本語化][img03]][img03]\n\n\n## アフィリエイトリンクの作成\n\n処理中が処理完了になったら、いよいよアフィリエイトリンクの作成！\n\n[クリエイティブ]の「トラッキング」からリンクを作成することができます。\n\n[![リンク作成][img04]][img04]\n\n　  \n\n入力する項目は2つ。\n\n+ **パブリッシャー参照番号** : レポーティングで表示するための項目。自分は商品名を入れてみました。\n+ **ディープリンク** : Apple Online Storeの商品URL。\n\nこれらを入力すると、トラッキングリンクにアフィリエイト用のURLが生成されているので、あとはコピペするだけ。\n\n試しに自分が使っているiPhone 5用ケースのリンクを作ってみました。\n\n[![Incase Pro Snap Case for iPhone 5 (Green \u0026 Clear)][img05]][afili]\n\n[Incase Pro Snap Case for iPhone 5 (Green \u0026 Clear)][afili]\n\n　  \n\n実際にこのリンクを自分で踏んでみたところ、ちゃんとクリック数に反映されることも確認できました。\n\n[![クリック数][img06]][img06]\n\nちなみに報酬を受取るためには、振込先の設定も必要になるので注意が必要。\n\n　  \n\n\u003c!-- 画像 --\u003e\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/25/0001.PNG\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/25/0002.PNG\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/25/0003.PNG\n[img04]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/25/0004.PNG\n[img05]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/25/0005.PNG\n[img06]: https://dl.dropboxusercontent.com/u/3189929/images/2013/10/25/0006.PNG\n[afili]: http://aos.prf.hn/click/camref:11lnIH/pubref:Incase%20Pro%20Snap%20Case%20for%20iPhone%205%20(Blue%20%26%20Clear)/destination:http%3A%2F%2Fstore.apple.com%2Fjp%2Fproduct%2FHA766ZM%2FA%2Fincase-pro-snap-case-for-iphone-5-(blue-%26-clear)%3Ffnode%3D47\n"}
{"_id":{"$oid":"563d9b67bf652a600632d010"},"title":"HomebrewでEmacsをインストール。","create":{"$date":"2013-10-28T15:33:00.000Z"},"modify":{"$date":"2013-10-28T15:33:00.000Z"},"categories":["Emacs","Mac","Homebrew"],"image":null,"body":"\nMacにMavericksを入れたので、Emacs 24を入れ直してみました。\n\n\n``` bash\n$ brew install emacs --cocoa\n$ brew linkapps\n```\n\n基本的にこれだけで、`/Applications/`にシンボリックリンクが貼られて、Emacsが使える。\n\n\u003c!-- more --\u003e\n\n　  \n\n`/Applications/`に存在するシンボリックリンクは、Spotlightでインデックスが作成されないという欠点があるので、自分は`brew linkapps`をやらずにEmacs.appを直接コピーしておきました。\n\n``` bash\n$ cp -R /usr/local/Cellar/emacs/24.3/Emacs.app /Applications/\n```\n\nSpotlightのインデックスは、ランチャーアプリでも利用しているらしいので気をつけた方が良いかも。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d011"},"title":"octopress-category-listをforkしました。","create":{"$date":"2013-10-30T14:59:00.000Z"},"modify":{"$date":"2013-10-30T14:59:00.000Z"},"categories":["Octopress"],"image":null,"body":"\n前回の記事（[Octopressにtag Cloudを表示させる。](http://blog.yug1224.com/2013/10/22/tag-cloud/)）で使ったplugin、[octopress-category-list](https://github.com/ctdk/octopress-category-list)ですが、「Node.js」のように`.`入りのカテゴリだとリンクが正しく作られていませんでした。\n\n例えば記事下部にある「Posted by YuG1224 Oct 18th, 2013 Node.js」からだと、`http://blog.yug1224.com/categories/node-dot-js/` というリンクになっていて、カテゴリページに遷移します。\n\nしかし、サイドバーに設置したカテゴリの場合は、`http://blog.yug1224.com/categories/node-js/` というリンクになっているため、404ページに遷移してしまっていました。\n\nちょっとした正規表現だけでいけそうだったので、forkして直してみました。\n\n[YuG1224/octopress-category-list](https://github.com/YuG1224/octopress-category-list)\n\n\u003c!-- more --\u003e\n\n``` ruby\n-        url = category_dir + category.gsub(/_|\\P{Word}/u, '-').gsub(/-{2,}/u, '-').downcase\n+        url = category_dir + category.gsub(/\\./u, '-dot-').gsub(/_|\\P{Word}/u, '-').gsub(/-{2,}/u, '-').downcase\n```\n\n上記の様に正規表現で文字列の置換をしている部分で、`.`を持つカテゴリの場合は`-dot-`に置換されるように変更しています。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d012"},"title":"HDDのデータがぶっ飛んだので、データレスキューで救出した。","create":{"$date":"2013-11-01T12:35:00.000Z"},"modify":{"$date":"2013-11-01T12:35:00.000Z"},"categories":["Mac"],"image":null,"body":"\nその別れは突然やってきた。\n\n　\n\nHDDのデータ消失。(3年ぶり2回目)\n\n　\n\n前回は、BAFFALOのLinkStationがMacやWindowsからアクセス出来なくなり、Ubuntuでのデータ復旧中にジワジワと死んでいく様はホラー。\n\n今回は、バックアップを取っていなかった前回を反省し、1TB×2でミラーリングしていました。しかし、その対策はあっけなくも無残に、2つのHDDから同時にデータがぶっ飛びました。\n\n　\n\n3年前はほぼ自分だけのデータだけだったので簡単に諦められたが、今回は子供たちのデータがあるので何としても復活させたい。\n\n背に腹は代えられないので、速攻でデータレスキューをポチりました。\n\n\u003c!-- more --\u003e\n\n　\n\n\u003ciframe src=\"https://widgets.itunes.apple.com/widget.html?c=jp\u0026brc=FFFFFF\u0026blc=FFFFFF\u0026trc=FFFFFF\u0026tlc=FFFFFF\u0026d=\u0026t=\u0026m=software\u0026e=macSoftware\u0026w=250\u0026h=300\u0026ids=497951710\u0026wt=discovery\u0026partnerId=\u0026affiliate_id=\u0026at=11l6YY\u0026ct=\" frameborder=0 style=\"overflow-x:hidden;overflow-y:hidden;width:250px;height: 300px;border:0px\"\u003e\u003c/iframe\u003e\n\n　\n\n実行中の画面は以下のような感じ。\n\nディスクをスキャンするアニメーションがずっと流れていて、その中でスキャンできたファイルの種類と数がリストになって表示されていました。\n\n　\n\n[![スキャン中の画面][img01]][img01]\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2013/11/01/0001.png\n\n　\n\n結果的にはいくつかファイルが壊れていたり、直近3ヶ月分くらいサルベージ出来なかったけれど、それはiPhoneと同期してあるので、きっとなんとかなるでしょう。\n\nそれ以外はほぼ復活してくれたので大満足。スキャンして復活保存するまでに一晩かかりましたけど。\n\nフリーソフトやもっと安いのもあったけれど、App Storeから入れられるし、なんとしてでも復活させたかったので金額なんてどうでも良かった。\n\n本当にデータレスキュー様、ありがとうございましたｗ\n\n　\n\n## 追記 2013/11/07：\n\n今回、自分が使っていた外付けHDDはWestern Digital製の[My Book Studio Edition II](http://support.wdc.com/product/install.asp?modelno=WDH2Q20000J\u0026x=-659\u0026y=-256)でしたが、どうやら最近、Western Digital製のHDDが軒並みデータ消失しているようで、時期的に自分もこれにハマっていた模様。\n\n+ [OS X Mavericksで外付けHDDデータ消失の恐れ -INTERNET Watch](http://internet.watch.impress.co.jp/docs/news/20131105_622110.html)\n+ [Mavericksで外付けHDDのデータが消えるのはWestern Digital製HDDだけじゃない？WDユーティリティアプリをアンインストールする方法まとめ。](http://applech2.com/archives/34594508.html)\n\nOSをMavericksに上げたばかりだし、WDドライブ・マネージャー動いてたし、RAID構成なのに一気に飛ぶなんて考えにくいし、やっぱりこれっぽいかなぁと。\n\nもうデータ吸い上げて上書きしちゃったからどうしようもないんだけどね。これからMavericksに上げる人は気をつけてください。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d013"},"title":"HDDのデータがぶっ飛んだので、Bitcasaを導入しました。","create":{"$date":"2013-11-03T14:42:00.000Z"},"modify":{"$date":"2013-11-03T14:42:00.000Z"},"categories":["Mac"],"image":null,"body":"\n外付けHDDをミラーリングしていても、データが逝くときはあっけないということがわかったので、今回からはクラウドストレージに手を出してみる！\n\nRAID 1 じゃダメだったので RAID 5 か RAID 10 にしたかったけど、予算の問題と物理的に存在するものは結局壊れたときに自分で復旧するしかないってことで保留。\n\nDropbox や Flickr に写真や動画をあげようかとも思ったけど、容量が少ないし全体バックアップには向かなそうってことで保留。\n\n結局、Bitcasa に決定。\n\n\u003c!-- more --\u003e\n\n[![Bitcasa][img01]][img01]\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2013/11/03/0001.png\n\n\n## Bitcasa（ビットカーサ）の概要\n\nBitcasa とは、2011年に設立したBitcasa社による容量無制限のクラウドストレージサービス。\n\n無料プランの容量は10GBまで、月$10か年$99で容量無制限のプランがあります。\n\niTunesとiPhotoのライブラリをまるごとバックアップしたかったので月額$10プランに登録してみました。\n\n[![料金プラン][img02]][img02]\n\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2013/11/03/0002.png\n\n\n## Bitcasaの起動\n\nまずBitcasaに登録し、クライアントアプリをインストールします。\n\nインストール後にBitcasaアプリを起動すると、自動的にBitcasaのディスクがマウントされます。\n\n情報を見てみると562.95TBのディスクがマウントされていますが、容量無制限のため、Macで扱える最大量が表示されているようです。\n\n[![Bitcasaを起動][img03]][img03]\n\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2013/11/03/0003.png\n\nあとはこのディスクを外付けHDDの様に使うも良し、バックアップ用に使うも良し。自分次第！\n\nとりあえず自分はローカルの外付けHDD（1TB×2のミラーリング）にiTunesとiPhotoのライブラリを置き、そのライブラリをBitcasaに定期的にバックアップコピーしようかなと思っています。\n\nが、ちなみに合わせて100GBくらいのデータをアップロードするのに、1日程度かかりました。\n\nなーんか、Bitcasaのアプリがいろいろやってくれちゃっているせいで、アップロードに結構時間がかかっているような雰囲気がしますが、あくまでも大容量のバックアップ用なので自分はそれでも良いかなと。\n\n速度が気になる人には、仮想外付けHDDみたいな使い方は向いてないのかもしれません。\n\n\n## ミラーリングとコピー\n\nBitcasaには2つの機能があります。それは「ミラーリング」と「コピー」\n\nミラーリングとは、ローカルの任意のディレクトリをBitcasa上に同期させること。Dropboxなどと同様の機能になります。ローカル上で変更や削除があると自動的にBitcasa上でも変更や削除が同期されます。\n\nコピーとは、ローカルの任意のディレクトリやファイルをBitcasa上にコピーすること。ミラーリングとは違い、変更削除が同期されないため、ある時点での内容を残しておくものです。\n\n自分は外付けHDDに格納したiTunesとiPhotoのライブラリをBitcasaにミラーリングしたかったのですが、Bitcasaがミラーリング出来るのはローカルのものに限るようで、外部ディスク内のものはミラーリングすることが出来ませんでした。\n\n結局、定期的にコピーしようと思っているのですが、以下rsyncをlsyncdやcron、もしくはMac付属のAutomatorで自動実行しようかなと思っています。\n\n```\nrsync -arz --delete /Volumes/MyBook/iPhoto\\ Library.photolibrary /Volumes/Bitcasa\\ Infinite\\ Drive/\nrsync -arz --delete /Volumes/MyBook/iTunes /Volumes/Bitcasa\\ Infinite\\ Drive/\n```\n\n\n## 容量無制限ストレージが1ヶ月間無料！\n\n友達を招待すると、お互い1ヶ月無料になるらしいので是非ｗ\n\nhttp://l.bitcasa.com/XNTsZyKo\n\n招待者は1回だけらしいけど。\n\n\n## 追記\n\n2013/11/19付で値上げ＆容量制限付きプランが発表されていました。\n\n+ 無料:5GB\n+ 月$10/年$99：1TB\n+ 月$49/年$499：5TB\n+ 月$99/年$999：無制限\n\n無制限プランが10倍値上げで使いにくくなったイメージ。1TBなんてなかなか行かないけど、無制限っていう安心感はすごく良かったんだけどなぁ。\n\n[公式ブログ](http://blog.bitcasa.com/2013/11/19/our-new-pricing-and-the-evolution-of-bitcasa/)\n"}
{"_id":{"$oid":"563d9b67bf652a600632d014"},"title":"Octopressのテーマを変更してみる。","create":{"$date":"2013-11-07T14:20:00.000Z"},"modify":{"$date":"2013-11-07T14:20:00.000Z"},"categories":["Octopress"],"image":null,"body":"\nOctopressはテーマによってブログデザインを変更することが出来ます。\n\n[公式ドキュメント](http://octopress.org/docs/theme/)を参考に自分でテーマを作っても良いのですが、サードパーティのテーマがまとめられているので[GitHub](https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes)から好きなテーマを選ぶのが簡単だと思います。\n\n\u003c!-- more --\u003e\n\n　\n\nテーマを適用するための基本的な流れは以下の通り。これはどのテーマでも変わらないと思います。\n\n+ 任意の場所にgit clone\n+ テーマのファイルをoctopressの.themesディレクトリにコピー\n+ rake install['hoge']\n+ rake generate\n\n　\n\n自分はシンプルなデザインが好きなので、Bootstrapデザインのテーマを適用しています。\n\n[bkutil / bootstrap-theme](https://github.com/bkutil/bootstrap-theme)\n\n``` bash\n$ git clone git://github.com/bkutil/bootstrap-theme.git bootstrap-theme\n$ cp -R bootstrap-theme ~/octopress/.themes/bootstrap\n# どうせコピーするなら、最初から.themes直下にgit cloneしても良いかも？\n\n$ rake install['bootstrap']\n$ rake generate\n# あとはpreviewで確認して、deploy!!\n```\n\n"}
{"_id":{"$oid":"563d9b67bf652a600632d015"},"title":"OctopressにPubSubHubbubを適用してみた。","create":{"$date":"2013-11-20T13:40:00.000Z"},"modify":{"$date":"2013-11-20T13:40:00.000Z"},"categories":["Octopress"],"image":null,"body":"\nリアルタイムRSS配信を可能にするPubSubHubbubをOctopressに適用してみました。\n\n現状のほとんどの場合、更新情報をPullで取得していますが、このPubSubHubbubを使うとPub/Subの仕組みによって配信情報がすぐ更新されるようになるらしいです。\n\n参考：[Pubsubhubbub with Octopress - ~/git/blog](http://blog.higgsboson.tk/2013/01/02/pubsubhubbub-with-octopress/)\n\n　\n\n1. Publisher登録\n2. `_config.yml`の編集\n3. `source/atom.xml`の編集\n4. `Rakefile`の編集\n\n\u003c!-- more --\u003e\n\n\n## Publisher登録\n\nまず[superfeedr](http://superfeedr.com)にPublisherとして登録します。\n\nその後、RSSのURLを登録して、[https://yug1224.superfeedr.com](https://yug1224.superfeedr.com)のようなHubになるURLを設定します。\n\n\n## _config.ymlの編集\n\nsuperfeedrで作ったURLは`_config.yml`に登録しておきます。\n\n``` yaml\nhub_url: https://yug1224.superfeedr.com\n```\n\n\n## source/atom.xmlの編集\n\nHubになるURLがatom.xmlに追加されるように7行目を追加します。\n\n``` yaml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cfeed xmlns=\"http://www.w3.org/2005/Atom\"\u003e\n\n  {% raw %}\u003ctitle\u003e\u003c![CDATA[{{ site.title }}]]\u003e\u003c/title\u003e\n  \u003clink href=\"{{ site.url }}/atom.xml\" rel=\"self\"/\u003e\n  \u003clink href=\"{{ site.url }}/\"/\u003e\n  {% if site.hub_url %}\u003clink href=\"{{ site.hub_url }}\" rel=\"hub\"/\u003e{% endif %}\n  \u003cupdated\u003e{{ site.time | date_to_xmlschema }}\u003c/updated\u003e\n  \u003cid\u003e{{ site.url }}/\u003c/id\u003e\n  \u003cauthor\u003e\n    \u003cname\u003e\u003c![CDATA[{{ site.author | strip_html }}]]\u003e\u003c/name\u003e\n    {% if site.email %}\u003cemail\u003e\u003c![CDATA[{{ site.email }}]]\u003e\u003c/email\u003e{% endif %}\n  \u003c/author\u003e\n  \u003cgenerator uri=\"http://octopress.org/\"\u003eOctopress\u003c/generator\u003e\n\n  {% for post in site.posts limit: 20 %}\n  \u003centry\u003e\n    \u003ctitle type=\"html\"\u003e\u003c![CDATA[{{ post.title | cdata_escape }}]]\u003e\u003c/title\u003e\n    \u003clink href=\"{{ site.url }}{{ post.url }}\"/\u003e\n    \u003cupdated\u003e{{ post.date | date_to_xmlschema }}\u003c/updated\u003e\n    \u003cid\u003e{{ site.url }}{{ post.id }}\u003c/id\u003e\n    \u003ccontent type=\"html\"\u003e\u003c![CDATA[{{ post.content | expand_urls: site.url | cdata_escape }}]]\u003e\u003c/content\u003e\n  \u003c/entry\u003e\n  {% endfor %}{% endraw %}\n\u003c/feed\u003e\n```\n\n\n## Rakefileの編集\n\n最後にdeploy時にsuperfeedrに通知する処理をRakefileに追加します。13行目からがそれ。\n\n``` ruby\ndesc \"Default deploy task\"\ntask :deploy do\n  # Check if preview posts exist, which should not be published\n  if File.exists?(\".preview-mode\")\n    puts \"## Found posts in preview mode, regenerating files ...\"\n    File.delete(\".preview-mode\")\n    Rake::Task[:generate].execute\n  end\n\n  Rake::Task[:copydot].invoke(source_dir, public_dir)\n  Rake::Task[\"#{deploy_default}\"].execute\n\n  require 'net/http'\n  require 'uri'\n  hub_url = \"https://yug1224.superfeedr.com\" # \u003c--- replace this with your hub\n  atom_url = \"http://blog.yug1224.com/atom.xml\" # \u003c--- replace this with your full feed url\n  resp, data = Net::HTTP.post_form(URI.parse(hub_url),\n                                   {'hub.mode' =\u003e 'publish',\n                                     'hub.url' =\u003e atom_url})\n  raise \"!! Hub notification error: #{resp.code} #{resp.msg}, #{data}\" unless resp.code == \"204\"\n  puts \"## Notified hub (\" + hub_url + \") that feed #{atom_url} has been updated\"\nend\n```\n\nこれでいつも通りにdeployする度に自動でやってくれるはず。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d016"},"title":"touchコマンドを再帰的に実行する方法","create":{"$date":"2013-11-20T13:56:00.000Z"},"modify":{"$date":"2013-11-20T13:56:00.000Z"},"categories":["Mac"],"image":null,"body":"\nファイルやディレクトリのtimestampを変更するコマンド touch。\n\nこの touch には -R オプションが存在しないため、配下ディレクトリを再帰的に実行することが出来ない。\n\nしかし以下のように、findの結果をxargsでtouchの引数として渡すことで、再帰的に実行することが出来るようになります。\n\n``` bash\n$ find . | xargs touch\n```\n\n\u003c!-- more --\u003e\n\n\n"}
{"_id":{"$oid":"563d9b67bf652a600632d017"},"title":"環境毎に.emacs.d/init.elの設定を分ける","create":{"$date":"2013-11-25T15:44:00.000Z"},"modify":{"$date":"2013-11-25T15:44:00.000Z"},"categories":["Emacs"],"image":null,"body":"\n自宅、ノマド、 会社、全てのMacで開発環境はEmacsを使っているのだけど、init.elの設定をどうにかして共有出来ないかと悩んでた。\n\nDropboxやgitで同期したとしても、画面サイズが違うのでEmacsの縦横サイズはその都度設定しなければならない！\n\nと、思っていたが、elispではifが使えるので条件分岐させてみました。\n\n\u003c!-- more --\u003e\n\n\u0009;;ウィンドウサイズの位置、サイズ\n\u0009(if window-system (progn\n\u0009\u0009(if (string-match \"iMac\" system-name)\n\u0009\u0009\u0009;;iMac 21.5inch\n\u0009\u0009\u0009(setq initial-frame-alist '((width . 268)(height . 59)(top . 0)(left . 00)))\n\u0009\u0009)\n\u0009\u0009(if (string-match \"MBA\" system-name)\n\u0009\u0009\u0009;;MacBook Air 11inch\n\u0009\u0009\u0009(setq initial-frame-alist '((width . 189)(height . 41)(top . 0)(left . 00)))\n\u0009\u0009)\n\u0009\u0009(set-background-color \"Black\")\n\u0009\u0009(set-foreground-color \"White\")\n\u0009\u0009(set-cursor-color \"Gray\")\n\u0009))\n\n\nsystem-name で表示される端末名の違いによって、ウィンドウサイズを変更しています。\n\n全ての端末のOSが違うのならば、system-configuration でOSの種類を取得しても良いかも。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d018"},"title":"Windows AzureでNode.jsを動かす。","create":{"$date":"2013-12-11T15:57:00.000Z"},"modify":{"$date":"2013-12-11T15:57:00.000Z"},"categories":["Node.js","Azure"],"image":null,"body":"\n[Windows Azure Advent Calendar 2013](http://qiita.com/advent-calendar/2013/azure) 12日目です。\n\nマニアックなものではなくて、Hello,Worldいきます。\n\n自分は普段からNode.jsが大好きで使っているのですが、Node.jsのWebアプリケーションをAzureで驚くほど簡単に作ることが出来たので紹介します。\n\n\n## 手順\n\n1. expressを使って、Webアプリケーションを構築。\n2. GitHubリポジトリにコミット。\n3. Windows Azureのポータルで、Webサイトを作成。\n4. GitHubリポジトリからデプロイ設定。\n\n\u003c!-- more --\u003e\n\n\n## Webアプリケーション構築\n\nまずは、Node.jsのWebフレームワークであるexpressを使って、ローカル上にWebアプリケーションを構築します。\n\n```\n$ express ex-node\n```\n\nたった1コマンドで一通りの構成を全部作ってくれます。すごく簡単。（Node.js, expressがインストール済であれば。）\n\n\n## GitHubにCommit\n\n次に、先ほど作ったアプリケーションをまるごとGitHubにコミットしておきます。\n\n```\n$ cd ex-node\n$ git init\n$ git add .\n$ git commit -m 'first commit'\n$ git remote add origin https://github.com/YuG1224/ex-node.git\n$ git push -u origin master\n```\n\nディレクトリを移動して、git pushするだけ。これもすごく簡単。\n\n\n## AzureでWebサイトを作る\n\nただNode.jsを動かすだけなので、簡易作成でWebサイトを作成します。URLに任意の文字列を入力し、リージョンは東アジアを選ぶだけです。\n\n[![Webサイトを作る][img01]][img01]\n\n\n## AzureとGitHubを連携してデプロイ\n\nWebサイトが完成したら、「ソース管理からのデプロイの設定」からソースコードの場所を選択します。\n\n[![Webサイトの完成][img02]][img02]\n\nGitHubやDropboxなど、複数から選択することが出来ますが、今回はGitHubを選択。\n\n[![ソースコードの位置][img03]][img03]\n\n連携が完了したら、デプロイするブランチを選択します。\n\n[![デプロイするブランチ][img04]][img04]\n\nデプロイが完了したら、もう既にNode.jsのWebアプリケーションがAzure上で動いています！\n\n実際に今回作ったWebサイトはここ→http://ex-node.azurewebsites.net\n\n\n## まとめ\n\nnpm installをしなくても、必要なmoduleはAzureが全て用意してくれるのですごく簡単でした！\n\nしかし、インストール時にPythonかnode-gypを利用するmoduleはインストールできないので、ちょっと複雑なことをやろうとするとハマります。\n\n例えば自分の場合、文字エンコードを変換するためのnode-iconvを使おうとしたらデプロイで失敗しました。\n\nどうしても使いたい場合は、仮想マシンを作ってNode.jsのインストールから始めないとダメなようです。\n\n参考：[Windows Azure アプリケーションでの Node.js モジュールの使用](http://www.windowsazure.com/ja-jp/develop/nodejs/common-tasks/working-with-node-modules/)\n\n\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\n\nちなみに、MacでWindows Azureを使うなんて、もしかして異端なのでしょうか？\n\n\n## 追記 2014/01/07\n\nWindows Azure で Webサイトを作ると、特別な設定をすることなく SSL でも利用することが出来るようになっています。→https://ex-node.azurewebsites.net\n\n証明書は *.azurewebsites.net のワイルドカード証明書が適用されていました。\n\n\u003c!-- 画像 --\u003e\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2013/12/12/0001.png\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2013/12/12/0002.png\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2013/12/12/0003.png\n[img04]: https://dl.dropboxusercontent.com/u/3189929/images/2013/12/12/0004.png\n"}
{"_id":{"$oid":"563d9b67bf652a600632d019"},"title":"2013年を振り返ってみて。","create":{"$date":"2013-12-31T13:02:00.000Z"},"modify":{"$date":"2013-12-31T13:02:00.000Z"},"categories":["Diary"],"image":null,"body":"\n2013年も残り数時間なので、少し振り返ってみる。\n\n2012年末はデスマしてたので、年明けからしばらくはそれの残件対応に追われてた。\n\n恒久対応が終わってからは、UIのブラッシュアップや新規機能の追加などをし、それなりに良いものが出来たと感じている。\n\n\u003cbr\u003e\n\n新卒1〜2年目で、サービスの企画からリリース、そしてデスマを経験し、3年目で機能改善と機能追加のために、新しい技術をどんどん取り入れたことは間違いじゃなかったと思う。\n\nNode.jsとMongoDBを使ってサーバサイドを速攻で作れるし、BootstrapやjQuery、CSS3やHTML5でクライアントサイドも作れるようになった。\n\n\u003cbr\u003e\n\n部分的じゃなく、一通りのWebアプリケーションを作れることはそれだけで武器になる。たとえ使える言語が限られていたとしても。\n\n年末に参加したハッカソン、[ReHack](http://atnd.org/events/45960) で特にそう感じた。\n\n\u003cbr\u003e\n\nチーム内で出来ることが偏ると、担当分けが出来なくてそれだけで話が進まないし、誰かが困っている時も手が出せない。\n\nしかし、一通り何でも出来れば、出来ない部分を巻き取ったりサポートすることが出来る。\n\nフルスタックエンジニアという言葉があるけれど、これからのエンジニアはサーバサイドだけに引きこもっていないで、クライアントサイドにも出て来るべきだと勝手に思っている。\n\n個人的にはデザインの勉強に力を入れたい。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d01a"},"title":"Ubuntu 13.10 に nvm で Node.js を入れて動かす。","create":{"$date":"2014-01-07T15:19:00.000Z"},"modify":{"$date":"2014-01-07T15:19:00.000Z"},"categories":["Ubuntu","Node.js"],"image":null,"body":"\nUbuntu で Node.js を使おうとした時、apt-get で入れてもいいのだけど、nvm を使った方がバージョン変更が簡単で良かったのでメモ。\n\n## インストール\n\n``` bash\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n$ . ~/.nvm/nvm.sh\n$ nvm install 0.10\n$ nvm ls\n\n  v0.10.24\ncurrent: \u0009v0.10.24\n```\n\n通常は `$ nvm install v0.10.24` でバージョン指定だが、`$ nvm install 0.10` にすると 0.10 の最新版をインストールしてくれる。\n\n\n## .bashrc編集\n\n``` bash\n. ~/.nvm/nvm.sh\nnvm use 0.10\n```\n\n.bashrc もしくは .bash_profile などにコマンドを書いておくと、開いた時にいつも nvm と node が使えるようになるので便利。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d01b"},"title":"Homebrew を アップデートしようとしたらハマった。","create":{"$date":"2014-01-09T14:17:00.000Z"},"modify":{"$date":"2014-01-09T14:17:00.000Z"},"categories":["Homebrew","Mac"],"image":null,"body":"\n## エラー発生\n\nbrew update で以下のエラーが出たので解決方法をメモ。\n\n```\n$ brew update\nChecking out files: 100% (1184/1184), done.\nError: undefined method `to_sym' for nil:NilClass\nPlease report this bug:\n    https://github.com/mxcl/homebrew/wiki/troubleshooting\n/usr/local/Library/Homebrew/cmd/update.rb:134:in `report'\n/usr/local/Library/Homebrew/cmd/update.rb:132:in `each_line'\n/usr/local/Library/Homebrew/cmd/update.rb:132:in `report'\n/usr/local/Library/Homebrew/cmd/update.rb:36:in `update'\n/usr/local/Library/brew.rb:91:in `send'\n/usr/local/Library/brew.rb:91\n```\n\nひとまず brew doctor で状態確認。\n\n\u003c!-- more --\u003e\n\n```\n$ brew doctor\n```\n\n\n## XQuartz が古い\n\n```\nWarning: Your XQuartz (2.7.4) is outdated\nPlease install XQuartz 2.7.5:\n  https://xquartz.macosforge.org\n```\n\nhttps://xquartz.macosforge.org から最新版の XQuartz をダウンロードしてインストール。\n\n\n## PATH がない\n\n```\nWarning: /usr/bin occurs before /usr/local/bin\nThis means that system-provided programs will be used instead of those\nprovided by Homebrew. The following tools exist at both paths:\n\n    emacs\n    emacsclient\n    etags\n    git\n    git-cvsserver\n    git-receive-pack\n    git-shell\n    git-upload-archive\n    git-upload-pack\n    gitk\n\nConsider setting your PATH so that /usr/local/bin\noccurs before /usr/bin. Here is a one-liner:\n    echo export PATH='/usr/local/bin:$PATH' \u003e\u003e ~/.bash_profile\n```\n\nPATHを設定して、~/.bash_profile にも設定を追加しておく。\n\n```\n$ export PATH='/usr/local/bin:$PATH'\n$ echo export PATH='/usr/local/bin:$PATH' \u003e\u003e ~/.bash_profile\n```\n\n\n## 無事解決\n\n```\n$ brew doctor\nYour system is ready to brew.\n$ brew update\n```\n\nbrew doctor は問題なく、brew update も無事に完了出来ました。\n\n\n## 参考\n\nhttp://qiita.com/hshimo/items/e2ea3c21d8b150e3a055\nhttp://bismar.hatenablog.com/entry/2012/12/06/022457\n"}
{"_id":{"$oid":"563d9b67bf652a600632d01c"},"title":"SONY α7 ILCE-7K と HVL-F43M を買った。","create":{"$date":"2014-01-12T15:45:00.000Z"},"modify":{"$date":"2014-01-12T15:45:00.000Z"},"categories":["camera"],"image":null,"body":"\nフルサイズミラーレス一眼 [SONY α7 ILCE-7K](http://www.amazon.co.jp/gp/product/B00FXKLPVU?ie=UTF8\u0026camp=1207\u0026creative=8411\u0026creativeASIN=B00FXKLPVU\u0026linkCode=shr\u0026tag=yug1224-22\u0026qid=1389967903\u0026sr=8-1\u0026keywords=ILCE-7K) 買いました。\n\n今まで使っていた NEX-5D に特に不満は無かったのですが、フルサイズに惚れてしまったので買ってしまいましたｗ\n\n\u003c!-- more --\u003e\n\n\n## SONY α7 ILCE-7K\n\n[![α7 フラッシュなし][thumb01]][img01]\n\n早くフルサイズを試してみたかったので、とりあえずキットレンズ付き。\n\nレンズに比べると、本体が小さく薄く見えるけど、NEX の本体と比べるとさすがに大きくて厚くなっています。\n\n\n## ILCE-7K + HVL-F43M\n\n[![α7 フラッシュあり][thumb02]][img02]\n\n子供がいるので室内撮りも多く、暗さを感じる時もあったので、思い切って [HVL-F43M](http://www.amazon.co.jp/gp/product/B00DOS2U08?ie=UTF8\u0026camp=1207\u0026creative=8411\u0026creativeASIN=B00DOS2U08\u0026linkCode=shr\u0026tag=yug1224-22\u0026qid=1389968220\u0026sr=8-1\u0026keywords=HVL-F43M) の フラッシュも同時に購入。\n\nフラッシュを付けると、どうしてもアンバランスさが際立ってしまう気がする。\n\n\n## 試し撮り\n\n[![ゾウ 70mm フラッシュなし][thumb03]][img03]\n\n+ レンズ:\u0009FE 28-70mm F3.5-5.6 OSS\n+ 焦点距離:\u000970mm\n+ F値:\u0009\u00095.6\n+ シャッタースピード:\u00091/250\n+ ISO感度:\u00094000\n+ 露出補正:\u0009±0EV\n\n\n[![ゾウ 70mm フラッシュあり][thumb04]][img04]\n\n+ レンズ:\u0009FE 28-70mm F3.5-5.6 OSS\n+ 焦点距離:\u000970mm\n+ F値:\u0009\u00095.6\n+ シャッタースピード:\u00091/250\n+ ISO感度:\u00091600\n+ 露出補正:\u0009±0EV\n\n\n## 感想\n\nフルサイズの力は凄い！画像サイズが 6000*4000 なんて巨大な写真を撮ることが出来たｗ\n\n外付けフラッシュの効果にも感動した！今まではISO感度上げたり、シャッタースピードを遅くしたりして頑張っていたけど、フラッシュがあると全然違う。\n\nレンズ集める前にフラッシュを買った方が絶対良いと思った。\n\n\n\n\n[thumb01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/01/13/t0001.jpg\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/01/13/0001.jpg\n[thumb02]: https://dl.dropboxusercontent.com/u/3189929/images/2014/01/13/t0002.jpg\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2014/01/13/0002.jpg\n[thumb03]: https://dl.dropboxusercontent.com/u/3189929/images/2014/01/13/t0003.jpg\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2014/01/13/0003.jpg\n[thumb04]: https://dl.dropboxusercontent.com/u/3189929/images/2014/01/13/t0004.jpg\n[img04]: https://dl.dropboxusercontent.com/u/3189929/images/2014/01/13/0004.jpg\n"}
{"_id":{"$oid":"563d9b67bf652a600632d01d"},"title":"Octopress の favicon を変更する。","create":{"$date":"2014-01-14T15:07:00.000Z"},"modify":{"$date":"2014-01-14T15:07:00.000Z"},"categories":["Octopress"],"image":null,"body":"\nOctopress で Favicon を変更する方法をずっと探していたのだが、気付いてみると呆気なかった。\n\n```\n./source/favicon.png\n```\n\nこれを任意の画像に入れ替えるだけ。たったそれだけ。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d01e"},"title":"npm install で SSL Error になった時の対処法。","create":{"$date":"2014-01-21T23:33:00.000Z"},"modify":{"$date":"2014-01-21T23:33:00.000Z"},"categories":["npm","Node.js"],"image":null,"body":"\nnpm install をしようとしたら、「npm ERR! Error: SSL Error: CERT_UNTRUSTED」というエラーが発生した。\n\n\u0009$ npm install\n\u0009npm http GET https://registry.npmjs.org/querystring\n\u0009npm http GET https://registry.npmjs.org/connect-mongo/0.2.0\n\u0009npm http GET https://registry.npmjs.org/dateformat/1.0.2-1.2.3\n\u0009npm http GET https://registry.npmjs.org/async/0.2.5\n\u0009npm http GET https://registry.npmjs.org/geocoder/0.1.0\n\u0009npm http GET https://registry.npmjs.org/log4js/0.5.7\n\u0009npm http GET https://registry.npmjs.org/imagemagick/0.1.2\n\u0009npm http GET https://registry.npmjs.org/ejs/0.8.3\n\u0009npm http GET https://registry.npmjs.org/request/2.11.4\n\u0009npm http GET https://registry.npmjs.org/mongodb/1.1.7\n\u0009npm http GET https://registry.npmjs.org/should\n\n\u0009npm ERR! Error: SSL Error: CERT_UNTRUSTED\n\u0009npm ERR!     at ClientRequest.\u003canonymous\u003e (/usr/local/lib/node_modules/npm/node_modules/request/main.js:483:26)\n\u0009npm ERR!     at ClientRequest.g (events.js:156:14)\n\u0009npm ERR!     at ClientRequest.emit (events.js:67:17)\n\u0009npm ERR!     at HTTPParser.parserOnIncomingClient [as onIncoming] (http.js:1256:7)\n\u0009npm ERR!     at HTTPParser.parserOnHeadersComplete [as onHeadersComplete] (http.js:91:29)\n\u0009npm ERR!     at CleartextStream.socketOnData [as ondata] (http.js:1288:20)\n\u0009npm ERR!     at CleartextStream._push (tls.js:375:27)\n\u0009npm ERR!     at SecurePair.cycle (tls.js:734:20)\n\u0009npm ERR!     at EncryptedStream.write (tls.js:130:13)\n\u0009npm ERR!     at Socket.ondata (stream.js:38:26)\n\u0009npm ERR! You may report this log at:\n\u0009npm ERR!     \u003chttp://github.com/isaacs/npm/issues\u003e\n\u0009npm ERR! or email it to:\n\u0009npm ERR!     \u003cnpm-@googlegroups.com\u003e\n\u0009npm ERR! \n\u0009npm ERR! System Linux 2.6.18-308.11.1.el5\n\u0009npm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\"\n\u0009npm ERR! cwd /home/cmp/src/send/server\n\u0009npm ERR! node -v v0.6.19\n\u0009npm ERR! npm -v 1.1.24\n\u0009npm ERR! message SSL Error: CERT_UNTRUSTED\n\u0009npm ERR! \n\u0009npm ERR! Additional logging details can be found in:\n\u0009npm ERR!     /home/cmp/src/send/server/npm-debug.log\n\u0009npm not ok\n\u0009npm not ok\n\n\u003c!-- more --\u003e\n\nhttpsのレジストリに対して、SSL鍵のバリデーションを行っていることが原因らしいので、一旦この設定を false にすると npm install が成功するようになる。npm install 後には true に戻しておく。\n\n\u0009$ npm config set strict-ssl false\n\u0009$ npm install\n\u0009$ npm config set strict-ssl true\n\nまた、下記のように CA を null で設定しても回避できるようになるらしいです。\n\n\u0009$ npm config set ca “”\n\n"}
{"_id":{"$oid":"563d9b67bf652a600632d01f"},"title":"Ubuntu 13.10 の npm install で node-gyp rebuild が失敗する。","create":{"$date":"2014-01-27T13:03:00.000Z"},"modify":{"$date":"2014-01-27T13:03:00.000Z"},"categories":["npm","Node.js","Ubuntu"],"image":null,"body":"\nUbuntu 13.10 で pm2 をインストールしようとした時、「gyp ERR! build error」というエラーが発生した。\n\n\u0009$ npm install -g pm2\n\u0009npm http GET https://registry.npmjs.org/pm2\n\u0009npm http 200 https://registry.npmjs.org/pm2\n\u0009npm http GET https://registry.npmjs.org/pm2/-/pm2-0.7.1.tgz\n\u0009npm http 200 https://registry.npmjs.org/pm2/-/pm2-0.7.1.tgz\n\u0009npm http GET https://registry.npmjs.org/pm2-interface/0.1.0\n\u0009npm http GET https://registry.npmjs.org/pm2-multimeter/0.1.2\n\u0009npm http GET https://registry.npmjs.org/usage/0.3.9\n\u0009npm http GET https://registry.npmjs.org/axon-rpc/0.0.2\n\u0009npm http GET https://registry.npmjs.org/watch/0.8.0\n\u0009npm http GET https://registry.npmjs.org/axon/1.0.0\n\u0009npm http GET https://registry.npmjs.org/cron/1.0.1\n\u0009npm http GET https://registry.npmjs.org/colors/0.6.2\n\u0009npm http GET https://registry.npmjs.org/coffee-script\n\u0009npm http GET https://registry.npmjs.org/eventemitter2/0.4.13\n\u0009npm http GET https://registry.npmjs.org/commander/2.1.0\n\u0009npm http GET https://registry.npmjs.org/cli-table/0.2.0\n\u0009npm http GET https://registry.npmjs.org/debug\n\u0009npm http GET https://registry.npmjs.org/async/0.2.9\n\u0009npm http 200 https://registry.npmjs.org/pm2-multimeter/0.1.2\n\u0009npm http 200 https://registry.npmjs.org/usage/0.3.9\n\u0009npm http GET https://registry.npmjs.org/pm2-multimeter/-/pm2-multimeter-0.1.2.tgz\n\u0009npm http GET https://registry.npmjs.org/usage/-/usage-0.3.9.tgz\n\u0009npm http 200 https://registry.npmjs.org/axon/1.0.0\n\u0009npm http GET https://registry.npmjs.org/axon/-/axon-1.0.0.tgz\n\u0009npm http 200 https://registry.npmjs.org/pm2-interface/0.1.0\n\u0009npm http GET https://registry.npmjs.org/pm2-interface/-/pm2-interface-0.1.0.tgz\n\u0009npm http 200 https://registry.npmjs.org/colors/0.6.2\n\u0009npm http 200 https://registry.npmjs.org/usage/-/usage-0.3.9.tgz\n\u0009npm http GET https://registry.npmjs.org/colors/-/colors-0.6.2.tgz\n\u0009npm http 200 https://registry.npmjs.org/eventemitter2/0.4.13\n\u0009npm http GET https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.13.tgz\n\u0009npm http 200 https://registry.npmjs.org/coffee-script\n\u0009npm http GET https://registry.npmjs.org/coffee-script/-/coffee-script-1.6.3.tgz\n\u0009npm http 200 https://registry.npmjs.org/cron/1.0.1\n\u0009npm http 200 https://registry.npmjs.org/pm2-multimeter/-/pm2-multimeter-0.1.2.tgz\n\u0009npm http GET https://registry.npmjs.org/cron/-/cron-1.0.1.tgz\n\u0009npm http 200 https://registry.npmjs.org/commander/2.1.0\n\u0009npm http GET https://registry.npmjs.org/commander/-/commander-2.1.0.tgz\n\u0009npm http 200 https://registry.npmjs.org/cli-table/0.2.0\n\u0009npm http GET https://registry.npmjs.org/cli-table/-/cli-table-0.2.0.tgz\n\u0009npm http 200 https://registry.npmjs.org/pm2-interface/-/pm2-interface-0.1.0.tgz\n\u0009npm http 200 https://registry.npmjs.org/debug\n\u0009npm http 200 https://registry.npmjs.org/colors/-/colors-0.6.2.tgz\n\u0009npm http 200 https://registry.npmjs.org/async/0.2.9\n\u0009npm http GET https://registry.npmjs.org/async/-/async-0.2.9.tgz\n\u0009npm http 200 https://registry.npmjs.org/coffee-script/-/coffee-script-1.6.3.tgz\n\u0009npm http 200 https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.13.tgz\n\u0009npm http 200 https://registry.npmjs.org/commander/-/commander-2.1.0.tgz\n\u0009npm http 200 https://registry.npmjs.org/cli-table/-/cli-table-0.2.0.tgz\n\u0009npm http 200 https://registry.npmjs.org/cron/-/cron-1.0.1.tgz\n\u0009npm http 200 https://registry.npmjs.org/async/-/async-0.2.9.tgz\n\u0009npm http 200 https://registry.npmjs.org/axon-rpc/0.0.2\n\u0009npm http GET https://registry.npmjs.org/axon-rpc/-/axon-rpc-0.0.2.tgz\n\u0009npm http 200 https://registry.npmjs.org/watch/0.8.0\n\u0009npm http GET https://registry.npmjs.org/watch/-/watch-0.8.0.tgz\n\u0009npm http 200 https://registry.npmjs.org/axon-rpc/-/axon-rpc-0.0.2.tgz\n\u0009npm http 200 https://registry.npmjs.org/watch/-/watch-0.8.0.tgz\n\u0009npm http 200 https://registry.npmjs.org/axon/-/axon-1.0.0.tgz\n\u0009npm http GET https://registry.npmjs.org/commander/1.0.5\n\u0009npm http GET https://registry.npmjs.org/charm\n\u0009npm http GET https://registry.npmjs.org/colors/0.3.0\n\u0009npm http GET https://registry.npmjs.org/bindings\n\u0009npm http GET https://registry.npmjs.org/configurable/0.0.1\n\u0009npm http GET https://registry.npmjs.org/escape-regexp/0.0.1\n\u0009npm http 200 https://registry.npmjs.org/commander/1.0.5\n\u0009npm http GET https://registry.npmjs.org/commander/-/commander-1.0.5.tgz\n\u0009npm http 200 https://registry.npmjs.org/colors/0.3.0\n\u0009npm http GET https://registry.npmjs.org/colors/-/colors-0.3.0.tgz\n\u0009npm http 200 https://registry.npmjs.org/charm\n\u0009npm http GET https://registry.npmjs.org/charm/-/charm-0.1.2.tgz\n\u0009npm http 200 https://registry.npmjs.org/bindings\n\u0009npm http GET https://registry.npmjs.org/bindings/-/bindings-1.1.1.tgz\n\u0009npm http 200 https://registry.npmjs.org/commander/-/commander-1.0.5.tgz\n\u0009npm http 200 https://registry.npmjs.org/colors/-/colors-0.3.0.tgz\n\u0009npm http 200 https://registry.npmjs.org/charm/-/charm-0.1.2.tgz\n\u0009npm http GET https://registry.npmjs.org/keypress\n\u0009npm http 200 https://registry.npmjs.org/bindings/-/bindings-1.1.1.tgz\n\n\u0009\u003e usage@0.3.9 install /home/azureuser/.nvm/v0.10.24/lib/node_modules/pm2/node_modules/usage\n\u0009\u003e node-gyp rebuild\n\n\u0009gyp ERR! build error \n\u0009gyp ERR! stack Error: not found: make\n\u0009gyp ERR! stack     at F (/home/azureuser/.nvm/v0.10.24/lib/node_modules/npm/node_modules/which/which.js:43:28)\n\u0009gyp ERR! stack     at E (/home/azureuser/.nvm/v0.10.24/lib/node_modules/npm/node_modules/which/which.js:46:29)\n\u0009gyp ERR! stack     at /home/azureuser/.nvm/v0.10.24/lib/node_modules/npm/node_modules/which/which.js:57:16\n\u0009gyp ERR! stack     at Object.oncomplete (fs.js:107:15)\n\u0009gyp ERR! System Linux 3.11.0-14-generic\n\u0009gyp ERR! command \"node\" \"/home/azureuser/.nvm/v0.10.24/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\n\u0009gyp ERR! cwd /home/azureuser/.nvm/v0.10.24/lib/node_modules/pm2/node_modules/usage\n\u0009gyp ERR! node -v v0.10.24\n\u0009gyp ERR! node-gyp -v v0.12.1\n\u0009gyp ERR! not ok \n\u0009npm http 200 https://registry.npmjs.org/configurable/0.0.1\n\u0009npm http GET https://registry.npmjs.org/configurable/-/configurable-0.0.1.tgz\n\u0009npm http 200 https://registry.npmjs.org/escape-regexp/0.0.1\n\u0009npm http GET https://registry.npmjs.org/escape-regexp/-/escape-regexp-0.0.1.tgz\n\u0009npm http 200 https://registry.npmjs.org/keypress\n\u0009npm http 200 https://registry.npmjs.org/configurable/-/configurable-0.0.1.tgz\n\u0009npm http 200 https://registry.npmjs.org/escape-regexp/-/escape-regexp-0.0.1.tgz\n\u0009npm ERR! usage@0.3.9 install: `node-gyp rebuild`\n\u0009npm ERR! Exit status 1\n\u0009npm ERR! \n\u0009npm ERR! Failed at the usage@0.3.9 install script.\n\u0009npm ERR! This is most likely a problem with the usage package,\n\u0009npm ERR! not with npm itself.\n\u0009npm ERR! Tell the author that this fails on your system:\n\u0009npm ERR!     node-gyp rebuild\n\u0009npm ERR! You can get their info via:\n\u0009npm ERR!     npm owner ls usage\n\u0009npm ERR! There is likely additional logging output above.\n\n\u0009npm ERR! System Linux 3.11.0-14-generic\n\u0009npm ERR! command \"/home/azureuser/.nvm/v0.10.24/bin/node\" \"/home/azureuser/.nvm/v0.10.24/bin/npm\" \"install\" \"-g\" \"pm2\"\n\u0009npm ERR! cwd /home/azureuser/fy11\n\u0009npm ERR! node -v v0.10.24\n\u0009npm ERR! npm -v 1.3.21\n\u0009npm ERR! code ELIFECYCLE\n\u0009npm ERR! \n\u0009npm ERR! Additional logging details can be found in:\n\u0009npm ERR!     /home/azureuser/fy11/npm-debug.log\n\u0009npm ERR! not ok code 0\n \n\u003c!-- more --\u003e\n\u0009\nbuild-essential が入っていないと、 node-gyp が動かず、npm install が失敗するようだ。\n\n\u0009$ sudo apt-get install build-essential\n\u0009$ npm install -g pm2\n\n参考：http://stackoverflow.com/questions/14772508/npm-failed-to-install-time-with-make-not-found-error\n"}
{"_id":{"$oid":"563d9b67bf652a600632d020"},"title":"CentOS 6.5 に ALMinium を入れてみる。","create":{"$date":"2014-02-02T07:17:00.000Z"},"modify":{"$date":"2014-02-02T07:17:00.000Z"},"categories":["CentOS","ALMinium","Redmine"],"image":null,"body":"\nプロジェクト管理するために Redmine を使ってみようと思い、 Git と連携できる [ALMinium](https://github.com/alminium/alminium) を Vagrant の CentOS 6.5 に試しに入れてみました。\n\n## Vagrant で CentOS を起動\n\n```\n$ mkdir vagrant\n$ cd vagrant\n$ vagrant box add centos6.5 https://github.com/2creatives/vagrant-centos/releases/download/v6.5.1/centos65-x86_64-20131205.box\n$ vagrant init centos6.5\n\nVagrantfile 中の以下のコメントアウトを外しておく\n# config.vm.network :private_network, ip: \"192.168.33.10\"\n\n$ vagrant up\n$ vagrant ssh\n$ cat /etc/redhat-release\nCentOS release 6.5 (Final)\n```\n\n\u003c!-- more --\u003e\n\n## CentOS に ALMinium をインストール\n\n```\n$ git clone https://github.com/alminium/alminium.git\n$ cd alminium/\n$ sudo bash ./smelt\n\n以下、対話式に設定を行う\n\nRHEL 6.x / CentOS 6.x / OEL 6.xが検出されました。\n*******************************************************\nホスト名の設定\n*******************************************************\nホスト名(IPアドレスもしくはDNS名)を入力してください。ホスト名はApacheのバーチャルホストで利用されます。\n例えば、192.168.1.4をホスト名で入力すると、http://192.168.1.4/でアクセスすることになります。\n(上記の設定ではhttp://localhost/では接続できないのでご注意ください)\nホスト名: 127.0.0.1\n\n\n*******************************************************\nSSLのサポート\n*******************************************************\nSSLのサポートを有効にすると、httpsのみの接続を許可します。\nhttpでのアクセスは、全てhttpsのポートへ転送されるようになります。\nSSLの証明書は認証機関により署名されたものではありません。通信の暗号化のみ\nに利用します。\ngitの利用では、\n\n$ git config --global http.sslVerify false\n\nなどのコマンドで、SSLの証明書を無効にする必要があります。\n\nSSL(https)サポートを有効にしますか?(y/N) n\n\n\n*******************************************************\nメール設定\n*******************************************************\nRedmineのシステムメールを送信するための設定を行います。\n\n＜利用する上での注意＞\n・利用したいメールシステムと通信可能なことをご確認ください。ファイアーウォールなどで遮断されている場合は管理者にお問い合わせください。\n・Sendmailコマンドを利用する場合、別途Sendmailの設定を行う必要があります。\n・G-Mail/Hotmailを利用する場合、ユーザー名とパスワードがあれば利用可能です。\n\n次の中から、使いたいメールシステムを選択してください。\nここでメール設定を行わない場合は「N」を選択してください。\n\n0. 独自のメールサーバーを設定する\n1. Linux内のSendmailコマンドを使用する\n2. G-Mail/Google Apps\n3. Windows Live Hotmail\n\nN. メール設定をしない\n\n番号選択: n\n\n\nメール設定を行いません。\n\n\n継続的インテグレーションツールのJenkinsのインストール・設定を行うことができます。デフォルトはインストールしません。よく分からなければNを選択してください。Jenkinsをインストールしますか?[y/N]n\n*** run pre-install script ***\n*******************************************************\nセキュリティの設定\n*******************************************************\nアプリケーションを動作させるために、ファイアフォールの設定とSELinuxの無効化を行います。\nnと答えると手動でセキュリティの設定が必要となります。分らない場合はYと答えてください。\n\nアプリケーションを動作させるためにセキュリティの設定を行いますか?[Y/n]y\n```\n\nhttpd が起動出来ていれば、 192.168.33.10 にアクセスすると、 ALMinium の画面が表示されるはず。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d021"},"title":"Ubuntu 12.04 に GitBucket 1.10 を入れる。","create":{"$date":"2014-02-03T15:36:00.000Z"},"modify":{"$date":"2014-02-03T15:36:00.000Z"},"categories":["Ubuntu","Git","GitBucket"],"image":null,"body":"\nクローズドな GitHub 環境として、GitHub クローンである [GitBucket](https://github.com/takezoe/gitbucket) を導入してみた。\n\n最初は、GitLab にしようと思っていたのだけど、インストールでハマってしまい心が折れてしまったのと、Scala 製 の GitBucket に惹かれてしまったので、 GitBucket にしました。\n\n\u003c!-- more --\u003e\n\n\n## 環境\n\n+ Ubuntu 12.04 LTS 64bit\n\n\n## OpenJDK のインストール\n\n```\n$ sudo apt-get install openjdk-7-jre\n```\n\n## Tomcat をダウンロードして解凍\n\n```\n$ wget http://ftp.kddilabs.jp/infosystems/apache/tomcat/tomcat-7/v7.0.50/bin/apache-tomcat-7.0.50.tar.gz\n$ tar xfvz apache-tomcat-7.0.50.tar.gz\n```\n\n## GitBucket をダウンロードして設置\n\n```\n$ wget https://github.com/takezoe/gitbucket/releases/download/1.10/gitbucket.war -O gitbucket.war\n$ cp gitbucket.war apache-tomcat-7.0.50/webapps/\n```\n\n## Tomcat を起動\n\n```\n$ cd apache-tomcat-7.0.50\n$ ./bin/startup.sh\n```\n\nたったこれだけで :8080/gitbucket/ に GitBucket が起動する。\n\n簡単に導入出来るって素晴らしいですね！\n\n[![GitBucket スクリーンショット][img01]][img01]\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/02/04/0001.jpg\n\n参考：http://qiita.com/tanacasino/items/4d683debd9bcb2f6e06e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d022"},"title":"CentOS に Git 1.8 をインストールする。","create":{"$date":"2014-02-04T15:56:00.000Z"},"modify":{"$date":"2014-02-04T15:56:00.000Z"},"categories":["CentOS","Git"],"image":null,"body":"\n`yum install git-core` で入る Git が1.7と古かったので、最新の Git 1.8.5.3 を入れるためのメモ。\n\nUbuntu のように yum から入れることが出来なかったので、ソースから入れます。\n\n## 依存パッケージをインストール\n\n```\n$ sudo yum install -y zlib-devel perl-devel gettext gcc curl-devel\n```\n\n## git をダウンロード\nhttps://code.google.com/p/git-core/downloads/list から最新版へのリンクを探しておく\n\n```\n$ wget https://git-core.googlecode.com/files/git-1.8.5.3.tar.gz\n$ tar xfvz git-1.8.5.3.tar.gz\n```\n\n## git をインストール\n\n```\n$ cd git-1.8.5.3\n$ ./configure\n$ make\n$ sudo make install\n$ git --version\ngit version 1.8.5.3\n```\n\n以上。一手間かかるけど、問題なく終了。簡単。\n\n参考：http://clavier.hatenablog.com/entry/2013/05/18/204050\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d023"},"title":"Ubuntu に Git 1.8 をインストールする。","create":{"$date":"2014-02-04T15:52:00.000Z"},"modify":{"$date":"2014-02-04T15:52:00.000Z"},"categories":["Ubuntu","Git"],"image":null,"body":"\n`apt-get install git-core` で入る Git が1.7と古かったので、最新の Git 1.8.5.3 を入れるためのメモ。\n\n\u0009$ sudo apt-add-repository ppa:git-core/ppa\n\u0009$ sudo apt-get update\n\u0009$ sudo apt-get install git-core -y\n\n\u0009$ git --version\n\u0009git version 1.8.5.3\n\nppa のリポジトリを登録して、install するだけ。簡単。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d024"},"title":"ALMinium と GitBucket を連携する。","create":{"$date":"2014-02-05T23:53:00.000Z"},"modify":{"$date":"2014-02-05T23:53:00.000Z"},"categories":["ALMinium","Redmine","GitBucket","Git"],"image":null,"body":"\n今までは Git リポジトリだけ用意して開発をしていたのだけど、もっと効率的に管理したいと思うようになってきたので、ALMinium と GitBucket を導入することにしました。ついでにそれぞれを WebHook で連携もしてみました。\n\n\n## プラグインをインストール\n\nALMinium を WebHook に対応させるためにプラグインをインストールします。Redmine と GitHub を連携させるプラグインですが、ALMinium と GitBucket の構成でも使えました。\n\n```\n$ sudo gem install json\n$ cd /opt/alminium/plugins/\n$ sudo git clone https://github.com/koppen/redmine_github_hook.git\n```\n\n\u003c!-- more --\u003e\n\n## ALMinium 再起動\n\nプラグインがインストール出来たら、ALMinium を再起動しておきます。\n\n```\n$ sudo touch /opt/alminium/tmp/restart.txt\n```\n\n## GitBucket でリポジトリを作成\n\nソースを管理するためのリポジトリを GitBucket に作成します。\n\n[![リポジトリ作成][img01]][img01]\n\n\n## hook を受ける用のミラーリポジトリを作成\n\nWebHookを受けて操作するためのミラーリポジトリを作成します。\n\n```\n$ sudo mkdir /opt/repos\n$ sudo chown -R apache:apache /opt/repos\n$ cd /opt/repos/\n$ sudo -u apache git clone --mirror\n```\n\nhttp://localhost:8080/gitbucket/git/root/hoge.git\n\n\n## ALMinium でプロジェクトを作成\n\nALMinium で新しいプロジェクトを作成し、識別子に任意の文字列を入力しておきます。\n\n[![プロジェクト作成][img02]][img02]\n\n\n## ALMinium にミラーリポジトリを連携\n\nALMinium に作成したプロジェクトにミラーリポジトリを連携します。\n\n[![ミラーリポジトリ連携][img03]][img03]\n\n\n## GitBucket に WebHook URL を設定\n\nGitBucket に WebHook URL を設定します。\n\nこの URL は `http://\u003cdomain\u003e/github_hook?project_id=\u003cプロジェクト識別子\u003e` で、ALMinium のプロジェクトの識別子を設定します。\n\n[![WebHook設定][img04]][img04]\n\n## まとめ\n\nこれで GitBucket への Push の履歴が ALMinium から確認することが出来ます。\n\nコミットメッセージに [#1] のようにチケット番号を記述しておけば、履歴からすぐチケットの詳細に遷移することも可能です。\n\n[![活動][img05]][img05]\n\n\nどっちも管理するためのツールだから混乱してしまいそうだけど、GitBucket でソースを管理しつつ、プロジェクト全体の課題は ALMinium で管理するって感じがいいのかな。チケットとイシューの使い分けが難しいかも。\n\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/02/06/0001.png\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2014/02/06/0002.png\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2014/02/06/0003.png\n[img04]: https://dl.dropboxusercontent.com/u/3189929/images/2014/02/06/0004.png\n[img05]: https://dl.dropboxusercontent.com/u/3189929/images/2014/02/06/0005.png\n"}
{"_id":{"$oid":"563d9b67bf652a600632d025"},"title":"Node.js + express + jade の環境で i18n-node を使って国際化してみた。","create":{"$date":"2014-02-06T16:06:00.000Z"},"modify":{"$date":"2014-02-06T16:06:00.000Z"},"categories":["Node.js","express","jade","i18n"],"image":null,"body":"\nNode.js で express, jade, i18n-node を使って多言語対応したのでメモ。\n\nけど、そもそも i18n って何か。\n\n\n## i18n とは\n\n\u003eソフトウェアである限られた言語でしか使えない状態から多言語が使えるように対応すること。\n\u003e国際化。internationalization。\n\u003einternationalization は，i で始まり n で終わる間に18文字あるから，i18n。\n\u003e _i18nとは - はてなキーワード_ http://d.hatena.ne.jp/keyword/i18n\n\n\u003c!-- more --\u003e\n\n\n## 環境\n\n環境については以下の通り。i18n-node の [GitHub](https://github.com/mashpie/i18n-node) を見ながら進めていきます。\n\n+ Node.js v0.10.24\n+ express v3.4.7\n+ jade v1.0.2\n+ i18n-node\u0009v0.4.1\n\n\n## i18n-node のインストール\n\n```\n$ npm install --save i18n\n```\n\nnpm でインストールするだけ --save オプションを付けておくと、package.json に追記してくれるから楽。\n\n\n## app.js\n\n``` js\nvar express = require('express');\nvar routes = require('./routes');\nvar user = require('./routes/user');\nvar http = require('http');\nvar path = require('path');\n\n// i18n-node を読込\nvar i18n = require('i18n');\n\nvar app = express();\n\n// all environments\napp.set('port', process.env.PORT || 3000);\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\napp.use(express.favicon());\napp.use(express.logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded());\napp.use(express.methodOverride());\n\n// i18n を利用する設定\ni18n.configure({\n\u0009// 対応する言語を設定\n\u0009locales: ['ja', 'en'],\n\u0009directory: __dirname + '/locales'\n});\n// i18n の設定を有効化\napp.use(i18n.init);\n\napp.use(app.router);\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.get('/', routes.index);\n\nhttp.createServer(app).listen(app.get('port'), function(){\n\u0009console.log('Express server listening on port ' + app.get('port'));\n});\n```\n\ni18n を require して、i18n を利用する設定を有効化するだけ。locales の配列には対応させる言語のコードを指定しておきます。directory には言語別の設定ファイルが格納されているディレクトリを指定します。\n\n\n## /locales/ja.js\n\n``` js\n{\n\u0009\"Welcome to\": \"ようこそ\"\n}\n```\n\n\n## /locales/en.js\n\n``` js\n{\n\u0009\"Welcome to\": \"Welcome to\"\n}\n```\n\n言語の設定は、key:value の形で設定しておきます。keyは全ての言語で共通で、valueの値をそれぞれの言語で表示したい文言にしておきます。\n\n\n## index.jade\n\n``` jade\nextends layout\n\nblock content\n\u0009h1=title\n\u0009p #{__('Welcome to')} #{title}\n```\n\njadeでは、/locales/NAME.js で設定した key を `__('key')` の形で指定すると、ブラウザの言語設定によって表示が切り替わるようになりました。\n\n[![i18n対応結果][img01]][img01]\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/02/07/0001.png\n"}
{"_id":{"$oid":"563d9b67bf652a600632d026"},"title":"CentOS 6.5 に GitBucket 1.10 を入れる。","create":{"$date":"2014-02-17T12:06:00.000Z"},"modify":{"$date":"2014-02-17T12:06:00.000Z"},"categories":["CentOS","GitBucket","Git"],"image":null,"body":"\nCentOS 6.5 に GitHub クローンである GitBucket を入れてみます。\n\nほぼ [Ubuntuの時](/2014/02/04/gitbucket/)と一緒ですが、 jdk のインストールだけ違います。\n\n\u003c!-- more --\u003e\n\n\n## 環境\n\n+ CentOS 6.5\n\n\n## OpenJDK のインストール\n\n```\n$ sudo yum install java-1.7.0-openjdk-devel\n```\n\n## Tomcat をダウンロードして解凍\n\n```\n$ wget http://ftp.kddilabs.jp/infosystems/apache/tomcat/tomcat-7/v7.0.50/bin/apache-tomcat-7.0.50.tar.gz\n$ tar xfvz apache-tomcat-7.0.50.tar.gz\n```\n\n## GitBucket をダウンロードして設置\n\n```\n$ wget https://github.com/takezoe/gitbucket/releases/download/1.10/gitbucket.war -O gitbucket.war\n$ cp gitbucket.war apache-tomcat-7.0.50/webapps/\n```\n\n## Tomcat を起動\n\n```\n$ cd apache-tomcat-7.0.50\n$ ./bin/startup.sh\n```\n\n以上で `localhost:8080/gitbucket` に GitBucket が起動しているはずです。\n\nGitLab は導入がややこしいから、やっぱり簡単に導入出来るって素晴らしい！\n"}
{"_id":{"$oid":"563d9b67bf652a600632d027"},"title":"gulp で CoffeeScript と Stylus をコンパイルする。","create":{"$date":"2014-02-28T00:17:00.000Z"},"modify":{"$date":"2014-02-28T00:17:00.000Z"},"categories":["Node.js","gulp","CoffeeScript","Stylus"],"image":null,"body":"\nCoffeeScript と Stylus で作ったWebアプリケーションを gulp でビルドしてみました。\n\n## 環境\n\n+ Mac OS X 10.9.2\n+ Node.js 0.10.26\n+ express 3.4.8\n\n## 準備\n\n前提として、node と express が入っていること。それに加えて、CoffeeScript と gulp をインストールしておきます。\n\n```\n$ npm install -g coffee-script\n$ npm install -g gulp\n```\n\n\u003c!-- more --\u003e\n\nビルド用のモジュールは `--save-dev` オプションをつけると、package.json の devDependencies の項目に設定され、開発環境でのみインストールするようになります。\n\n```\n$ npm install --save-dev gulp\n$ npm install --save-dev gulp-coffee\n$ npm install --save-dev gulp-stylus\n```\n\n運用環境では `--production` オプションをつけて、devDependencies のものをはインストールしないようにします。開発環境の時は特にオプションは必要ありません。\n\n```\n$ npm install --production\n```\n\n\n## gulpfile.js\n\ngulpfile.js にビルドのタスクを記述していきます。以下のタスクでは CoffeeScript のファイルを JavaScript にコンパイルして書き出しています。\n\n``` js\nvar gulp = require('gulp');\nvar coffee = require('gulp-coffee');\nvar stylus = require('gulp-stylus);\n\ngulp.task('coffee', function(){\n\u0009gulp.src('./src/coffee/*.coffee')\n\u0009\u0009.pipe(coffee())\n\u0009\u0009.pipe(gulp.dest('./public/javascripts'))\n});\n\ngulp.task('stylus', function(){\n\u0009gulp.src('./src/stylus/*.styl')\n\u0009\u0009.pipe(stylus())\n\u0009\u0009.pipe(gulp.dest('./public/stylesheets'))\n});\n\ngulp.task('default', function(){\n\u0009gulp.run('coffee', 'stylus');\n});\n```\n\n## ビルドの実行\n\n引数に何も指定しない場合は、default のタスクが実行されます。\n\n```\n$ gulp\n```\n\n引数にタスク名を指定することで、そのタスクのみ実行することも可能です。\n\n```\n$ gulp coffee\n```\n\n\n## gulpfile.coffee\n\n実は、gulpfile.js 自体も CoffeeScript で記述することが出来ます！\n\nまずは CoffeeScript をインストール。\n\n```\n$ npm install --save-dev coffee-script\n```\n\ngulpfile.coffee を作成します。先ほどの gulpfile.js を CoffeeScript で以下に記述してみました。()が省略出来る分、ビルドファイルの文量も少なくなりそうですね。\n\n``` coffee\ngulp = require('gulp')\ncoffee = require('gulp-coffee')\nstylus = require('gulp-stylus)\n\ngulp.task 'coffee', -\u003e\n\u0009gulp.src './src/coffee/*.coffee'\n\u0009\u0009.pipe coffee()\n\u0009\u0009.pipe gulp.dest './public/javascripts'\n\ngulp.task 'stylus', -\u003e\n\u0009gulp.src './src/stylus/*.styl'\n\u0009\u0009.pipe stylus()\n\u0009\u0009.pipe gulp.dest './public/stylesheets'\n\ngulp.task 'default', -\u003e\n\u0009gulp.run 'coffee', 'stylus'\n```\n\n## ビルドの実行\n\n`--require` オプションで `coffee-script/register` を指定することで、gulpfile.coffee のビルドが開始されます。\n\n```\ngulp --require coffee-script/register\n```\n\n\n## まとめ\n\n実際にビルドが出来るexampleも作ってみました。[GitHub](https://github.com/YuG1224/gulp-example)\n\nこのexampleでは、src配下においた CoffeeScript と Stylus の各ファイルを、 検証環境用は ./public, 本番環境用は ./build にビルドするようにしています。また、app.js, routes/index.js もCoffeeScriptで書いてそれぞれビルドしています。\n\ngrunt は JSON のようなフォーマットでタスクを記述しますが、gulp の場合は js そのまま。.pipe のチェーンメソッドで処理をつなげていく形でわかりやすいので個人的には gulp の方が好きですね。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d028"},"title":"gulp で Node.js を動かす。","create":{"$date":"2014-03-06T14:43:00.000Z"},"modify":{"$date":"2014-03-06T14:43:00.000Z"},"categories":["gulp","Node.js"],"image":null,"body":"\n```bash\n$ gulp \u0026 node-dev app.js\n```\n\ngulp で watch しつつ、node も動かすために、上記のようなコマンドを叩いていました。\n\n\u0026 でコマンドを繋げるのがスマートじゃないですし、gulp-nodemon を使って、gulp の task から node を実行する方法を試してみました。\n\nまずは、[gulp-nodemon](https://github.com/JacksonGariety/gulp-nodemon) をインストールしておきます。\n\n```bash\n$ npm install --save-dev gulp-nodemon\n```\n\n[nodemon](http://nodemon.io/) は node-dev や forever などと同じで、ファイルの変更等を検知して自動的に再起動してくれるツールです。\n\ngulp-nodemon を使うことで、この nodemon を gulp から呼び出すことが出来ます。\n\n\u003c!-- more --\u003e\n\ngulpfile.js では以下の様に設定します。\n\n\n```js\nvar nodemon = require('gulp-nodemon');\n\ngulp.task('nodemon', function() {\n\u0009nodemon({\n\u0009\u0009script: 'app.js',\n\u0009\u0009env: {\n\u0009\u0009\u0009TZ: 'UTC',\n\u0009\u0009\u0009NODE_ENV: 'development'\n\u0009\u0009}\n\u0009}).on('restart', ['coffee', 'stylus']);\n\ngulp.task('default', function() {\n\u0009gulp.run('clean', 'coffee', 'stylus', 'copy', 'watch');\n});\n```\n\nscript で 実行したいファイルを選んで、env で実行する時の環境変数などを指定することが可能です。\n\nあとは gulp を実行するだけで、default の task が実行されて、watch しながら node を起動することが出来ました。\n\n```bash\n$ gulp\n```\n\n"}
{"_id":{"$oid":"563d9b67bf652a600632d029"},"title":"koa を試してみる。","create":{"$date":"2014-03-14T17:08:00.000Z"},"modify":{"$date":"2014-03-14T17:08:00.000Z"},"categories":["Node.js","koa"],"image":null,"body":"\nNode.js の新しいWebフレームワーク koa を試してみました。\n\n\n## Node.js インストール\n\nkoa を使うには v0.11.9 以上の Node.js が必要なので、まずは node のインストールから始めます。\n\n```\n$ nvm install 0.11\nNow using node v0.11.12\n$ node -v\nv0.11.12\n```\n\n\u003c!-- more --\u003e\n\n\n## koa インストール\n\nnode のインストールが出来たら、\u0009作業用のディレクトリを作成し、koa をインストールします。\n\nkoa でルーティングをするための koa-route もついでにインストールしてみました。\n\n```\n$ mkdir koa-example\n$ cd koa-example\n$ npm install koa\n$ npm install koa-route\n```\n\n\n## app.js\n\n新たに使えるようになる generetor と yield を使って、app.js を書いてみました。\n\nyield next によって、処理が一旦中断され、次の function *() に処理を移すことが出来ます。\n\n```js\nvar koa = require('koa');\nvar route = require('koa-route');\nvar app = koa();\n\n// ルーティング\napp.use(route.get('/', function *(next){\n\u0009yield next;\n\u0009this.body += 'Hello, World!';\n}));\n\n// アクセスした時間\napp.use(function *(next){\n\u0009this.body = new Date() + '\\n';\n\u0009yield next;\n});\n\n// アクセスしたUserAgent\napp.use(function *(next){\n\u0009this.body += this.request.header['user-agent'] + '\\n';\n});\n\napp.listen(3000);\nconsole.log('server listen on port 3000');\n```\n\n\n## Hello, World!\n\n実際に起動する場合は harmony オプションを付けて起動します。\n\n```\n$ node --harmony app.js\nserver listen on port 3000\n```\n\nlocalhost:3000 にアクセスしてみると、アクセス日時とUserAgentとHello,World!が表示されました。\n\n```\nSat Mar 15 2014 02:06:49 GMT+0900 (JST)\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.149 Safari/537.36\nHello, World!\n```\n"}
{"_id":{"$oid":"563d9b67bf652a600632d02a"},"title":"入社4年目は何を試すべきか。","create":{"$date":"2014-04-03T12:48:00.000Z"},"modify":{"$date":"2014-04-03T12:48:00.000Z"},"categories":["Diary"],"image":null,"body":"\n[入社2日目の明日から試して欲しいこと](http://blog.livedoor.jp/daisuke_iwase/archives/7174438.html)\n\n[ライフネット生命の岩瀬大輔COO「新入社員は30分前に出社して新聞を読め」に疑問の声](http://netgeek.biz/archives/8442)\n\n[ライフネット岩瀬大輔さん、余計なことを書いて華麗にエイプリルフール炎上を飾る](http://kirik.tea-nifty.com/diary/2014/04/post-c0c0.html)\n\n　\n\nライフネット生命の岩瀬社長のブログが炎上していたけれど、特別ひどいことを言っているわけでもなかった。\n\n確かに早出残業を強制しているような言い方は気になるかもしれないが、みんなより30分早起きして情報収集や勉強すれば、それだけ成長出来るってのは当たり前だと思う。\n\n自分は今年度から社会人歴も丸3年が経過して4年目に入ったわけだが、3年間で自分はどれだけ成長出来たのだろうか。\n\n\u003c!-- more --\u003e\n\n\n## 1年目上期\n\n入社後2週間は新人共通研修。電話の取り方とかを習ったけれど、固定電話ないから全く使ってない。\n\nその後の技術研修もCiscoルータの設定とかだったけれど、全く使ってない。全く覚えてない。あとで聞いた話だと、研修を担当した部署の独断で研修内容を決めたとか決めてないとか...\n\n部署に配属されてからは、ExtJS使って画面作ったり、スマホ用ECサイトを作ったりしてた。\n\n\n## 1年目下期〜3年目\n\nECサイトが一段落してからは、位置情報を使ってクーポンを配信するシステムをNode.jsとMongoDBで作ってた。\n\n企画、設計、開発、運用、炎上、デスマまで、最初から一通り経験したことですごく成長出来たと思う。もう2度と経験したくないけれど。\n\n\n## まとめ\n\n自分たちで技術の調査や研究をする部署に配属されて、好き勝手に開発をやらせてもらえる環境は恵まれていると思うけど、いつまでも甘えてはいられないなとは常々思う。\n\nとりあえず、30分早く出社して日経読みますか。vingowやGunosyでも良いかな？ｗ\n"}
{"_id":{"$oid":"563d9b67bf652a600632d02b"},"title":"Homebrewでzshをinstallして、oh-my-zshを適用する。","create":{"$date":"2014-04-23T15:38:00.000Z"},"modify":{"$date":"2014-04-23T15:38:00.000Z"},"categories":["Homebrew","zsh"],"image":null,"body":"\nシェルに対して特別なこだわりは無くて、今までずっとデフォルトのbashを使っていたのですが、zshとoh-my-zshの組み合わせが思っていた以上に良かったので乗り換えました。\n\n\n## Homebrewでzshをinstall\n\n```\n$ brew install zsh\n```\n\n## シェルのパスを追加\n\n`/etc/shells`に`/usr/local/bin/zsh`を追加します。\n\n```\n# List of acceptable shells for chpass(1).\n# Ftpd will not allow users to connect who are not using\n# one of these shells.\n\n/bin/bash\n/bin/csh\n/bin/ksh\n/bin/sh\n/bin/tcsh\n/bin/zsh\n/usr/local/bin/zsh\n```\n\n## デフォルトのシェルを変更\n\n```\n$ chsh -s /usr/local/bin/zsh\n```\n\n## oh-my-zshをinstall\n\n```\n$ curl -L http://install.ohmyz.sh | sh\n```\n\n\u003c!-- more --\u003e\n\nターミナルを立ち上げ直すと、以下のようにzshでログインされるようになっていると思います。\n\n[![zsh][img02]][img02]\n\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2014/04/24/0002.png\n\n利用するthemeにもよりますが、oh-my-zshを入れると、gitのブランチ名等も表示されるようになるので便利でした！\n\n## themeの変更\n\nhttps://github.com/robbyrussell/oh-my-zsh/wiki/Themes から好きなthemeを探して、`.zshrc`の中にある以下の値を変更するだけで出来ます。\n\n```\nZSH_THEME=\"robbyrussell\"\n```\n"}
{"_id":{"$oid":"563d9b67bf652a600632d02c"},"title":"Octopress を Universal Analytics に対応させる。","create":{"$date":"2014-04-23T15:00:00.000Z"},"modify":{"$date":"2014-04-23T15:00:00.000Z"},"categories":["Analytics","Google","Google Analytics"],"image":null,"body":"\nGoogle Analyticsがユニバーサル アナリティクスにアップグレードをしろとうるさいですね。\n\n[![universal analitics][img01]][img01]\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/04/24/0001.png\n\n生成されているトラッキングコードを貼り付ければ良いのですが、せっかくなのでoctopressの設定からidとdomainを挿入出来るようにしました。\n\n\u003c!-- more --\u003e\n\n`/source/_include/google_analytics.html` を以下に変更するだけです。\n\n```html\n{% raw %}\n{% if site.google_analytics_tracking_id %}\n\u003cscript\u003e\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n  ga('create', '{{ site.google_analytics_tracking_id}}', '{{ site.google_analytics_domain }}');\n  ga('send', 'pageview');\n\n\u003c/script\u003e\n{% endif %}\n{% endraw %}\n```\n"}
{"_id":{"$oid":"563d9b67bf652a600632d02d"},"title":"Homebrew-caskでMac Appをインストールする。","create":{"$date":"2014-05-05T13:49:00.000Z"},"modify":{"$date":"2014-05-05T13:49:00.000Z"},"categories":["Homebrew"],"image":null,"body":"\nGoogle Chromeやvirtualboxなど、Mac App Storeからインストール出来ないAppたちをHomebrewでインストールします。\n\n## Homebrew-caskのインストール\n\ncaskのリポジトリを追加します。\n\n```\n$ brew tap caskroom/cask\n$ brew install brew-cask\n```\n\n## Appのインストール\n\n例えば、Google Chromeをインストールする場合は以下コマンドを実行します。\n\n```\n$ brew cask install google-chrome\n```\n\n\u003c!-- more --\u003e\n\n## インストール出来るAppの検索\n\nbrew cask search \u003c任意の文字列\u003e でAppを検索することも出来ます。\n\n```\n$ brew cask search google\n==\u003e Partial matches\ngoogle-auto-backup\u0009   google-hangouts\u0009      google-refine\ngoogle-chrome\u0009\u0009   google-japanese-ime\u0009      google-web-designer\ngoogle-drive\u0009\u0009   google-notifier\u0009      googleappenginelauncher\ngoogle-earth\u0009\u0009   google-quick-search-box\n```\n\n文字列を入力しない場合は全てのAppが表示されます。\n\n## インストール済のApp一覧の表示\n\nbrew cask listで一覧表示することが出来ます。\n\n```\n$ brew cask list\napptrap\u0009\u0009\u0009   google-japanese-ime\u0009      virtualbox\nbitcasa\u0009\u0009\u0009   sourcetree\ngoogle-chrome\u0009\u0009   vagrant\n```\n\n## Brewfileで一括インストール\n\n適当なディレクトリに以下コマンドを記述したBrewfileファイルを作成しておくと、brew bundleコマンドで一気にインストールすることが出来ます。\n\n```\ncask install apptrap\ncask install google-chrome\ncask install google-japanese-ime\ncask install sourcetree\ncask install vagrant\ncask install virtualbox\n```\n\nこのBrewfileには caskのコマンドだけでなく通常のbrewのコマンドも記述出来るので、これをgitなどで管理しておけば、Macの環境構築がかなり捗るのではないでしょうか。\n\n\n## 参考\n\n[caskroom/homebrew-cask](https://github.com/caskroom/homebrew-cask)\n\n[BrewfileとHomebrew-caskでmacのセットアップ](http://qiita.com/macoshita/items/09c730e5a281897365eb)\n\n[みんなhomebrew-caskって知ってるか？](http://qiita.com/ryurock/items/1432578d364985f6cb06)\n\n[homebrew-caskとbrewfileを使ってみた](http://qiita.com/takuan_osho/items/e40569e464f27d3e326f)\n"}
{"_id":{"$oid":"563d9b67bf652a600632d02e"},"title":".gitkeepを使って空ディレクトリをGitに管理させる。","create":{"$date":"2014-05-09T12:18:00.000Z"},"modify":{"$date":"2014-05-09T12:18:00.000Z"},"categories":["Git"],"image":null,"body":"\nlog用のディレクトリやビルド後に生成されるものを格納するディレクトリとか、先にディレクトリを作っておかなければいけないのに、ついつい忘れてしまうことよくありますよね。\n\nそうゆう時に空ディレクトリをGitで管理したいなーと思っていたのですが、実はそんな時のテクニックがあるんです！\n\n方法はすごく簡単。空ディレクトリを作ったあとに`.gitkeep`ファイルを作成するだけ！\n\n\u0009$ mkdir hoge\n\u0009$ touch hoge/.gitkeep\n\n`.`で始まるファイルは隠しファイルとして扱われるので、`ls`で見ると空ディレクトリが管理されているように見えるというわけ。\n\n厳密に言うと空ディレクトリではないしファイル名もドットがつけば何でも良いのですが、`.gitkeep`とするのが慣習のようです。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d02f"},"title":"Nginxユーザ会 #0 に行ってきた。","create":{"$date":"2014-06-18T10:04:00.000Z"},"modify":{"$date":"2014-06-18T10:04:00.000Z"},"categories":["Nginx","Meetup"],"image":null,"body":"\n[Nginxユーザ会 #0](http://nginx-ug.jp)に行ってきた。\n\n\u003cblockquote class=\"twitter-tweet\" lang=\"ja\"\u003e\u003cp\u003eThe 1st NGINX Japan User Group meetup! \u003ca href=\"https://twitter.com/search?q=%23ngxug\u0026amp;src=hash\"\u003e#ngxug\u003c/a\u003e \u003ca href=\"http://t.co/J3cc3J4T8E\"\u003epic.twitter.com/J3cc3J4T8E\u003c/a\u003e\u003c/p\u003e\u0026mdash; nginx web server (@nginxorg) \u003ca href=\"https://twitter.com/nginxorg/statuses/479238517588254720\"\u003e2014, 6月 18\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\nちょうど前日に[記事](http://www.atmarkit.co.jp/ait/articles/1406/17/news013.html)にもなっていて、盛り上がってきてるNginx。\n\n普段からNginx使っているってことでなんとなく参加してみたのだけど、参加者はインフラエンジニアの方が多かったみたい。\n\n自分みたいなフロントエンド寄りの人はあんまりいなかったのかも。\n\n　\n\n今回、Nginx Inc.から、開発者のIgorさんたちが来日していて、生の声が聞けたのですごく良かった。\n\n「NginxはただのWebサーバではなく、アクセラレータ」「NGiИXのИはロシア文字でIgorのロシア語表記での頭文字」「読みにくい名前にしてやろうと思った」とか。\n\nStableよりもMainlineの方が安定しているって話は、目からウロコだったので、すぐアップグレードしようと思う。\n\n\u003c!-- more --\u003e\n\n　\n\n受付で、NginxのステッカーとTシャツをいただいたので、MacBook Airに貼ります！\n\n[![sticker][img01]][img01]\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/06/18/0001.png\n"}
{"_id":{"$oid":"563d9b67bf652a600632d030"},"title":"Homebrew-cask で Emacs をインストール","create":{"$date":"2014-06-19T14:27:00.000Z"},"modify":{"$date":"2014-06-19T14:27:00.000Z"},"categories":["Emacs","Homebrew"],"image":null,"body":"\n[以前](/2013/10/29/emacs/)はEmacs.appをHomebrewでインストールしていたのだけど、Homebrew-caskでインストールしてみたのでメモ。\n\nやることは3つ。\n\n+ Homebrew-caskのリポジトリを追加\n+ Homebrew-caskのインストール\n+ caskコマンドでEmacsのインストール\n\n``` bash\n$ brew tap caskroom/cask\n$ brew install brew-cask\n$ brew cask install emacs\n```\n\nたったこれだけでEmacs.appが/Users/ユーザ名/Applications/以下に配置されました。\n\nちゃんとSpotlightで検索出来たので、Alfredとかのランチャーアプリでも起動出来ると思う。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d031"},"title":"東京Node学園 13時限目に行ってきた。","create":{"$date":"2014-06-23T10:11:00.000Z"},"modify":{"$date":"2014-06-23T10:11:00.000Z"},"categories":["Node.js","Meetup"],"image":null,"body":"\n[東京Node学園 13時限目](http://nodejs.connpass.com/event/6763/)に行ってきた。\n\n参加するのは、[東京Node学園 10時限目](http://nodejs.connpass.com/event/3034/)以来なので10ヶ月ぶり2回目。\n\n今回の発表は下記6つ。\n\n+ [「Socket.IO v1.0の新機能について」](https://speakerdeck.com/yosuke_furukawa/socket-dot-io-v1-dot-0-introduction)\n+ [「Socket.IO v1.0の変更点、内部の話」](https://speakerdeck.com/nkzawa/socket-dot-io-1-dot-0falsebian-geng-dian-nei-bu-de-nahua)\n+ [「social-cms-backendの話」](\u003chttp://dai-shi.github.io/social-cms-backend/tng13_scb_intro.html)\n+ [「Titanium」](http://www.slideshare.net/ToshiroYagi/node-gakuen)\n+ [「gulp.jsチートシート: 使いこなしの7パターン」](https://speakerdeck.com/cognitom/gulp-dot-js-cheatsheet)\n+ [「増え続けるmetafileが生む問題とchest.js」](https://speakerdeck.com/watilde/too-many-metafiles-and-chest-dot-js)\n\n個人的にSocket.IOとgulpの話を目的で参加したのだけど、全部面白かったので参加して良かったと思う。\n\n　\n\n懇親会では、思い切って代表の@yosuke_furukawaさんにPrimusのメリットについて質問してみた。\n\n**「例えばSocket.IOに重大なバグが見つかった時に、そのバグが直されるまで待つのか、他のに変えるのか選ぶことが出来る」**\n\n**「トランスポート層はEngine.IOとかに任せて、その上でアプリケーション層としていろいろ頑張るってのは面白い(メンテ大変だろうけどね)」**\n\nとか聞けたので、ちょっとこのまま使い続けてみようと思う。\n\n\u003c!-- more --\u003e\n\n　\n\nちなみに今回は会場がDeNAだったので、DeNAのロゴ入りミネラルウォーターをいただきました。\n\n\u003cblockquote class=\"twitter-tweet\" lang=\"ja\"\u003e\u003cp\u003eDeNA水、いただきました。 \u003ca href=\"http://t.co/SFC44I6XqG\"\u003epic.twitter.com/SFC44I6XqG\u003c/a\u003e\u003c/p\u003e\u0026mdash; ぷーじ (@YuG1224) \u003ca href=\"https://twitter.com/YuG_1224/statuses/481016696921001986\"\u003e2014, 6月 23\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d032"},"title":"Tesselを動かしてみた。","create":{"$date":"2014-06-24T15:38:00.000Z"},"modify":{"$date":"2014-06-24T15:38:00.000Z"},"categories":["Tessel"],"image":null,"body":"\n去年の夏に[Gigazine](http://gigazine.net/news/20130821-tessel-javascript-hardware/)で記事になっていた、JavaScriptで動くマイコン「[Tessel](https://tessel.io/)」\n\nそれがようやく届いたので[チュートリアル](http://start.tessel.io/install)だけやってみました。\n\n　\n\n\u003cblockquote class=\"twitter-tweet\" lang=\"ja\"\u003e\u003cp\u003e\u003ca href=\"https://twitter.com/hashtag/tessel?src=hash\"\u003e#tessel\u003c/a\u003e 始めるー\u0026#10;本体とサーボモータのセットを買いました。 \u003ca href=\"http://t.co/6xtrlGJuAD\"\u003epic.twitter.com/6xtrlGJuAD\u003c/a\u003e\u003c/p\u003e\u0026mdash; ぷーじ (@YuG1224) \u003ca href=\"https://twitter.com/YuG_1224/statuses/481433102183436289\"\u003e2014, 6月 24\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\n自分が注文したのはTessel + One Class A Moduleのセットで、A ModuleはServoを選択。\n\nおまけでステッカーが2枚入ってたのが嬉しいのだけど、エンジニアはなぜステッカーが好きなんだろう？ｗ\n\n\u003c!-- more --\u003e\n\n　\n\n\u003cblockquote class=\"twitter-tweet\" lang=\"ja\"\u003e\u003cp\u003e\u003ca href=\"https://twitter.com/hashtag/tessel?src=hash\"\u003e#tessel\u003c/a\u003e \u0026#10;USB挿すだけで認識してる。\u0026#10;$ npm install -g tessel\u0026#10;$ tessel update \u003ca href=\"http://t.co/4ewBFpxCWH\"\u003epic.twitter.com/4ewBFpxCWH\u003c/a\u003e\u003c/p\u003e\u0026mdash; ぷーじ (@YuG1224) \u003ca href=\"https://twitter.com/YuG_1224/statuses/481437695206363136\"\u003e2014, 6月 24\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\n[1. Install](http://start.tessel.io/install)\n\n基本的にはUSBを挿すだけで繋がるので簡単。\n\nまず最初は、npmでtesselのmoduleをグローバルインストールしてから、tessel本体のファームウェアをアップデート。\n\n```\nnpm install -g tessel\ntessel update\n```\n\n　\n\n\u003cblockquote class=\"twitter-tweet\" lang=\"ja\"\u003e\u003cp\u003e\u003ca href=\"https://twitter.com/hashtag/tessel?src=hash\"\u003e#tessel\u003c/a\u003e tessel run blinky.js \u003ca href=\"https://t.co/IfniOBnbo1\"\u003ehttps://t.co/IfniOBnbo1\u003c/a\u003e\u003c/p\u003e\u0026mdash; ぷーじ (@YuG1224) \u003ca href=\"https://twitter.com/YuG_1224/statuses/481443125513039873\"\u003e2014, 6月 24\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\n[2. blinky](http://start.tessel.io/blinky)\n\n本体上のLEDを点滅させる。\n\n　\n\n\u003cblockquote class=\"twitter-tweet\" lang=\"ja\"\u003e\u003cp\u003e\u003ca href=\"https://twitter.com/hashtag/tessel?src=hash\"\u003e#tessel\u003c/a\u003e run servo.js \u003ca href=\"https://t.co/HrB2gHmfp5\"\u003ehttps://t.co/HrB2gHmfp5\u003c/a\u003e\u003c/p\u003e\u0026mdash; ぷーじ (@YuG1224) \u003ca href=\"https://twitter.com/YuG_1224/statuses/481446268313825280\"\u003e2014, 6月 24\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\n[3. servo](http://start.tessel.io/modules/servo)\n\nサーボモジュールを接続して、モータを回転させる。\n\n　\n\nこの他にもwifiに接続して、Tesselからtweetさせるとか。\n\nひとまずドキュメント通りにやってみたけれども、すごく簡単にハードウェアを動かすことが出来たし、普段は画面上でしか結果を見ることがない分、目の前でLEDが光ったりサーボモータが動いたりするのはかなり刺激的だった。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d033"},"title":"Socket.IO@1.0記念！Socket.IO Meetupに行ってきた。","create":{"$date":"2014-07-03T10:29:00.000Z"},"modify":{"$date":"2014-07-03T10:29:00.000Z"},"categories":["Socket.IO","Meetup"],"image":null,"body":"\n[Socket.IO Meetup](http://connpass.com/event/6911/)に参加しました。\n\n今回はSocket.IO作者のGuillermo Rauchさんが来日していて、裏話や今後の展望などについて聞くことが出来た。\n\nプログレスバーを作るのが面倒だから、Socket.IOを作ったとか。\n\nSocket.IOの開発用ビジュアライザ？をChrome Extensionで作っているとか。\n\n　\n\nGuillermoが来日していたからなのか、LTもほとんど英語。\n\n+ [MQTT.IO](https://speakerdeck.com/hakobera/mqtt-dot-io)\n+ [Socket.IO on SmartFX](http://www.slideshare.net/ssuser69ee9b/socketio-on-smartfx)\n+ [Web-based Multitrack Recording](https://docs.google.com/presentation/d/1Bt-G2Mrwr-guvAO75HbTcuPXmYZlYoMLmbekqEG5b3A/edit#slide=id.p)\n+ [Socket.IO 1.0 Client for Javaの紹介](https://speakerdeck.com/nkzawa/socket-dot-io-1-dot-0-client-for-javafalseshao-jie)\n\nたまにかろうじて知っている単語が聞き取れるので、想像で補完していました。\n\nいろんな勉強会で作者が来日して発表みたいなことが意外とあるから、いよいよ英語出来るようにならないとキツそう。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d034"},"title":"node-webkitでOpenWeatherMapの天気を表示するアプリを作った。","create":{"$date":"2014-07-06T16:30:00.000Z"},"modify":{"$date":"2014-07-06T16:30:00.000Z"},"categories":["node-webkit","Node.js"],"image":null,"body":"\nnode-webkitを使ってみたくて、とりあえず作った。\n\n[OpenWeatherMap](http://openweathermap.org)APIの天気情報を取得して表示するアプリ。\n\nメニュー内の検索フォームから任意の地点をクリックして追加、その後は15分で自動更新。\n\n[NeDB](https://github.com/louischatriot/nedb)を使って地点は保存してあるので、終了しても地点が消滅することはありません。\n\n![node-weather screenshot](https://dl.dropboxusercontent.com/u/3189929/images/2014/07/07/0001.png \"node-weather\")\n\nSource code: https://github.com/YuG1224/node-weather-app\n\ntar or zip: https://github.com/YuG1224/node-weather-app/releases\n\n\u003c!-- more --\u003e\n\n　\n\nnode-webkitの存在を初めて知った時、HTML/CSS/JavaScript/Node.jsの技術でネイティブアプリが作れるのかすげぇ！と思ったけれど、node-webkitの実体はWebKitブラウザなので当たり前っちゃ当たり前。\n\n読み込むファイルをnode-webkit.app/Contents/Resources/app.nwに固めて置くだけですごく簡単だし。\n\n本来は、HTMLやpackage.json、node_modules等をzipに固めてapp.nwにリネームするらしいけれど、app.nwディレクトリ配下にHTML類を配置するだけでも可能でした。\n\n実際にはブラウザ起動しているしネイティブアプリでは無いけれど、書き慣れた言語でネイティブアプリっぽいものが作れるのはすごく魅力的。\n\n　\n\n\u003e 今回は配布するアプリとして実装したけど、デジタルサイネージなどの端末にインストールして置いておく系アプリの実装にも便利だと思う。\n\n[node-webkitでNHK Newsを連続自動再生するアプリ作った](http://shokai.org/blog/archives/8586) の中であったけれど、確かに同感。便利だと思う。\n\n個人的には、これで配布する形にしてしまえば、アクセスしてくるブラウザやバージョンを指定できるので、各ブラウザ毎のテストが減るしすごく嬉しい。\n\nIE対応とかIE対応とか...\n"}
{"_id":{"$oid":"563d9b67bf652a600632d035"},"title":"nodebrewをHomebrewで入れる。","create":{"$date":"2014-08-14T14:13:00.000Z"},"modify":{"$date":"2014-08-14T14:13:00.000Z"},"categories":["Node.js","Homebrew"],"image":null,"body":"\n今までNode.jsのバージョン管理は[nvm](https://github.com/creationix/nvm)でしたが、最近は[nodebrew](https://github.com/hokaccha/nodebrew)に浮気してます。\n\nググるとcurlでの入れ方しか出て来ないのだけど、実はHomebrewを使ってインストール出来るようになっていました。\n\n## install\n\n```\n$ brew install nodebrew\n$ nodebrew\n\nnodebrew 0.7.4\n\nUsage:\n    nodebrew help                         Show this message\n    nodebrew install \u003cversion\u003e            Download and install a \u003cversion\u003e (compile from source)\n    nodebrew install-binary \u003cversion\u003e     Download and install a \u003cversion\u003e (binary file)\n    nodebrew uninstall \u003cversion\u003e          Uninstall a version\n    nodebrew use \u003cversion\u003e                Use \u003cversion\u003e\n    nodebrew list                         List installed versions\n    nodebrew ls                           Alias for `list`\n    nodebrew ls-remote                    List remote versions\n    nodebrew ls-all                       List remote and installed versions\n    nodebrew alias \u003ckey\u003e \u003cversion\u003e        Set alias to version\n    nodebrew unalias \u003ckey\u003e                Remove alias\n    nodebrew clean \u003cversion\u003e | all        Remove source file\n    nodebrew selfupdate                   Update nodebrew\n    nodebrew migrate-package \u003cversion\u003e    Install global NPM packages contained in \u003cversion\u003e to current version\n    nodebrew exec \u003cversion\u003e -- \u003ccommand\u003e  Execute \u003ccommand\u003e specified \u003cversion\u003e\n\nExample:\n    nodebrew install v0.10.22     Install a specific version number\n    nodebrew use v0.10.22         Use a specific version number\n```\n\n`brew install nodebrew`とするだけで`nodebrew`コマンドが使えるようになりました。すごく便利！\n\n\n参考：[brew install nodebrewできるようになった](http://oinume.hatenablog.com/entry/created-homebrew-formula-of-nodebrew)\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d036"},"title":"Atomで日本語文章をSoftWrapさせるjapanese-wrapを導入しました。","create":{"$date":"2014-08-18T14:18:00.000Z"},"modify":{"$date":"2014-08-18T14:18:00.000Z"},"categories":["Atom"],"image":null,"body":"\nAtom標準では日本語が入っている文章のSoftWrap、折り返し機能が正しく機能していませんでした。\n\nMarkdownでちょっと長い文章を書いてしまうと、横スクロールしなければならないのですごく不便でした。\n\n[japanese-wrap](https://github.com/raccy/japanese-wrap)というPackageを使うと、この折り返しが正しく機能してくれるようになります。\n\n\n## Install\n\n``` bash\n$ apm install japanese-wrap\n```\n\n## Setting\n\n[![Settings screenshot][img01]][img01]\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/08/18/0001.png\n\n\n## まとめ\n\nPreferencesからSoftWrapにチェックを入れても良いし、config.csonを直接編集してもどちらでも良いです。\n\n簡単。素晴らしい。まじ感謝。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d037"},"title":"東京Node学園 14時限目に参加しました。","create":{"$date":"2014-08-19T10:22:00.000Z"},"modify":{"$date":"2014-08-19T10:22:00.000Z"},"categories":["Node.js","Meetup"],"image":null,"body":"\n## 東京Node学園祭2014の告知\n\nhttp://nodefest.jp/2014/\n\n凝った作りになっていて、Enterで花火を打ち上げられたり、WebGLで3Dやっていたり、GoogleMapはWeb Componentsだったり、しれっと最新技術が使われていました。\n\n\n## Synthについて @pchw\n\nhttps://speakerdeck.com/pchw/synth-dong-jing-nodexue-yuan-2014\n\nSynthとはAPIファーストのWebアプリケーションフレームワークで、ディレクトリの構造をそのままURLマッピングすることが出来ます。\n\nMV*フレームワークを使っていると、ページがロードされているのにコンテンツが表示されないという弱点がありますが、これをSynthではプリロードという機能で解決しています。\n\n基本はAngularを使って作られていて自分で好きなMV*フレームワークに置き換えることが出来ますが、Angularに頼っている部分が多いので、自分でカスタマイズしなければならないそうです。\n\nちなみに、Tokyo Otaku ModeではSynthは使わずに普通にExpressを使っているみたいですｗ\n\n\u003c!-- more --\u003e\n\n## milkcocoaとそれを支える技術 @_sgtn\n\nhttps://slidebean.com/p/TO1HWyiK6r/milkcocoa\n\nmilkcocoaとはNode.jsとMongoDB、Socket.IOをまとめたバックエンドであり、Dockerで包み込まれた第5の力だそうですｗ\n\nそれぞれのDockerがユーザ一人一人が作ったインスタンスであり、それらはNodeで管理されています。各Dockerの上にはNodeがあり、フロントとはSocket.IOで通信しているそうです。\n\nAWSのAPIで実現しようとしたけど、Dockerの方が安かったので、こうなっているとのこと。\n\n質疑応答はあったのですが、企業秘密なのであまり詳しいことはありませんでした。\n\nちなみに、可愛い女の子のキャラクター、みるこちゃんは404ページにいるそうです。\n\n\n## Rendrの話 @hika69\n\nhttp://www.storyboards.jp/viewer/wo41ho\n\n## Nodeconf探訪記 @bad_at_math\n\n## ES6でよく使いそうなもの @omatoro\nhttp://slides.com/tomohirookayama/deck\n\n## Node.jsでQueueを実現するkueの話 @muddydixon\n\nhttps://github.com/muddydixon/nodestudy14\n\n\n## 懇親会\n\n懇親会ではES6について質問しに行った流れで、@omatoroさん含め数人とずっと話していました。\n\n個人的にはES6はCoffeeScriptっぽくてとっつきやすい印象なので、結構ありかなと。\n\nただアローファンクションの形がCoffeeと違うからそこに違和感。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d038"},"title":"「Web制作者のためのCSS設計の教科書」を買いました。","create":{"$date":"2014-08-22T16:50:00.000Z"},"modify":{"$date":"2014-08-22T16:50:00.000Z"},"categories":["CSS","Book"],"image":null,"body":"\n「[Web制作者のためのCSS設計の教科書](http://www.amazon.co.jp/gp/product/4844336355?ie=UTF8\u0026camp=1207\u0026creative=8411\u0026creativeASIN=4844336355\u0026linkCode=shr\u0026tag=yug1224-22)」を買ってみました。\n\n以前から欲しいなと気になっていたし、新人の[エルダー](http://kotobank.jp/word/%E3%82%A8%E3%83%AB%E3%83%80%E3%83%BC%E5%88%B6%E5%BA%A6)になってから、開発の基本を振り返ることが多いのでポチッと。\n\n[![Web制作者のためのCSS設計の教科書][img01]][img01]\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/08/23/0001.jpg\n\n\n## 内容\n\n- 第1章 CSSにおける設計とは\n- 第2章 CSSの基本を振り返る\n- 第3章 コンポーネント設計のアイデア\n- 第4章 コンポーネント設計の実践\n- 第5章 CSSプリプロセッサを用いた設計と管理\n- 第6章 コンポーネントの運用に必要なツール\n- 第7章 Web Componentsの可能性\n\n\u003c!-- more --\u003e\n\n\nCSSのセレクタ等を説明している本は結構ありますが、この本ではケース毎のベストプラクティスを説明しているので、実践ですぐ使えそうな内容になっていると思います。\n\n「予測しやすい」「保守しやすい」「再利用しやすい」「拡張しやすい」の4点をゴールとする基本的な考え方、OOCSSやSMACSS、BEMなどの設計手法の違いやSassなどのプリプロセッサになどの応用的な部分、さらには便利なツールなどについても解説がありました。\n\nカラーでわかりやすいので初心者にもオススメですが、Web Componentsという新しい技術についても解説しているので、初心者以外でも楽しめる内容だと思います。\n\n少ないページ数の割に、内容が盛り沢山で、しかもわかりやすい。\n\nオススメです。\n\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=4844336355\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d039"},"title":"CentOS に Nginx をインストールする。","create":{"$date":"2014-08-26T17:21:00.000Z"},"modify":{"$date":"2014-08-26T17:21:00.000Z"},"categories":["Nginx","CentOS"],"image":null,"body":"\nyum で Nginx をインストールするためのメモ。\n\n参考：[Nginx公式ページ](http://nginx.org/en/linux_packages.html)\n\n\n## rpm パッケージをインストール\n\n```\n$ rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm\n```\n\n\n## /etc/yum.repos.d/nginx.repo を編集\n\n```\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/mainline/OS/OSRELEASE/$basearch/\ngpgcheck=0\nenabled=1\n```\n\nbaseurlに`mainline`と入れる。\n\nmainlineを入れない場合、Stable versionのNginxがインストールされるのですが、NginxはMainline versionが一番安定しているのでmainlineにしておくと良いと思います。\n\n\n## Nginx をインストール\n\n```\n$ yum -y install nginx\n$ nginx -v\nnginx version: nginx/1.7.4\n```\n\nMainlineのVersionが表示されればOK。その後はいつも通りに起動します。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d03a"},"title":"「フロントエンドエンジニア養成読本」を買いました。","create":{"$date":"2014-08-27T15:37:00.000Z"},"modify":{"$date":"2014-08-27T15:37:00.000Z"},"categories":["Book"],"image":null,"body":"\n「[フロントエンドエンジニア養成読本](http://www.amazon.co.jp/gp/product/4774165786/ref=as_li_ss_tl?ie=UTF8\u0026camp=247\u0026creative=7399\u0026creativeASIN=4774165786\u0026linkCode=as2\u0026tag=yug1224-22)」を買ってみました。\n\n仕事はWebエンジニアで主にフロント寄りの開発をすることが多いし、自分としてもそっち側をもっと極めたいと思っていたのでタイミングが良かった。\n\n[![フロントエンドエンジニア養成読本][img01]][img01]\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/08/28/0001.jpg\n\n## 目次\n\n- 特集1 フロントエンドエンジニアとしての基礎と準備\n    - 第1章 フロントエンドエンジニアとは?\n    - 第2章 Webブラウザの基礎知識\n    - 第3章 UI/UXデザイン入門\n    - 第4章 HTML/CSS/JavaScript基礎\n\n- 特集2 フロントエンド開発フィールドガイド\n    - 第5章 マークアップクイックレシピ\n    - 第6章 CSS実践入門\n    - 第7章 JavaScriptの設計と指針\n    - 第8章 モバイル・マルチデバイスへの対応\n    - 第9章 フロントエンドの開発環境\n    - 第10章 JavaScript開発におけるテスト\n    - 第11章 パフォーマンス入門\n    - 第12章 Gitでバージョン管理\n    - 第13章 現場で使える品質管理\n    - 第14章 セキュリティ対策の基本\n\n- 特集3 フロントエンド開発最前線\n    - 第15章 Web Components入門\n    - 第16章 ECMAScript 6\n    - 第17章 WebRTCの実装\n\n\u003c!-- more --\u003e\n\n## 感想\n\nHTML/CSS/JavaScriptだけでなく、UI/UX、Gitの使い方、新技術についてなど、興味深い内容が満載でした。\n\n個人的には、第8章くらいまでが初心者向け、第9章以降は開発手法やツールについてなので中上級者向けの内容かなと感じました。\n\nフロントエンド開発のいろはを網羅して紹介するための本というような位置づけなのか、専門的なことを深く掘り下げるような内容はあまり多くなかったですね。\n\n人によってはそれが物足りなく感じてしまうかもしれないですが、これからフロントエンドを学ぶ新人、脱初心者したい人などは読んでおいても損はしないのではないでしょうか。\n\nオススメです。\n\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=4774165786\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d03b"},"title":"自分のブログにTwitterカードの設定をしてみた。","create":{"$date":"2014-08-28T17:07:00.000Z"},"modify":{"$date":"2014-08-28T17:07:00.000Z"},"categories":["Twitter","Analytics"],"image":null,"body":"\n[https://analytics.twitter.com/](https://analytics.twitter.com/) にログインすることでアナリティクスが利用出来るようになりました。\n\n　\n\n[![Twitter アナリティクス][img01]][img01]\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/08/29/0001.png\n\n　\n\nTwitterアナリティクスが一般公開されたことで、Twitterカードを使えるようになったので設定してみました。\n\n\u003c!-- more --\u003e\n\n　\n\nまずDevelopersでTwitterカードの[検証ツール](https://dev.twitter.com/docs/cards/validation/validator)を開きます。\n\n　\n\n[![Twitterカード設定前][img02]][img02]\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2014/08/29/0002.png\n\nフォームにタイトルや内容などを入力するだけで、ブログに設定すべきmetaタグを右下に生成してくれます。\n\n今回は必須項目のみ設定しました。\n\n``` html\n\u003c!-- twitter cards --\u003e\n\u003cmeta property=\"twitter:card\" content=\"summary\"\u003e\n\u003cmeta property=\"twitter:site\" content=\"@YuG1224\"\u003e\n\u003cmeta property=\"twitter:title\" content=\"@YuG1224 blog\"\u003e\n\u003cmeta property=\"twitter:description\" content=\"Node.jsやNginx、CoffeeScriptが好きなWebエンジニアです。\"\u003e\n\u003cmeta property=\"twitter:image\" content=\"https://pbs.twimg.com/profile_images/459990144779419648/bp4WxqdH.jpeg\"\u003e\n\u003cmeta property=\"twitter:url\" content=\"http://blog.yug1224.com/\"\u003e\n```\n\nブログにmetaタグを適用後、「Validate \u0026 Apply」のタブを選んでURLを入力します。\n\nmetaタグが正しく設定されていれば、信号は全て緑色になるはずです。\n\n　\n\n[![Twitterカード設定後][img03]][img03]\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2014/08/29/0003.png\n\n　\n\n設定後にブログURLをツイートしてみると、設定した情報がツイートに付与されるようになりました。\n\n　\n\n\u003cblockquote class=\"twitter-tweet\" lang=\"ja\"\u003e\u003cp\u003eTwitterカードのテスト\u0026#10;\u003ca href=\"http://t.co/9eyeJzfSkT\"\u003ehttp://t.co/9eyeJzfSkT\u003c/a\u003e\u003c/p\u003e\u0026mdash; ぷーじ (@YuG1224) \u003ca href=\"https://twitter.com/YuG_1224/statuses/505026612585185280\"\u003e2014, 8月 28\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\n　\n\nこのmetaタグを記事毎に生成するようにしておけば、その記事の内容が自動的にカード化されるって感じですね。\n\n素晴らしい。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d03c"},"title":"iPhone 6 Plusはデカすぎだけれど、もう戻れない。","create":{"$date":"2014-09-22T14:28:00.000Z"},"modify":{"$date":"2014-09-22T14:28:00.000Z"},"categories":["Apple","iPhone"],"image":null,"body":"\n## 開封の儀\n\n[![iPhone 6 Plus 開封][img01]][img01]\n\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/09/22/0001.jpg\n\niPhone 6 Plus 128GB Space Gray\n\n予約開始日にソフトバンクオンラインショップで予約して、09/21に届きました。\n\n歴代のiPhoneのパッケージと違って真っ白なパッケージデザイン。\n\nいろんなところで言われているようにジョブズのいない新しいAppleを表現しているのでしょうか。\n\n\u003c!-- more --\u003e\n\n\n## iPhone 5との比較\n\n[![5と6 Plusの比較][img02]][img02]\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2014/09/22/0002.jpg\n\n自分はiPhone 5からの機種変更組なのですが、5と比べてみるとiPhone 6 Plusはデカイですね！デカすぎですね！\n\n見た目はかなり大きくなっているように見えますが、薄くて角も丸いので、持った感じはそんなに違和感は無いです。\n\nただし、今までの様に充電器付近に小指を当てるスタイルでは重心が安定しないので、本体の真横を持つスタイルになりそうです。\n\n\n## 1日使ってみて\n\n[![iPhone 6 Plus 操作][img03]][img03]\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2014/09/22/0003.jpg\n確かに、大きくて片手での操作がしにくいのはデメリットかもしれないですが、このくらいの大きさならすぐに慣れることが出来ます。\n\n逆に慣れてしまった後では、iPhone 5の画面の小ささが逆に操作しにくいと感じてしまうようになりました。\n\n目的の情報に辿り着くまでに何度もスクロールしなければならなかったり、ピンチインで拡大しなければならなかったり、小さい画面はかなり不便です。\n\n09/22現在でiPhone 6 Plusに対応しているアプリは標準アプリやTwitterぐらいのみで、対応しているアプリの場合は一画面で表示される情報量がかなり違いました。非対応の場合はただ拡大して表示されるだけになります。\n\nVingowとかGunosyとかのニュース系のアプリや、Gmailなどのメール系のアプリが対応してくれると、iPhone 6 Plusのメリットが活かされるんじゃないかなと思います。\n\n\n## 意外と\n\n老眼の両親に見せたところ、画面が大きくて写真やメールもiPhone 5よりも見やすいと意外に好評でした。\n\nそもそも片手での操作をしない層に対しては片手操作がしにくいなんていうデメリットは存在しないわけで、メリットしかないのかもしれません。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d03d"},"title":"Gitリポジトリを移行する","create":{"$date":"2014-09-26T16:33:00.000Z"},"modify":{"$date":"2014-09-26T16:33:00.000Z"},"categories":["Git"],"image":null,"body":"\n例えば、自サーバ内にあるGitリポジトリをGitHubやGitLab,GitBucketなどのホスティングサービスに移行させたい。\n\nそんな時はどうしたら良いのか。\n\n`git add remote` で移行先のリポジトリを追加して、ブランチやタグを一つ一つ `git push` しても出来なくはない。\n\n`--all` や `--tags` などのオプションを指定すれば、ローカルブランチやローカルタグならば一気に `push` することが出来る。\n\n方法はいくつかあるけれど、下記のようにmirrorオプションをつける方法が一番簡単そうだったのでメモ。\n\n```\n$ git clone --mirror \u003c移行元のRepository URL\u003e\n$ cd hoge\n$ git push --mirror \u003c移行先のRepository URL\u003e\n```\n\n以上！すごく簡単！\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d03e"},"title":"iPhone 6 Plus に Bunker Ring Essentials。","create":{"$date":"2014-10-02T18:02:00.000Z"},"modify":{"$date":"2014-10-02T18:02:00.000Z"},"categories":["iPhone"],"image":null,"body":"\niPhone 6 Plus は大きくて画面が見やすいのは凄く良い所ですが、片手で持って操作するのはちょっと無理がある。\n\nというわけで「[Bunker Ring Essentials](http://www.amazon.co.jp/gp/product/B00H44VGQW/ref=as_li_ss_tl?ie=UTF8\u0026camp=247\u0026creative=7399\u0026creativeASIN=B00H44VGQW\u0026linkCode=as2\u0026tag=yug1224-22)」を遂に購入しました！\n\n[![Bunker Ring Essentials][img01]][img01]\n[img01]: https://dl.dropboxusercontent.com/u/3189929/images/2014/10/03/0001.jpg\n\n今回購入したのは、Silver。\n\nパッケージはたったこれだけで、あっさりしていました。\n\n\u003c!-- more --\u003e\n\n\n\n## iPhone 6 Plusに装着\n\n[![Bunker Ring Essentials][img02]][img02]\n\n[img02]: https://dl.dropboxusercontent.com/u/3189929/images/2014/10/03/0002.jpg\n\niPhone 6 Plus Space Grayに装着してみました。\n\n表面はマットな色合いに仕上がっているので、iPhone 6 Plusとの違和感はあまり感じないです。\n\n\n## 装着位置\n\n[![Bunker Ring Essentials][img03]][img03]\n\n[img03]: https://dl.dropboxusercontent.com/u/3189929/images/2014/10/03/0002.jpg\n\n個人的な最適な位置は、下辺を技適マークに合わせて、少し左にずらした辺り。\n\n真ん中がベストなのかなと思ったら、意外と下寄りになってしまいました。\n\n\n## まとめ\n\niPhone 5/5sのサイズまでは、必要ないかなと思っていたのですが、さすがにiPhone 6 Plusではあると便利。\n\n手が小さい人、持ち方が安定しない人などは、かなり快適に使えるようになると思います。\n\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=B00H44VGQW\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d03f"},"title":"LGTMをランダムで取得するAtomのPackageを作った。","create":{"$date":"2014-11-10T11:42:00.000Z"},"modify":{"$date":"2014-11-10T11:42:00.000Z"},"categories":["Atom"],"image":null,"body":"\nランダムでLGTMが表示される[lgtm.in/g](http://www.lgtm.in/g)からMarkdown文字列を取得して記述する[atom-lgtm](https://atom.io/packages/atom-lgtm)を作ってみました。\n\n![screencast](https://dl.dropboxusercontent.com/u/3189929/images/2014/11/10/0001.png)\n\n`ctrl-alt-l`もしくは`Packages -\u003e atom-lgtm -\u003e LGTM!`で下記のようなMarkdown形式の画像リンクが挿入されます。\n\n``` markdown\n[![LGTM](http://www.lgtm.in/p/4Yxfpawiq)](http://www.lgtm.in/i/4Yxfpawiq)\n```\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d040"},"title":"apngasmでAPNGを作ってみた。","create":{"$date":"2014-11-11T15:35:00.000Z"},"modify":{"$date":"2014-11-11T15:35:00.000Z"},"categories":["APNG","Homebrew"],"image":null,"body":"\nSafari 8でサポートされるようになったAPNG（アニメーションPNG）\n\n複数のPNGから一つのAPNGを作成することが出来る[apngasm](https://github.com/apngasm/apngasm)を試してみました。\n\n\n## インストール\n\n``` bash\n$ brew install apngasm\n```\n\nMac OSXならばHomebrewでインストールできます。\n\n依存のあるパッケージなども一緒にインストールしてくれたので、とても簡単でした。\n\n\n## APNG作成\n\n``` bash\n$ apngasm 0001.png 0002.png 0003.png\n```\n\n使用するファイルを指定するだけで、APNGを作成することが出来ます。\n\n``` bash\n$ apngasm 0001.png 0002.png 0003.png -o output.png -d 1000\n```\n\nオプションもいくつか設定することが可能で、`-o`で作成されるファイル名を指定出来たり、`-d`で切り替わる間隔（ms）を変えることが出来ます。\n\n![apng](/images/20141112/output.png)\n\n\u003c!-- more --\u003e\n\n以上\n"}
{"_id":{"$oid":"563d9b67bf652a600632d041"},"title":"gulp-apidocでRESTful APIドキュメントを生成する。","create":{"$date":"2014-11-14T10:51:00.000Z"},"modify":{"$date":"2014-11-14T10:51:00.000Z"},"categories":["gulp","apiDoc"],"image":null,"body":"\nRESTful API用のドキュメントを生成する[apiDoc](http://apidocjs.com)\n\nこのドキュメント生成をgulpで実行するための[gulp-apidoc](https://www.npmjs.org/package/gulp-apidoc)を試してみました。\n\n## Install\n\n```\nnpm install gulp-apidoc\n```\n\n## Usage\n\n``` coffee\ngulp = require \"gulp\"\napidoc = require \"gulp-apidoc\"\n\ngulp.task \"apidoc\", () -\u003e\n  apidoc.exec\n    src: \"./src/coffee\"\n    dest: \"./doc/\"\n    includeFilters: [\".*\\\\.coffee$\"]\n```\n\n`includeFilters`は使用している言語によって変更します。\n\nこれを実行すると、[example](http://apidocjs.com/example/)のようなドキュメントが`./doc`ディレクトリ下に生成されます。\n\n簡単にドキュメントが生成出来て、HTTPメソッドを表示出来るのが良いですね。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d042"},"title":"SONY アイピースカップ FDA-EP14を買った。","create":{"$date":"2014-11-17T15:01:00.000Z"},"modify":{"$date":"2014-11-17T15:01:00.000Z"},"categories":["camera"],"image":null,"body":"\n[![FDA-EP14][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2014/11/18/0001.jpg\n\nSONY α7s, α7R, α7, α58用のアイピースカップ。\n\n普段から外れやすくて、何回も紛失しかけてたのですが、ついに完全に紛失。\n\nこれが無いと不格好だし、液晶剥き出しになってしまうので、仕方なくソニーストアで購入しました。\n\n割引クーポン使って906円。\n\n他にもホットシューカバーとか、こうゆう小さいパーツ類は無くしやすいし、どうにかならないかなぁ。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d043"},"title":"2014年最後にnasneを買った。","create":{"$date":"2014-12-30T15:00:00.000Z"},"modify":{"$date":"2014-12-30T15:00:00.000Z"},"categories":["nasne"],"image":null,"body":"\n[![nasne 1TBモデル (CECH-ZNR2J)][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2014/12/31/0001.jpg\n\n自分・妻・息子・娘、4人分の録画をTVの内蔵HDD録画で行っている。\n\n4人分となると録画予約リストはすぐ一杯になってしまうし、録画したものはどんどん消化していかなければならない。\n\n通勤時間が片道2時間半、少し残業して10:00-20:00で帰ったとしても、帰宅するのは23:00頃。\n\n翌朝7:30には家を出なければならないので、夕食を食べたり妻との会話をしていたら、溜めておいた録画を一人でゆっくる消化するなんてのは到底ムリ。\n\nということで、以前から欲しかったnasneを購入しました。\n\n\u003c!-- more --\u003e\n\n\n## LAN接続編\n\n我が家はTVとLANの場所が離れているため、LANとnasneの接続には中継器を使いました。\n\n[![BUFFALO 無線LAN中継機 WEX-300][0002]][0002]\n[0002]: https://dl.dropboxusercontent.com/u/3189929/images/2014/12/31/0002.jpg\n\nYahoo! BBの光BBユニットと中継器を無線LANで繋ぎ、中継器とnasne及びPS3は有線LANで繋ぎます。\n\n`光BBユニット \u003c--\u003e 中継器 \u003c--\u003e nasne/PS3`\n\nあまり知られていないようだけど、光BBユニットの機能ボタンを1~2秒長押しすることでWPS機能が利用出来るので、設定自体は凄く簡単。\n\nhttp://ybb.softbank.jp/support/connect/wireless/wps.html\n\nLANポートが余っていたので、ついでにTVも接続しておきました。\n\n\n## アンテナ接続編\n\nアンテナとnasneの接続ですが、壁のアンテナ端子は地上デジタルのみで、BS/110度CSは併用していないので混合器も分波器も使っていません。\n\n`アンテナ線 \u003c--\u003e nasne \u003c--\u003e TV`\n\n\n## 感想\n\n数日使ってみた感想はすごく良い。\n\n放送中の番組をリモート視聴する場合はたまに止まってしまう場合があったけれど、録画の場合は問題なし。\n\nチャプター機能が使えるし、月7GB制限が怖いので、基本的にはiPhoneへ転送して視聴したいのだけれど、ダビング10を消費してしまうのが悩ましい。\n\nとりあえず年越しは紅白をリアルタイムで見て、ガキ使は録画でじっくり見ます！\n\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=B00F27JGT2\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\n\u003ciframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank\u0026bc1=000000\u0026IS2=1\u0026bg1=FFFFFF\u0026fc1=000000\u0026lc1=0000FF\u0026t=yug1224-22\u0026o=9\u0026p=8\u0026l=as4\u0026m=amazon\u0026f=ifr\u0026ref=ss_til\u0026asins=B00JKXKVQQ\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d044"},"title":"index.lockがあってgit statusが出来ない。","create":{"$date":"2015-01-09T11:06:00.000Z"},"modify":{"$date":"2015-01-09T11:06:00.000Z"},"categories":["Git"],"image":null,"body":"\n突然gitが死んだ。\n\n```\n'git status' failed with code 6\n```\n\ngit statusをするとErrorが表示される。\n\ngit logやgit diffは出来るが、git addやgit commitは怖くてやっていない。\n\n`.git/index.lock`が出来ていたので、ひとまず削除。\n\n```\n$ rm .git/index.lock\n$ git reset\n```\n\nなんとかgit statusが出来るようになった。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d045"},"title":"io.jsをnodebrewから使う","create":{"$date":"2015-01-13T10:48:00.000Z"},"modify":{"$date":"2015-01-13T10:48:00.000Z"},"categories":["io.js","Node.js"],"image":null,"body":"\nv1.0.0が今日リリース予定の[io.js](https://iojs.org)\n\n[Nodeやio.jsのpreバージョンをビルドしてnvmから使う](http://qiita.com/laiso/items/b3e543f85679928caec4) を参考にnodebrewでもio.jsを扱えるようにしてみました。\n\n## io.jsのインストール\n\n```\n$ git clone git@github.com:iojs/io.js.git\n$ cd io.js\n$ ./configure --prefix=/Users/username/.nodebrew/node/v1.0.0\n$ make\n$ make install\n```\n\nmake installするとv1.0.0になるので、prefixを.nodebrew/node/v1.0.0にしておきます。\n\n\n## nodebrew確認\n\n```\n$ nodebrew ls\nv0.10.35\nv1.0.0\n\ncurrent: v0.10.35\n```\n\n正しくインストール出来ていれば、nodebrewのリストに表示されて扱えるようになります。\n\n\u003c!-- more --\u003e\n\n## harmonyオプションの確認\n\n### Node.js v0.10.35\n\n```\n$ node --version\nv0.10.35\n$ node --v8-options | grep harmony\n--harmony_typeof (enable harmony semantics for typeof)\n--harmony_scoping (enable harmony block scoping)\n--harmony_modules (enable harmony modules (implies block scoping))\n--harmony_proxies (enable harmony proxies)\n--harmony_collections (enable harmony collections (sets, maps, and weak maps))\n--harmony (enable all harmony features (except typeof))\n```\n\n### io.js v1.0.0\n\n```\n$ nodebrew alias iojs v1.0.0\n$ nodebrew use iojs\nuse v1.0.0\n$ node --version\nv1.0.0\n$ node --v8-options | grep harmony\n--es_staging (enable all completed harmony features)\n--harmony (enable all completed harmony features)\n--harmony_shipping (enable all shipped harmony fetaures)\n--harmony_modules (enable \"harmony modules (implies block scoping)\" (in progress))\n--harmony_arrays (enable \"harmony array methods\" (in progress))\n--harmony_array_includes (enable \"harmony Array.prototype.includes\" (in progress))\n--harmony_regexps (enable \"harmony regular expression extensions\" (in progress))\n--harmony_arrow_functions (enable \"harmony arrow functions\" (in progress))\n--harmony_proxies (enable \"harmony proxies\" (in progress))\n--harmony_sloppy (enable \"harmony features in sloppy mode\" (in progress))\n--harmony_unicode (enable \"harmony unicode escapes\" (in progress))\n--harmony_tostring (enable \"harmony toString\")\n--harmony_numeric_literals (enable \"harmony numeric literals\")\n--harmony_strings (enable \"harmony string methods\")\n--harmony_scoping (enable \"harmony block scoping\")\n--harmony_classes (enable \"harmony classes (implies block scoping \u0026 object literal extension)\")\n--harmony_object_literals (enable \"harmony object literal extensions\")\n--harmony_templates (enable \"harmony template literals\")\n```\n\nio.jsのaliasも設定して、nodeにはなかったオプションが追加されているのが確認出来ました。\n\n### 追記\n\nnodebrewのアップデートで、io.jsをinstall-binaryコマンドでインストールしてくれるようになりました。\n\n```\n$ nodebrew install-binary io@v1.0.0\n$ nodebrew use io@v1.0.0\n$ nodebrew ls\nv0.10.35\nio@v1.0.0\n\ncurrent: io@v1.0.0\n```\n"}
{"_id":{"$oid":"563d9b67bf652a600632d046"},"title":"エンジニアサポートCROSS 2015に参加しました。 #cross2015","create":{"$date":"2015-01-29T02:00:00.000Z"},"modify":{"$date":"2015-01-29T02:00:00.000Z"},"categories":["CROSS","Meetup"],"image":null,"body":"\n[エンジニアサポートCROSS 2015](http://2015.cross-party.com)に参加してきました。\n\n今回の会場は、「[大さん橋ホール](http://www.osanbashi.com/hall/)」\n\n[![大さん橋ホール][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/01/29/0001.jpg\n\n[![昼のベイブリッジ][0002]][0002]\n[0002]: https://dl.dropboxusercontent.com/u/3189929/images/2015/01/29/0002.jpg\n\nデッキ上からはベイブリッジが見えました。\n\n## 参加したセッション\n\n下記4つのセッションに参加しました。\n\n- [「女子大生UXデザイン概論」参加メモ #cross2015b](/2015/01/29/cross2015-01)\n\n\n- [「IoT・ウェアラブル・VR～今後のデバイスに向けた開発手法について ～スマホの次を見据えて～」参加メモ #cross2015b](/2015/01/29/cross2015-02)\n\n\n- [「Webエンジニアなら抑えておきたい最近のOSS事情」参加メモ #cross2015d](/2015/01/29/cross2015-03)\n\n\n- [「WebエンジニアはIoTをどうあつかえば良いのか」参加メモ #cross2015d](/2015/01/29/cross2015-04)\n\n## 横浜の夜景\n\n[![夜のベイブリッジ][0007]][0007]\n[0007]: https://dl.dropboxusercontent.com/u/3189929/images/2015/01/29/0007.jpg\n\n[![夜の赤レンガ倉庫][0008]][0008]\n[0008]: https://dl.dropboxusercontent.com/u/3189929/images/2015/01/29/0008.jpg\n\n次来るときは女の子と来たい。\n\n\u003c!-- more --\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d047"},"title":"「女子大生UXデザイン概論」参加メモ #cross2015b","create":{"$date":"2015-01-29T02:18:00.000Z"},"modify":{"$date":"2015-01-29T02:18:00.000Z"},"categories":["CROSS","Meetup"],"image":null,"body":"\n[女子大生UXデザイン概論](http://2015.cross-party.com/program/b1)\n\nエンジニアの感覚がどれだけ一般と乖離しているか、現役JDの話を聞きながら考えるセッション。\n\n決してJDの生活を垣間見るというゲスい企画ｗ\n\n[![JD][0003]][0003]\n[0003]: https://dl.dropboxusercontent.com/u/3189929/images/2015/01/29/0003.jpg\n\n\u003c!-- more --\u003e\n\n## JDの一日\n\n- PC 使う？\n  - 授業のレポート作成\n  - ネットショッピング\n\n\n- 使っている SNS は？\n  - Facebook\n  - LINE\n  - Instagram\n  - Twitter\n  - 755\n\n\n- 毎日スマホを触りますか？\n  - 朝からずっと\n  - 授業中もわからないときとか\n\n\n- スケジュールの管理はどうしている\n  - 基本は手帳\n  - 最初から入っているカレンダーアプリ\n\n\n- 使っているニュースアプリは\n  - Gunosy\n  - Smart News\n\n## 質問\n\n- JDは課金するんですか？\n  - LINEのスタンプやLINEモール、Kindleで電子辞書とか\n\n\n- アプリのレビューを参考にしますか？\n  - アプリのレビューは気にする\n\n\n- アプリのレビューを書こうと思いますか？その時はどんな時ですか？\n  - レビューを書こうとは思わないが、もし書くとしたら本当に悪かったときとか\n  - レビューを書くと機能がアップデートされる時などは書く\n\n\n- アプリを入れるシチュエーションは？\n  - 無料ランキングを見て入れる\n  - スクリーンショットが可愛かったり使いやすそうだったら入れる\n\n\n- カメラアプリを入れる基準は？\n  - どれだけ盛れるかｗ\n\n\n- 親とLINEはしますか？\n  - 最初はメールだったが、親がLINEを覚えたので、家族のグループがある\n\n## まとめ\n\nJDはあまりPCは使わずスマホを触る時間は多く、iPhone率が高いようだ。\n\nカメラアプリやおしゃれで可愛いアプリが多く、キュレーションアプリも多い。\n\nエンジニアしか使わないと思っていたSlackを使っているJDがいたのが驚き。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d048"},"title":"「IoT・ウェアラブル・VR～今後のデバイスに向けた開発手法について ～スマホの次を見据えて～」参加メモ #cross2015b","create":{"$date":"2015-01-29T04:16:00.000Z"},"modify":{"$date":"2015-01-29T04:16:00.000Z"},"categories":["CROSS","Meetup"],"image":null,"body":"\n[IoT・ウェアラブル・VR～今後のデバイスに向けた開発手法について ～スマホの次を見据えて～](http://2015.cross-party.com/program/b2)\n\nIoT・ウェアラブル・VRなど今後のデバイスに向けて、ニフティクラウドを使った開発手法についてのセッション\n\n[![セッション風景][0004]][0004]\n[0004]: https://dl.dropboxusercontent.com/u/3189929/images/2015/01/29/0004.jpg\n\nランチセッションだったのでお弁当がついていました。\n\n[![お弁当][0005]][0005]\n[0005]: https://dl.dropboxusercontent.com/u/3189929/images/2015/01/29/0005.jpg\n\n## 近いうちに生活がこのように変わる？\n\n- ウェアラブル端末から身体データを取得分析\n- 疲れの度合いに応じて適切な睡眠環境を提供\n\n今後は様々な機器やセンサーがクラウドにつながる\n\n\u003c!-- more --\u003e\n\n## データの流れと活用方法\n\n- 閲覧・通知\n- 分析・解析\n- 別の機器を操作\n\n## IoTサービスの開発手法\n\nデバイス側、サーバ側の開発・運用が必要となるので、BaaSやmBaaSでコストを下げる。\n\n## IoTとBaaS\n\nmBaaSを用いた開発手法と同じようにセンサーやデバイスからBasSに対して定期的にデータを送信し、データの解析はBaaS上で行う。\n\nM2MでもBaaSを仲介することによって、対応プロトコルが違っていたとしてもやりとりをすることが出来る。\n\n## まとめ\n\nIoTなどネットとつながるサービスが膨大に増える\n\nサーバ処理を個別に開発・運用をするのは大変\n\nBaaSを効率的に用いれば、デバイス側開発に注力することが出来る\n"}
{"_id":{"$oid":"563d9b67bf652a600632d049"},"title":"「Webエンジニアなら抑えておきたい最近のOSS事情」参加メモ #cross2015d","create":{"$date":"2015-01-29T05:10:00.000Z"},"modify":{"$date":"2015-01-29T05:10:00.000Z"},"categories":["CROSS","Meetup"],"image":null,"body":"\n[Webエンジニアなら抑えておきたい最近のOSS事情](http://2015.cross-party.com/program/d3)\n\n2014年のOSSはどんなトレンドがあったのか、そして2015年度のOSSはどのようになっていくのかディスカッションするというセッション。\n\n## 2014年\n\n- OSS界隈の印象深い出来事\n  - io.js\n    - プロジェクトへの関わり方について考えるキッカケになった\n    - プロジェクトのススメ方に**オープンガバナンスモデル**を採用している\n      - 透明性の確保とコントリビュートのしやすくするのが目的\n    - NodeにはRubyにおけるMatz、RailsにおけるDHHのようなカリスマがいない\n      - 優しい独裁者が必要\n\n\n- 使ってみた手放せなくなったOSS\n  - Brackets\n    - Adobeが公開しているエディタ\n    - CSSのクイック編集機能が良い\n  - gulp\n    - JSで書けるタスクランナー\n    - minifyなどフロントエンドは前処理が意外と多い\n    - フロントエンドエンジニアが慣れているJSで書けるのは良い\n\n\n- 期待したけど〜だったOSS\n  - Atom\n    - GitHubのくせにOSSじゃないのかよ！\n  - AngularJS\n    - リリーススケジュールが遅くて残念\n\n\u003c!-- more --\u003e\n\n## デザイン\n\n- マテリアルデザインはどうしてもBootstrap臭が出てしまう\n  - 線を細くしたり、そのまま使うのではなくて少し手を加える\n  - PURE などBootstrapベースの別のフレームワークを使う\n\n\n- Web Font\n  - GitHubで使われているアイコン Octicons が公開された\n  - GitBucketのために公開されたんだ！ｗ\n    - GitBucketのアイコンを入れ替えようと考えている\n\n## セキュリティ\n\n- 有名でないOSSほど脆弱性の報告が遅くなってしまう。\n- 自分が使っているOSSではどんなプラグインが使われているかきちんと把握しておく。\n- 当たり前だけど最新情報を取得するサイクルを入れる。\n\n## HTML5\n\n- ブラウザの互換性の違いによって動かないJavaScriptがある\n  - 新しいブラウザが出るたびにフロントエンドの人はビクっとする。\n  - Spartan、ガラホはどうなるのだろう？\n\n\n- JavaScriptフレームワーク\n  - IE対応しなければならない場合はAngularやVueは使えない\n  - ブラウザ対応度合いなどを考えるならBackboneのように薄い方が良い\n\n## 仮想化技術\n\n- Docketが凄く便利というわけではない\n  - 単純にDockerだけで使うメリットはあまりない\n  - Immutableなどと組み合わせると良い\n  - OS固有のIssueの時にDocketイメージを添付したりする\n\n## 2015年はどうなるか？\n\n- Microserviceで疎結合に\n\n\n- Scalaが普及期になった\n  - Railsなどから入ってくる人が多い\n  - GitBucketをOSSのプロジェクトとしてちゃんと運営したい\n\n\n- io.js\n  - フロントエンドもサーバサイドも同じ処理が動くのはnode/io.jsだけ\n  - Isomorphicの推進！\n\n\n- 英語\n  - GitHub Issueから英語を正規化して取り出すと800語\n  - コミット英語のまとめとか、そういう辞書あると色々便利そう。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d04a"},"title":"「WebエンジニアはIoTをどうあつかえば良いのか」参加メモ #cross2015d","create":{"$date":"2015-01-29T06:23:00.000Z"},"modify":{"$date":"2015-01-29T06:23:00.000Z"},"categories":["CROSS","Meetup"],"image":null,"body":"\n[WebエンジニアはIoTをどうあつかえば良いのか](http://2015.cross-party.com/program/d4)\n\nIoTに興味を持ち始めたWebエンジニアは、IoTとどう接していけばいいのか。「IoT」や「ハードウェア」に触れているパネラーたちがディスカッションをするというセッション。\n\n[![セッション風景][0006]][0006]\n[0006]: https://dl.dropboxusercontent.com/u/3189929/images/2015/01/29/0006.jpg\n\n## IoTの定義\n\n- 切り口によっていろいろある\n  - モノのインターネット？\n  - サービスのモノ化\n  - モノゴトのインターネット？\n\n\n- IoTは抽象的で、具体的に細分化している\n  - Connected Car\n    - ベンツ「Fモデル」\n  - Connected Home\n    - nest, SmartThings, Apple TV\n  - Connected Human (Wearable)\n    - Apple Watch, Google Glass, Moff Band\n  - またはM2M\n\n\n- 全く違うモノをInternetで組み合わせることで新しい価値を生み出す\n  - Webサービス + ハードウェア = 新しい価値\n  - 1 + 1 = a (1 + 1 = 2ではない)\n\n\n- nest\n  - nestに繋がるということがイケてるハードの条件\n  - HomeKitはTVから入ってきているので、エアコンであるnestとは少し違う\n\n\u003c!-- more --\u003e\n\n## IoTの商品企画\n\n- どう価値を作るか？\n  - 既存製品に通信機能をアドオン？\n  - ゼロから製品開発？\n\n\n- どんなモノを作るか、いくつか視点がある\n  - IoT用のハードを作るのか\n  - APIやSDKを用いてハードとインターネットを繋げるのか\n  - 様々なアプリと連携することで複数のモノを代替するモノ\n  - 画面内の減少を現実世界に具現化するモノ\n\n\n- ハードから自前で作ると既存のハードの制約から解放される\n- 本当にハードを作る必要があるのか？\n  - スマホにその機能を乗せられると詰んでしまう\n\n\n- ソフトで出来ていることのハード化？\n- ハードで出来ていることのソフト化？\n\n## IoTのエンジニアリング\n\n- どう設計するか？\n  - データ重視？\n  - ソフトウェア重視？\n  - ハードウェア重視？\n\n\n- 今はスマホ連携が前提\n  - 人がスマホのアプリを使って動かしている\n  - 今後は人やスマホを介することが無くなるのではないか\n\n\n- 人やスマホを介さずにハード自体が通信する\n  - 大量で様々な形のデータ通信には次世代技術が必要\n  - MQTTやKVS、イベントループなど\n\n\n- 機器関連系が大事\n  - 帰宅したらこたつとエアコンと照明とテレビがついたらおもてなし感がある！笑\n\n\n- セキュリティも難しい\n  - ハードをハックされた場合どうする？\n  - ハードから来る通信を改ざんされた場合どうする？\n\n## IoTのビジネス\n\n- どう儲ける？\n  - 世界ででっかくビジネス？\n  - 尖った製品でニッチにビジネス？\n\n\n- 例えば\n  - ハードで儲ける\n  - アプリで儲ける\n  - データで儲ける\n\n\n- バレーボール選手のジャンプ練習管理デバイスを売るスタートアップ\n  - ニッチすぎるｗ\n  - プレイヤーごとのデバイスとアプリは無料\n  - チームのデータをまとめて分析管理するのは有料！\n\n\n- ウェアラブルで健康状態を取得して保険料を変えるとか？\n- ドライバーと位置の情報で首都高の広告をデジタルサイネージでリアルタイム配信とか？\n\n## IoTの最初の一歩\n\n- プログラマブルマイコン？\n- コミュニティ？\n- ハードウェアコンテスト？\n\n\n- Arduinoとかで電子工作してみるの良いよね\n- 車の会社が公開しているAPIを使って遊んでみるのも面白そう\n- Webの開発とあまり変わらないんような気がするｗ\n\n## WebエンジニアはIoTをどうあつかえば良いのか\n\n- また西海岸に先を越されたくない\n- ハードウェアは日本のお家芸なので頑張っていこう！\n"}
{"_id":{"$oid":"563d9b67bf652a600632d04b"},"title":"ひらがなの練習にスタイラス。","create":{"$date":"2015-02-02T00:16:00.000Z"},"modify":{"$date":"2015-02-02T00:16:00.000Z"},"categories":["Diary"],"image":null,"body":"\n最近、上の子がひらがなに興味を持ち始めました。\n\nひらがな練習アプリでよく遊んでいるのですが、iPadの画面は滑りにくい。\n\n表示される文字を大変そうになぞっているのがかわいそうだったので、スタイラスを購入しました。\n\n　\n\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00E0GV9IC/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/51WjWXN%2BULL._SL160_.jpg\" alt=\"The Friendly Swede 書き味滑らか　反応抜群　≪全世界共通 静電容量性 マイクロニットスタイラスペン 6本組≫　【マイクロニットハイブリッド繊維付きペン先、ゴム製ストラップ、クリーニングクロス付き】　スマホ、iPhone、タブレット等、全てのタッチスクリーン製品に対応  全長約11.4cm/4.5インチ　［カラー：ピンク、アクアブルー、グリーン、ブルー、レッド、パープル］\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00E0GV9IC/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eThe Friendly Swede 書き味滑らか　反応抜群　≪全世界共通 静電容量性 マイクロニットスタイラスペン 6本組≫　【マイクロニットハイブリッド繊維付きペン先、ゴム製ストラップ、クリーニングクロス付き】　スマホ、iPhone、タブレット等、全てのタッチスクリーン製品に対応  全長約11.4cm/4.5インチ　［カラー：ピンク、アクアブルー、グリーン、ブルー、レッド、パープル］\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.02.02\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003eThe Friendly Swede \u003cbr /\u003e売り上げランキング: 58\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00E0GV9IC/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003c!-- more --\u003e\n\n　\n\n[![包装][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/02/0001.jpg\n\n包装はシンプル。\n\n　\n\n[![内容物][0002]][0002]\n[0002]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/02/0002.jpg\n\n内容物はスタイラス本体6本、ゴム製のストラップ6本、クリーニングクロス1枚。\n\n　\n\n[![3歳児にも使いやすい][0003]][0003]\n[0003]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/02/0003.jpg\n\nペン先は導電性繊維になっているので滑りやすい！！\n\n3歳児にも持ちやすい大きさなので、ひらがなもなぞりやすそうでした。\n\n　\n\n[![壊れやすい][0004]][0004]\n[0004]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/02/0004.jpg\n\n残念ながら1歳児に噛まれて一瞬で壊れたので、乱暴に扱うと壊れやすいかもしれません。\n\n安いだけに耐久性は無いですが、普段使いくらいなら良さそうです。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d04c"},"title":"Amazonで余計なもん買ってみた。","create":{"$date":"2015-02-08T23:28:00.000Z"},"modify":{"$date":"2015-02-08T23:28:00.000Z"},"categories":["Diary"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/02/09/0003.jpg","body":"\n\u003ciframe class=\"bookmarklet hatena-embed\" src=\"http://hatenablog.com/embed?url=http%3A%2F%2Fkaishaku01.hatenablog.com%2Fentry%2F2015%2F01%2F29%2F194231\" title=\"夫がAmazonで余計なもんばかり買う - トウフ系\" style=\"border:none;display:block;margin:0 0 1.7rem;overflow:hidden;height:155px;width:100%;max-width:468px;\"\u003e\u003ca href=\"http://kaishaku01.hatenablog.com/entry/2015/01/29/194231\" target=\"_blank\"\u003e夫がAmazonで余計なもんばかり買う - トウフ系\u003c/a\u003e\u003c/iframe\u003e\n\n夫がAmazonで余計なもんばかり買う記事に触発されて、とびだせ! おすしを買いました！\n\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00NAN9L4K/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/41Zs5ipa9rL._SL160_.jpg\" alt=\"曙産業 いちどに10貫できる とびだせ! おすし CH-2011\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00NAN9L4K/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e曙産業 いちどに10貫できる とびだせ! おすし CH-2011\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.02.08\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003eakebono sangyo (2014-11-05)\u003cbr /\u003e売り上げランキング: 80\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00NAN9L4K/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n\n余計なもん買ってしまう夫は自分だけではないはずｗ\n\n\u003c!-- more --\u003e\n\n　\n\n[![包装][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/09/0001.jpg\n\n和風で派手なパッケージ。子供向けのいかにも『お寿司』って感じで好感が持てる。\n\n　\n\n[![本体][0002]][0002]\n[0002]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/09/0002.jpg\n\n軽くて丈夫そうな本体。\n\n　\n\n　\n\nでは、実際にやってみる。\n\n　\n\n　\n\n型枠にシャリを詰めて...\n\n　\n\n　\n\nネタを乗せて...\n\n　\n\n　\n\n下から一気に...\n\n　\n\n　\n\n[![一気に10貫！おすしが飛び出した！][0003]][0003]\n[0003]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/09/0003.jpg\n\nうおおおおおおおお！！！！！\n\nたのしいいいいいいいいいいい！！！！！\n\nおすしが10貫飛び出したあああああああ！！！！！１１１１１\n\n　\n\n　\n\n[![軍艦巻きも出来る！][0004]][0004]\n[0004]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/09/0004.jpg\n\n細く切った海苔を巻けば、軍艦巻きも出来る！！！！！！\n\nねぎとろ軍艦おいしいいいいいいいいい！！！！！１１１１１\n\n　\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/pb6ijUfxSAI\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\n\n公式YouTubeも見ているだけでも楽しいｗ\n\nベースとドラムが響くドンシャリ感はお寿司のシャリとかけているのだろうか。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d04d"},"title":"東京Node学園 15時限目 #tng15 参加メモ","create":{"$date":"2015-02-10T10:32:00.000Z"},"modify":{"$date":"2015-02-10T10:32:00.000Z"},"categories":["Node.js","io.js","Meetup"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/02/10/0001.png","body":"\n[![io.jsロゴ][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/10/0001.png\n\n[東京Node学園 15時限目](http://nodejs.connpass.com/event/11436/)に参加してきました。\n\n今回はio.jsが登場して初めての東京Node学園だったので、その話を目的に参加しました。\n\n\u003c!-- more --\u003e\n\n## 「io.jsについて」 by [@yosuke_furukawa](https://twitter.com/yosuke_furukawa)\n\n\u003cscript async class=\"speakerdeck-embed\" data-id=\"e85dc37735fe43999cb599b6b907087f\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"\u003e\u003c/script\u003e\n\n- io.jsとは\n    - Node.jsのfriendly fork\n\n\n- Node.jsとの違い\n    - オープンガバナンスモデル\n    - ハングアウトの録画と議事録の公開\n    - 合議制でissue/featureを処理する\n    - 新しくCommitterが6人追加\n    - アクティブな良い状況になっている\n\n\n- Node.jsとの機能面の違い\n    - v8 v4.1.0.14\n        - ES6の機能の一部がデフォルトで使える。\n            - koaがそのままで使える\n        - --es_stagingオプションで使える機能もある\n        - それ以外は個別にフラグが必要\n    - 新API追加 V8\n        - GCのheap統計を取ることが出来る\n    - その他\n        - Streamを簡単に作ることが出来る\n        - assertにdeepStrictEqualの追加\n        - util.debuglogの追加\n\n\n- Node.jsとの性能面の違い\n    - httpだけではあまり変化はない\n    - 全体的には10%程度向上\n\n\n- io.jsの最新ニュース\n    - [Hitler finds out about io.js](http://youtu.be/1IOukA10QeQ)\n\n\n- Node.jsユーザグループはどうするか\n  - 積極的に進めていく\n  - 皆で議論をして混乱を防ぎたい\n  - 具体的にはio.jsの翻訳と議論\n\n## 「extensible web」 by [@Jxck_](https://twitter.com/Jxck_)\n\n\u003ciframe src=\"//www.slideshare.net/slideshow/embed_code/44491273\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen\u003e \u003c/iframe\u003e\n\n- [The Extensible Web Manifesto](https://extensiblewebmanifesto.org/ja/)\n\n\n- Extensible Webとは\n    - 「つべこべ言わずにコードを書け！」ってこと\n\n\n- 現状は仕様が決まり、ベンダーが採用してから、初めて開発者が使える\n    - 先に仕様を決めるため、標準化は時間がかかる\n        - 開発者に降りてきた時にはこれじゃない感がある\n    - ベンダーが採用するまで開発者は使えない\n    - 開発者のところにくるまでに時間がかかる\n    - このループは限界がある\n\n\n- 開発者がもっと主導出来るようにしよう！\n    - 開発者が実装してみる\n    - 標準化団体が仕様化\n    - ベンダーが改善\n    - このループを回したい\n\n\n- そのためにはそれを実現出来るための Low Level API を用意しよう！\n    - 開発者がそのAPIを使っていいものを作ろう！\n\n詳しくはWebで [Extensible Web を支える低レベル API 群](http://jxck.hatenablog.com/entry/extensible-lowlevel-api)\n\n## 「ws の permessage deflateを実装した話とそれによりsocket.ioがどう変わるか」 by [@nkzawa](https://twitter.com/nkzawa)\n\n\u003cscript async class=\"speakerdeck-embed\" data-id=\"5a94ce04956b4cbeb5fd24cdf80e4225\" data-ratio=\"1.77777777777778\" src=\"//speakerdeck.com/assets/embed.js\"\u003e\u003c/script\u003e\n\n- permessage-deflate とは\n    - メッセージデータをdeflate圧縮する\n    - HTTPでいうとgzip圧縮のようなもの\n\n\n- permessage-deflate と http compression の違い\n    - httpはレスポンスにのみ適用\n    - websocketは双方向\n    - httpは圧縮データのheaderに圧縮パラメータを含める\n    - websocketはハンドシェイク時に圧縮パラメータを交換する\n\n\n- Context Takeover\n\n\n- 現状はChromeのみサポート\n\n\n- ブラウザでは設定変更が出来ない\n    - 常に有効かつデフォルト値で動作する\n\n\n- socket.ioではv1.4でサポートする\n    - 圧縮がデフォルト有効\n    - ポーリング時はHTTP圧縮\n    - メッセージ毎にon/offを切り替え可能\n        - ブラウザでは処理が呼ばれるが切り替えられない。\n\n\n- 地味だけどパフォーマンス改善にインパクトは大きいはず！\n\n## 「CodeOnMobile」 by [@dai_shi](https://twitter.com/dai_shi)\n\n\u003ciframe src=\"//dai-shi.github.io/codeonmobile/tng15_com_intro.html\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen\u003e \u003c/iframe\u003e\n\n- [CodeOnMobile](https://github.com/dai-shi/codeonmobile)\n    - GitHubのコードをブラウザ上で編集するWebアプリ\n\n\n- 何が出来るか\n    - GitHub連携してログイン\n    - リポジトリのファイルを編集\n    - diff確認\n    - コード編集\n    - コミット\n\n\n- 今後\n    - JSの自動フォーマット機能を入れたい\n\n## 「今できる通信高速化にトライしてみた」 by [@shibu_jp](https://twitter.com/shibu_jp)\n\n\u003ciframe src=\"//www.slideshare.net/slideshow/embed_code/44508626\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen\u003e \u003c/iframe\u003e\n\n- JavaScriptでgoto\n    - [shibukawa / goto.c](https://gist.github.com/shibukawa/315765020c34f4543665)\n\n\n- 今できるとは？\n    - Service Worker、Fetch APIはチャレンジすぎる\n    - 枯れている機能で頑張ってみる\n\n\n- LZ4コマンドで遊んでいたとある日の発見\n    - JSパーサでJSON(63MB)を生成\n    - gzip圧縮 → 2.8MB\n    - lz4圧縮 → 3.0MB\n    - lz4で圧縮後にgzip → 1.7MB\n\n\n- LZ4とは？\n    - 圧縮展開速度重視のアルゴリズム\n\n\n- gzipとの組み合わせでファイルサイズがgzip以下に減る\n    - 繰り返しの多いJSONやテキストでこの現象が起きる\n    - gzipはウェブのスタンダード\n    - lz4の高速性の秘訣はシンプルな展開コード\n    - ユーザにも嬉しいはず\n        - ファイルサイズ削減\n        - 通信高速化\n\n\n- 実装してみた\n\n\n- 速度のための工夫\n    - JSX(DeNA製の速度重視のaltJS)\n    - WebWorker\n        - 通信と展開コードは別スレッド\n        - ArrayBufferではコスト0でWorker間のやりとり\n\n\n- ベンチマーク\n    - expressでcompressionでgzipエンコード\n    - AppleのNetwork Link Conditionerで3G/LTEの通信環境を再現\n    - ダウンロードは確かに早い\n    - デコードのコストが毎回かかる\n\n\n- メリット・デメリット\n  - メリット\n      - 通信料削減は達成\n      - WebWorker側で通信しているので、クライアントコード外でService Workerのようにフックがかけられる\n      - サイズが小さいのでローカルストレージにやさしい\n  - デメリット\n      - 発熱が多少あった\n      - トータルのスループットは大幅には変わらない\n      - そもそもある程度大きいJSONでないと小さくならない\n\n\n- 改善の余地はまだまだありそう\n    - ブラウザ上で\n    - 展開コードの高速化\n    - ネイティブアプリではネイティブ側で展開出来る\n\n## 「Socket.IOを使ってライフゲームで遊ぶ」 by [@tako\\_black\\_](http://twitter.com/tako_black_)\n\n\u003ciframe src=\"//www.slideshare.net/slideshow/embed_code/44399338\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen\u003e \u003c/iframe\u003e\n\n- ライフゲームとは？\n    - 詳しくはニコ動で\n\n\n- ライフゲームのルール\n    - ある決まったルールにしたがって生死の情報が決まっていく\n\n\n- https://glacial-mountain-4867.herokuapp.com\n\n\n- socket.io楽しい！\n\n## 懇親会\n\n- SUSHI!!\n\n\n- [Node.jsエンジニアなら2014年内に知っておきたいPromise入門](http://blog.otakumode.com/2014/09/17/nodejs-promise/) を書いたTokyo Otaku Mode の方と雑談\n    - 結局async使ってますｗとのこと\n    - 既存機能がasyncなので移行は難しい\n\n\n- MongoDBJPの窪田さんがいた！\n"}
{"_id":{"$oid":"563d9b67bf652a600632d04e"},"title":"画像変換Night #imgconv 参加メモ","create":{"$date":"2015-02-18T10:01:00.000Z"},"modify":{"$date":"2015-02-18T10:01:00.000Z"},"categories":["imgconv","Meetup"],"image":null,"body":"\n[画像変換Night](http://connpass.com/event/11516/)\n\n業務で動的画像変換処理を実装しているので、参加してみた。\n\n発表はどれも内容が濃いものばかりで、普段はHTMLやJSなどフロントエンドばかりやっている自分とはレベルが違いすぎた。\n\n\u003c!-- more --\u003e\n\n## サムネイルマスタとgo-thumber [@harukasan](https://twitter.com/harukasan)\n\n\u003cscript async class=\"speakerdeck-embed\" data-id=\"bec42963cef94ecfb036392576d72114\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"\u003e\u003c/script\u003e\n\n- Webサービスにおける画像投稿機能事例\n    - オリジナル画像をそのまま配信\n        - 転送量が多い\n        - 画像の読み込みが遅い\n        - サムネイルをつくるのが大変\n        - サービスが大きくなるにつれてきつくなる\n    - アップロード時にサムネイル作成\n        - アップロード処理が大変\n        - 処理完了までにユーザを待たせてしまう\n        - サイズ変更が難しい\n    - リクエスト時にサムネイル作成\n        - 動的変換\n        - デザイン変更が簡単\n        - キャッシュしてくれればリクエストは少ない\n        - smalllight, tofu\n\n\n- サムネイル生成で困ること\n    - 生成元画像に依存\n    - 処理が面倒\n        - 様々な画像フォーマットに対応しないといけない\n\n\n- サムネイルマスタ\n    - サムネイル生成元となるマスタ画像\n    - 長年培われた技術\n        - 縦横の長さでクロップ位置を変える\n    - サムネイルマスタを基にしたサムネイル画像生成\n\n\n- JPEGにおける問題\n    - カラーモデルがなんでもいい\n    - JPEG/JFIF\n    - JPEG/EXIF\n\n\n- JPEG/EXIFにおける問題\n    - ICCプロファイルは解釈するのにモニタプロファイルは無視したり\n    - どう扱えばいいか難しい\n\n\n- CMYK JPEG 表示できない問題\n\n\n- JPEGにおける色空間\n    - 色空間がいろいろ違う\n\n\n- どうすればよいのか\n    - カラーマネジメントできるエンジニアが不在\n    - 結局諦める\n\n\n- サムネイルマスタで問題を緩和\n    - JPEG/JFIF互換のJPEGをつくる\n    - ICCプロファイルを考慮するとOKなユーザ、NGなユーザが存在する\n\n\n- go-thumber\n    - LibJPEG APIを生で叩いているため高速\n    - ベンチマーク\n        - smalllight(imlib2), smalllight(magick), go-thumber\n        - スループット, 平均処理時間\n        - imlib2と同じくらいの精度\n    - ブラインドテスト\n        - 50％以上の人に選ばれた\n        - go-thumberの圧勝\n    - スケーリングデコードのサイズ最適化\n    - サムネイルマスタとgo-thumber\n        - サムネイルマスタにいろいろな問題を押しこむことでサムネイル作成を簡単に\n        - go-thumberが安定しているのでうまくいっている\n\n## 実践ngx_small_light入門 [@cubicdaiya](https://twitter.com/cubicdaiya)\n\n\u003cscript async class=\"speakerdeck-embed\" data-id=\"bb564acf91c547cab543c8e131971163\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"\u003e\u003c/script\u003e\n\n- ngx_small_light\n\n\n- small_light_getparam_mode\n    - 画像変換のパラメータをquerystringに指定出来る\n\n\n- 外部サーバ(s3)にある画像をngx_small_lightで変換する\n\n\n- 画像ライブラリの比較\n\n\n- その他の変換モジュール\n    - mod_small_light\n        - 元祖SmalllightのApacheモジュール\n    - ngx_http_image_filter\n        - Nginxの標準モジュール\n    - go-thumber\n        - pixiv謹製画像変換プロキシサーバ\n        - 特定条件下では絶大な効果\n\n\n- worker_(processes|connections)\n    - worker_processesは多めに\n    - worker_connectionは少なめに\n    - ngx_small_ligheを使うときはngxがイベント駆動だということは忘れる\n\n\n- JPEG Hinting\n    - [本当は速いImageMagick](http://blog.mirakui.com/entry/20110123/1295795409)\n    - 数倍〜10倍速くなる\n\n\n- libjpeg-turbo\n    - x86とx86_64に最適化されたlibjpeg\n\n\n- OpenMP\n    - マルチプロセスが走る環境ではOpenMPを無効にするのがベストプラクティス\n\n\n- WebP\n    - Googleが開発しているフォーマット\n    - ngx_small_lightはImageMagickとGDで利用可能\n\n\n- Cache\n\n\n- まとめ\n    - 機能豊富なnginxモジュール\n    - 画像変換は重いので相応のチューニングをしましょう\n\n## ImageMagick + WebP (仮) [@mirakui](https://twitter.com/mirakui)\n\n\u003cscript async class=\"speakerdeck-embed\" data-id=\"228d6d6b4c994519b8f33c247b095886\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"\u003e\u003c/script\u003e\n\n- 今日覚えて帰って欲しいこと\n    - WebP\n        - ウェッピー！ウェブピーではない！\n\n\n- クックパッドでの採用事例\n    - iOS/Androidアプリの料理写真\n\n\n- WebPの欠点\n    - 対応環境が少ない\n    - 「右クリックで画像を保存」でJPEGが欲しい人\n        - facebookのwebp不詳事件\n        - ネイティブアプリなら問題無いのでは？\n\n\n- Tofu\n    - クックパッドにおける画像動的変換システム\n    - Apacheモジュール + ImageMagick\n\n\n- ImageMagickでWebP\n    - 6.6.8で対応\n    - 当時Tofuは6.7.6\n\n- ImageMagick-6.6.8でのWebP\n    - WebP変換時にQuality(画質)の指定ができない\n      - WebPの目玉である画質コントロールが出来ない\n      - 返還後は常に0になる\n    - メモリリーク\n    - 要するに壊れている\n\n\n- WebP対応するためにImageMagickのバージョンアップが強いられる\n\n\n- ImageMagickバージョンアップが怖い問題\n    - 出力画像の色味が変わってしまうことだけは避けたい\n\n\n- WebPのためにどのバージョンを使えばいいか\n    - すでに利用中(6.8.7以前)のシステム\n        - 6.8.6-8まであげれば必要十分\n        - 6.8.6-8でWindows対応もされている\n    - これから利用するシステム\n        - 最新版でOK\n\n## ImageMagickアレコレ [@yoya](https://twitter.com/yoya)\n\n\u003cscript async class=\"speakerdeck-embed\" data-id=\"6c6f0bd58ead455a9a6eb5eea78bf29b\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"\u003e\u003c/script\u003e\n\n- ImageMagickとは\n    - 画像処理が出来る何か\n    - コマンドが用意されている\n    - 各言語から利用できる\n    - 対応フォーマットはマイナーなものまで100種類以上\n    - MagickCoreというエンジンと、プラグイン的なcorder集合体と、ユーティリティ的なMagickWand APIと、結びつくコマンドラインや言語バインディングの仕組み\n\n\n- ImageMagickの開発傾向\n    - 良くも悪くも活発\n        - 新しい機能やフォーマットを取り込んでリリースするがよくデグレる\n    - APIのバイナリ互換とか気にしない\n        - キレてフォークしたのがGraphicsMagick\n\n\n- バージョン間の差異の確認\n    - 全バージョンをビルドして実行(手元に600個ｗ)\n    - バージョンごとの出力画像を並べて目視\n\n\n- QuantumDepth\n    - RGBの各値を 8bit/16bit どちらで持つか\n    - ImageMagickはデフォでQ16\n    - 普通の人ではQ8でもQ16でも違いはわからない\n    - Q8はQ16の使用メモリ半分で済む\n\n\n- 6.8.7-4のトピック\n    - OpenCLにガチ対応し始めた\n    - 減色処理の高速化\n        - GIFアニメーション作成も速くなるはず\n\n\n- 6.9.0-4のトピック\n    - Inline 形式出力変換 (ImageMagick-6.9.0-4)\n        - Web data スキーマ base64 inline 画像\n\n\n- GraphicsMagickのdis\n    - 最新のImageMagickと比べると速度はあまり変わらない\n    - GraphicsMagickはGIF最適化出来ない\n    - GraphicsMagickのデフォルトがQ8\n        - ImageMagickのデフォルトがQ16なのでQ8で比較しないとアンフェア\n\n## RICOH THETAの全天球画像でペーパークラフト作成 [@chihayafuru](https://twitter.com/chihayafuru)\n\n\u003ciframe src=\"//www.slideshare.net/slideshow/embed_code/44804931\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen\u003e \u003c/iframe\u003e\n\n- 全天球画像をつくる\n- RICOH THETAの静止画を加工\n- 印刷してペーパークラフト！\n- 加工処理をPazuCraftというアプリ化\n\n## 1px interpolation\n\n\u003ciframe src=\"https://docs.google.com/presentation/d/1R4htUndRQonOeTg35t17J8Lw4hWiHje0fWtm1xdIkds/embed?start=false\u0026loop=false\u0026delayms=3000\" frameborder=\"0\" width=\"512\" height=\"317\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"\u003e\u003c/iframe\u003e\n\n- 1px interpolation\n    - 1ピクセルの線を描画する際に、レンダラがどのドットに割り当てるか悩んで憤死する\n    - WebKit ブラウザに潜んでいるバグ\n\n\n- 再現方法\n    - 1pxに線を含む画像\n    - Chrome or SafariのHTMLCanvas\n        - 256x256以上\n    - アンチエイリアスをオフ\n    - Y軸方向に0.5pxずらす\n\n## とあるECサイトに動的変換を導入した話 [@yano3](https://twitter.com/yano3)\n\n\u003cscript async class=\"speakerdeck-embed\" data-id=\"c5dcb46989634a229eb6b14c56c79ead\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"\u003e\u003c/script\u003e\n\n- カラメル\n    - http://calamel.jp\n    - ショッピングモールサイト\n\n\n- 問題点\n    - 動的画像変換をしていない\n    - 画像の仕様が提供元によって違う\n\n\n- おから（仮）を作った\n    - 動的画像変換サーバ\n    - ngx_small_light\n    - ngx_mruby\n    - CDN\n\n\n- 今後\n    - WebP\n\n## nginx-image-server [@spesnova](https://twitter.com/spesnova)\n\n\u003cscript async class=\"speakerdeck-embed\" data-id=\"cade29cb53af43838406632e360ea73c\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"\u003e\u003c/script\u003e\n\n- WANTEDLY\n\n\n- ngx_small_lightの利用事例\n\n\n- ngx_small_light導入の経緯\n    - 動的にリサイズしたい！\n\n\n- WebP導入の経緯\n    - 通信量の改善\n\n\n- サーバ構成\n    - Nginxコンテナ\n    - Dockerデーモン\n    - CoreOSサーバ\n\n\n- 遭遇した問題\n    - WebPの変換がおかしい\n    - Nginxがcoredumpを吐く\n    - Nginxが異常に高負荷になる\n    - AWS上でCoreOSがクラッシュ\n        - kernelのバグ\n        - 継続的なOSアップデート\n\n\n- まとめ\n    - ImageMagickのビルド、一度動いたらイメージに焼いてしまいたい\n    - Dockerで全部同じフローでデプロイできる\n\n## JPEGのDCTブロックでコンテンツ指向のトリミング [@4_suke](https://twitter.com/4_suke)\n\n\u003ciframe src=\"//www.slideshare.net/slideshow/embed_code/44823028\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen\u003e \u003c/iframe\u003e\n\n- 構図を工夫して撮影した写真がサムネイルで残念になる\n\n\n- Facebook\n    - 顔認識の結果をベースにして、トリミング範囲を決めている\n    - 顔認識は計算リソースがかなり必要\n    - 顔以外は認識してくれない\n\n\n- JPEGエンコーダに手を加えればいい\n    - DCT変換して高周波成分の多い場所にコンテンツがある可能性が高い\n    - 高周波成分の中心位置を決め、トリミングをする\n\n\n- メリット\n    - JPEGの圧縮展開工程内のDCTをそのまま使うので追加計算が少ない\n    - 追加実装も少ない\n\n\n- デメリット\n    - JPEGのみに対応\n    - 文字が入っているコンテンツが苦手\n\n\n- pixiv方式とどっちがいいか\n    - アプローチの仕方が違いそう\n    - 定量評価するしかないのでは\n\n## デザイン作業効率化「ImageHayabusa」 [@gunta85](https://twitter.com/gunta85)\n\n\u003cscript async class=\"speakerdeck-embed\" data-id=\"df61d4e8908b43a3aff189d609d191be\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"\u003e\u003c/script\u003e\n\n- http://hayabusa.io\n\n\n- デザイナー、フロントエンド、ネイティブエンジニアの間でタイムロスがあった\n    - 素材の切り出しやspriteの出力を毎回依頼しないといけない\n    - これをオンデマンドで可能にした\n\n\n- メリット\n    - 作業が楽になる\n\n\n- PSDやイラストをREST APIで変換が出来る\n    - もちろんWebP対応！\n\n- nw.jsでMacアプリ化\n    - ローカルでも使える\n"}
{"_id":{"$oid":"563d9b67bf652a600632d04f"},"title":"IoT は総合格闘技である #devsumiB 参加メモ","create":{"$date":"2015-02-19T05:05:00.000Z"},"modify":{"$date":"2015-02-19T05:05:00.000Z"},"categories":["devsumi","Meetup"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/02/19/0002.jpg","body":"\n[![IoT は総合格闘技である][0002]][0002]\n[0002]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/19/0002.jpg\n\n[IoT は総合格闘技である](http://event.shoeisha.jp/devsumi/20150219/session/645/) 参加メモ。\n\n\u003e今注目を集めいているキーワードIoT（Internet of Things）。組込み機器や設備機器が従来の人中心のITにつながり、生み出されたビッグデータを活用されていく、それがIoTが実現する世界です。いうまでもなくIoTシステムの構築では組込み系、PC系、モバイル系、IT系全ての要素が総合的に必要です。\n本セッションでは、IoTの概要とマイクロソフトがIoT向けに提供する様々なテクノロジーを紹介するとともに、Windows以外のプラットフォームも含めたソフトウェア開発方法を解説します。\n\n\u003c!-- more --\u003e\n\n## IoTとは\n\n### IoTとは\n\n- 組み込み系だとセンシング系の話が多い\n- IT系だとビッグデータ系の話が多い\n\n### IoTの構成要素\n\n- デバイス\n- サービス\n- 開発・運用・管理\n- クライアント\n\n### IoTは総合格闘技である！\n\n- モノ, IT, クライアント, インフラ, セキュリティ, ハード, デザイン\n- 様々な要素が重なりあっている！\n\n### Demo\n- VisualStudio + Galileo\n  - 赤外線センサーで距離を測る\n- Gadgetter\n    - センサーとデバイスの繋げ方をビジュアルで指示してくれる\n\n### IoTにおける接続\n\n- 1:1は特に問題ない\n- 数が多いと取りこぼしたり、レイテンシが問題になってくる\n- サーバ側には大量データをさばくことが求められる\n- Event Hub\n\n### データ・経験・戦略\n\n- データを溜めて、分析して、創造の礎とする\n- System Analythics\n- Machine Learning\n    - 予測、分類\n- Excelによるデータ表示と分析\n    - Power Query でクラウドからデータを取得\n    - DBから直接接続することも可能\n    - Power View で動的なグラフを描画することが出来る\n\n### Demo\n\n- London Underground Manager\n    - ロンドンの地下鉄の状況を表示するシステム\n- TKE Remote Monitoring\n    - ドイツのエレベータの状況を表示するシステム\n- 日本マイクロソフトオフィス 30F\n    - .Net Framework\n    - 温度、湿度、大気圧、明るさを記録中\n\n### 鍛錬\n\n- 守\n    - 基本に忠実に\n- 破\n    - 応用してみる\n- 離\n    - 新しい概念を\n- 習得して使いこなし価値を創造する\n\n　\n\n## まとめ\n\n- IoTでつながろう\n    - 様々なデバイス、プラットフォーム、立場の人やプロフェッショナル\n    - IoYT普及コミニュティ 3.15 キックオフ\n"}
{"_id":{"$oid":"563d9b67bf652a600632d050"},"title":"AngularJSの今とこれから - フロントエンドエンジニア座談会 #devsumiD 参加メモ","create":{"$date":"2015-02-19T04:02:00.000Z"},"modify":{"$date":"2015-02-19T04:02:00.000Z"},"categories":["devsumi","Meetup"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/02/19/0001.jpg","body":"\n[![AngularJSについて][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/19/0001.jpg\n\n[AngularJSの今とこれから - フロントエンドエンジニア座談会](http://event.shoeisha.jp/devsumi/20150219/session/660/) 参加メモ。\n\n\u003eフロントエンドの技術革新は目まぐるしいスピードで進んでいますが、そんな中、今最も注目を集めているのが「AngularJS」でしょう。最近では、企業向けアプリ開発でも適用が進み、亜種も出現しエコシステムの拡大が進んでいます。しかし、標準技術であるWebComponentsは日々進化し、またFacebookのReact.jsが注目を集め出すなど、競合も負けてはいません。AngularJSの時代に終わりは来るのか！？AngularJSエンジニアを集め、活用するメリット、アーキテクチャの良さを再考してみましょう。\n\n\u003c!-- more --\u003e\n\n\u003ciframe src=\"//www.slideshare.net/slideshow/embed_code/44865301\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen\u003e \u003c/iframe\u003e\n\n　\n\n## AngularJSについて\n\n- Google製の〜飛ばしますｗ\n- HTML拡張\n    - directive\n    - 既存のタグに新しい意味を与える\n- SPAを想定して作られている\n    - データバインディング\n    - Ajax\n    - ルーティング\n\n　\n\n## よくある質問\n\n### どういうケースで使えばいいですか？\n\n- 管理画面\n- ユーザマイページ\n- CRUD Apps\n- Hybrid Apps\n\n### mobileはどうですか？\n\n- 速度を求めなければ大丈夫\n\n### custom attributeはdata-xxxが仕様だ！\n\n- 5通りの書き方の中で出来る\n\n### SEO対策は？\n\n- 基本的に無理です\n\n### jQuery Pluginは使えますか？\n\n- AngularJSをわかっていないと難しいかも\n- AngularJS用のPluginがあるのでオススメ\n\n### 参考になるサイトはありますか？\n\n- [js STUDIO](http://js.studio-kingdom.com)\n- [Egghead.io](https://egghead.io)\n- [ドットインストール](http://dotinstall.com)\n- [AngularJS Ninja](http://angularjsninja.com)\n- [Ionic](http://ionicframework.com)\n\n## おしらせ\n\n- [ng-japan 2015](http://ngjapan.org)\n    - ng-confに続くイベント\n\n　\n\n## 座談会\n\n### AngularJSをどうゆうふうに活用しているか\n- CRUD系アプリ\n- 管理画面やユーザ画面\n- Wordpressとくっつけたりしたこともあるけどもうやらない\n- SNS\n\n### AngularJSでデバッグがつらい\n- [Batarang](https://chrome.google.com/webstore/detail/ighdmehidhipcmcojjgiloacoafjmpfk)というデバッグツールを使うといい\n- あとは普通にconsole.log\n- [Karma](http://karma-runner.github.io/0.12/index.html), [Protractor](http://angular.github.io/protractor/#/) でテスト\n\n### なぜAngularJSを選んだのか\n\n- 当時はBackbone.jsと悩んだが、フルスタックなAngualarJSを選択\n- 現状ならReact.jsも選択肢にもちろん入る\n\n### AngularJSのバージョンはいくつ？\n\n- 1.2から1.3で速度が上がった\n\n### XSSへの対応は？\n\n- AngularJSはセキュリティが結構しっかりしている\n\n### どんなページに使ってはいけないか\n\n- アニメーション系\n    - ゴリゴリ使うのは苦手なのでオススメしない\n- SEO部分\n    - JSは実行してくれない\n    - クローラーにはPhantomJSで対応\n    - 鉄板というよりは黒魔術感がある\n\n### チーム作業はやりやすい？\n\n- AngularJSのルールに従うのでコードの質がある程度揃う\n\n### ハマったポイントは？\n\n- directiveを覚えるのが大変\n- UI Bootstrapのドラッグ＆ドロップ\n- template uiを非同期で取得するとテストが落ちる\n- jQueryで行ったDOMの変更がAngularJSに伝わらない\n\n### AngularJSの注意ポイント\n- AngularJSの学習コストが高いので人員の確保が難しい\n- オライリー本と夕日本がオススメ\n\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873116678/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/515Z%2BlXDi4L._SL160_.jpg\" alt=\"AngularJSアプリケーション開発ガイド\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873116678/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAngularJSアプリケーション開発ガイド\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.02.19\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003eBrad Green Shyam Seshadri \u003cbr /\u003eオライリージャパン \u003cbr /\u003e売り上げランキング: 285,884\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4873116678/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4844336681/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/51gDda3RiUL._SL160_.jpg\" alt=\"AngularJSリファレンス\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4844336681/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAngularJSリファレンス\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.02.19\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003e池添 明宏 金井 健一 吉田 徹生 \u003cbr /\u003eインプレス \u003cbr /\u003e売り上げランキング: 7,113\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4844336681/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n\n## まとめ\n\n### AngularJSもだいぶ枯れてきた\n- 日本語ドキュメントも増えてきた\n- disられるようにもなってきたｗ\n\n\n### AngularJS万能説ではないと思っている\n- 何でもかんでもAngularJSを使うのはNG\n- メリットデメリットを判断して、jQueryやPureScriptでも良い\n"}
{"_id":{"$oid":"563d9b67bf652a600632d051"},"title":"JavaScriptフレームワークの歩き方 #devsumiD 参加メモ","create":{"$date":"2015-02-19T06:13:00.000Z"},"modify":{"$date":"2015-02-19T06:13:00.000Z"},"categories":["devsumi","Meetup"],"image":null,"body":"\n[JavaScriptフレームワークの歩き方](http://event.shoeisha.jp/devsumi/20150219/session/662/) 参加メモ。\n\n\u003eAngular.jsやBackbone.jsを始めとした『MV* フレームワーク』とカテゴライズされるJavaScriptのフレームワークは今、まさに百花絢爛。本セッションでは、そんなJavaScriptフレームワークの歩き方について、『もう迷わない』ではなく、正しい『迷い方』について紹介します。\n\n\u003c!-- more --\u003e\n\n## 有名フレームワークの比較\n\n### AngularJS\n\n- 利点\n    - 簡単に利用出来る\n    - サポートが厚い\n    - 多くのユーザがいる\n- 欠点\n    - 学習コスト\n    - 『関心の分類』の法則違反\n    - 『魔法』だらけ\n\n### Ember.js\n\n- 利点\n    - \"The Ember Way\"という一貫した哲学\n    - 多くの問題が解決済み\n    - 優れたドキュメント\n- 欠点\n    - \"The Ember Way\"は諸刃の剣\n    - 柔軟性に欠ける\n        - あえてそうなっているけれど\n\n### Backbone.js\n\n- 利点\n    - 小さくよくテストされたモジュール郡\n- 欠点\n    - すべての問題に対する解決を提示していない\n    - Backbone.jsベースのフレームワークの必要性\n        - 自分たちのシステムのためにカスタマイズが必要\n\n### React.js\n\n- 利点\n    - ハイパフォーマンスレンダリング\n    - 単体でも使えるViewレイヤ\n        - Backbone.jsと組み合わせて使うことも出来る\n- 欠点\n    - テンプレートのシンタックスがJSX\n    - ファイルサイズが42Kと重い\n- 他のフレームワークと組み合わせて使う\n    - [Flux](http://facebook.github.io/flux/)\n    - [delorean](http://deloreanjs.com)\n    - [Fluxxor](http://fluxxor.com)\n\n### Ampersand.js\n\n- 利点\n    - 柔軟性と結合性のバランスが良い\n    - プラグインが多く存在\n- 欠点\n    - 『若い』\n    - IE8以下のサポートなし\n\n\n### Aurelia.js\n\n- 利点\n    - 柔軟性と結合性のバランスが良い\n    - ES6/ES7へのフォーカス\n    - モジュール性能が高い\n- 欠点\n    - 『若い』\n        - 全体のエコシステムのようなものはまだまだ\n    - IE11以下のサポートなし\n\n　\n\n## 問題\n\n### ベストなツールを探し出すことがゴールではない\n\n- どんな問題を解決しようとしているか考えることが重要\n\n\n### 問題を理解する\n\n- プロジェクトのステージはどこなのか\n- AngularJSの開発のスピードはプロトタイプには向いている\n- Ember.jsの堅さは管理画面で作るのに向いている\n- 徐々にMV*の設計に舵を切る\n    - ファイルサイズは大きく変わらない\n\n### 変更に強い設計とは？\n\n- Webは25歳\n- 変わらないことは変わり続けること\n    - Web Components\n    - EC6/7\n- 変わることを前提とする\n    - 変更しやすさ、再利用のしやすさ\n\n### 変わり続けること\n\n- Node.js \u0026 Ecosystem\n    - JavaScriptを取り込んで新たな哲学をもたらした\n\n### JavaScriptを学ぶ\n\n- Backbone.js Underscore.jsのソースを読むべき\n\n### CSS,HTMLを蔑ろにしてはいけない\n\n- HTMLが汚いとCSSも汚い\n- これらの存在がJSにも重要になってくる\n\n### フレームワークを選択するポイント\n\n- 囲い込みがからないこと\n- 設計がどれだけ頑固か\n- 不要な複雑性はないか\n- テストがしやすいか\n\n## まとめ\n\n- Enough with the JavaScript already!\n- Programming would be pretty boring if everyone agreed.\n    - 違う意見があるのは当たり前なので、参考の一つになれば良い\n"}
{"_id":{"$oid":"563d9b67bf652a600632d052"},"title":"「DevOps」やってみた。そして、気づいたこと、陥ること、見直すところ。 #devsumiB 参加メモ","create":{"$date":"2015-02-20T02:10:00.000Z"},"modify":{"$date":"2015-02-20T02:10:00.000Z"},"categories":["devsumi","Meetup"],"image":null,"body":"\n[「DevOps」やってみた。そして、気づいたこと、陥ること、見直すところ。](http://event.shoeisha.jp/devsumi/20150219/session/682/)\n\n\u003eDevOpsは特定の規格ではないので、その解釈、やり方、売り方、向かう所など、皆同じではありません。とは言え、それぞれが何かの課題を解決しよう、開発と運用の現場をより良くしようという「思い」から始まっているのは同じではないでしょうか。本セッションでは、そんな思いからそれぞれが考えたDevOpsを「やってみた」現場から、特に多くの方が初めに取り組むことが多い「リリースとデプロイメント」の自動化を中心に「気づいたこと」や「陥ってしまったこと」を振り返ると共に「見直すべきポイント」をIBM DevOps ソリューションを切り口に解説します。\n\n\u003c!-- more --\u003e\n\n## DevOpsとは\n\n- 創り続けること、生かし続けること\n    - 使い続けてもらえるモノを提供\n    - 創り生かし続けられる仕組み\n\n\n- 何を目指している(た)のか？\n    - 創り届ける距離/時間の短縮\n\n\n- やったメニュー\n    - 小さなチームの小さな改革\n    - CIを進めてみたはいいが...\n    - Opsから変えてみたら...\n\n　\n\n## 小さなチームの小さな改革\n\n- きっかけはビジネスの拡大/拡張\n- 無秩序な環境からの脱却\n- そのためにDevOps\n\n\n- 最初にやったこと\n  - 自動化の検討\n      - テスト自動化\n      - デプロイ自動化など\n\n\n- 早めに気付けたこと\n    - 部分最適ではなく全体最適\n    - やるべき2つを選択\n        - デプロイのしくみを再構築\n        - 将来を見据えた構成の見直し\n\n\n- 次にやったこと\n    - デプロイのしくみを再構築\n        - オンプレ→クラウド\n        - 標準化と自動化\n    - 将来を見据えた構成の見直し\n        - デプロイの再構築\n    - IBM UrbanCode\n    - IBM Rational Team Concert\n\n\n- 陥ったこと\n    - コスト、期間が想定上にかかった\n        - 「やる」は人数や規模に正比例しない\n    - 思った以上に「やる」ことが多い\n    - 小さくても「やる」範囲は広い\n\n　\n\n## CIを進めてみたはいいが...\n\n- 標準化部門の施策としてDevOpsを推進\n    - 生産性上げるにはCIでしょ！\n\n\n- やったこと\n    - ソース管理サーバの用意\n    - 共通ビルドサーバの用意\n\n\n- 気づいたこと\n    - ソース管理がバラバラで共通ビルドサーバに乗せられない\n\n\n- 陥ったこと\n    - ビルド用サーバのばらまき\n\n\n- 見直すべきところ\n    - コスト以外も気にする\n    - 最終的なビルドを意識した構成管理\n\n　\n\n## Opsから変えてみたら...\n\n- ビジネスの改革\n    - コスト削減\n    - リリース時期の死守\n\n\n- やったこと\n    - 自動化、運用絡みでデプロイの自動化\n        - 運用人員\"0\"を目指す\n    - 自動化でリリース作業のスピードアップ\n\n\n- 気づいたこと\n    - アプリ、チームごとのデプロイ手順が別々で標準化/パターン化しにくい\n    - 開発と運用のギャップ\n    - 運用側の開発スキル不足\n        - コードは読めるが、開発経験が少ない\n    - 運用人員\"0\"は無理\n        - デプロイ以外にも作業があった\n\n\n- 陥ったこと\n    - 6ヶ月の予定が1年\n    - 要員を追加しコスト3倍\n\n\n- 誰が「やるか」\n    - 部署/部門/個人の得意/不得意を見極める\n        - だれでもコードが書けるわけではない\n\n\n- 何から進めるか\n    - 自動化対象の優先付け\n        - 効果のある作業を選択\n        - 80:20の法則\n        - 自動化での効果の8割は2割の置き換えでできることが多い\n    - 急がば廻れ\n\n　\n\n## さらに...\n\n- IBM DevOps Solution\n    - Mobile\n    - Cloud\n    - その他\n\n\n- Shift Left\n\n\n- benefits of shifting left\n    - 早い時期（より左）から統合テストを繰り返す\n    - リリース管理におけるリスク計算\n        - 数が多くなればなるほどトラブルが起きやすい\n        - 早めに小さく統合しておく\n"}
{"_id":{"$oid":"563d9b67bf652a600632d053"},"title":"ドメイン駆動設計再入門 #devsumiC 参加メモ","create":{"$date":"2015-02-20T03:56:00.000Z"},"modify":{"$date":"2015-02-20T03:56:00.000Z"},"categories":["devsumi","Meetup"],"image":null,"body":"\n\u003e『エリック・エヴァンスのドメイン駆動設計の日本語訳の出版から、まもなく4年が経とうとしています。以前はぶ厚さのせいで「興味はあるけれども読みきれない」という方も多く、「DDD難民」などという言葉も生まれました。翻訳の出版に伴って読むことへの敷居は下がったものの、現在はまた別の問題が生まれているようです。つまり、DDDを適用しようとしても、具体的に何をするべきなのかがわからず、モデリング偏重になって全体としてのバランスが崩れてしまっているプロジェクトが出てきている印象があります。\n本セッションでは、DDDで語られている内容を整理した上で、実際のプロジェクトに適用するためにどう解釈していけばよいのかをご説明します。\n\n\u003c!-- more --\u003e\n\n## DDD nutshell\n\n- モデルとは\n    - MVC 1979\n    - モデルとは、知識の象徴である\n    - メンタルモデルを写し取るもの\n- MVCからDCIへ\n\n### 本に書かれていること\n\n- 第1部 ドメインモデルを機能させる\n    - モデルの基本的な用法\n        - モデル駆動設計\n        - ユビキタス言語\n    - モデルはソフトウェアの中核となる\n    - モデルはビジネスパーソンと開発者をつなぐ\n        - コミュニケーションのツールでもある\n\n\n- 第2部 モデル駆動\n    - モダル実装のために\n        - レイヤ化アーキテクチャ\n        - オブジェクト指向\n    - ドメイン層とはモデルが息づく場所\n\n\n- 第3部 より深い洞察へ向かうリファクタリング\n    - モデルの深化\n        - 時間をかけてモデルは深まっていく\n        - 深いモデルを作るためのテクニック\n\n\n- 第4部 戦略的設計\n    - モデリングのスケールアップ\n        - モデルの整合性\n        - 蒸留\n        - 大規模構造\n\n　\n\n## DDDの魅力\n\n- ある抽象度でモデリングは絶対に必要\n- ソフトウェアとしての本筋\n- SIの現場への福音\n    - バランスが大事\n\n　\n\n## システムの中のDDD\n\n\u003c!-- -\n    - 全てを統合する\n    - 複雑さは囲い込む\n        - 慣れた人に任せるしかないよね --\u003e\n\n\n- 何を対象とするのか\n    - システムの外側で起きることへの配慮を忘れがち\n    - 顧客と同じものを見る\n\n\n- 深化するのはモデルだけなのか\n    - システム全体のフィードバックループを合わせて設計するべき\n    - チームも成長する\n\n　\n\n## まとめ\n\n- DDDは素晴らしい構想\n- システム全体で考えよう\n\n　\n\n## 最後に\n\n- 世界に対するエンジニアの貢献はコードの優劣では決まらない\n- 最先端の技術をやってるからとかそうゆうことだけではない\n- システムが世の中に対してどんな貢献をしているかが価値になる\n"}
{"_id":{"$oid":"563d9b67bf652a600632d054"},"title":"要注意！？効果の出ない技術研修に共通する３つのこと #devsumiC 参加メモ","create":{"$date":"2015-02-20T03:06:00.000Z"},"modify":{"$date":"2015-02-20T03:06:00.000Z"},"categories":["devsumi","Meetup"],"image":null,"body":"\n[要注意！？効果の出ない技術研修に共通する３つのこと](http://event.shoeisha.jp/devsumi/20150219/session/691/)\n\n\u003e技術研修というと、一定の期間で必要な技術を教えていく詰め込み式でやってしまいがちです。しかし、個々の知識レベルや成長速度が大きく異なるために、これでは全員の成長に繋がりません。今回は、効果の出ない技術研修の共通点をご紹介しながら、「全員が確実に習得する」ためのポイントをお伝えしていきます。\n\n\u003c!-- more --\u003e\n\n## CodeCampとは\n\n- 現役エンジニアのマンツーマンレッスン\n  - ビデオ通話\n\n- 対応言語\n    - 当初はPHPから始まり増加中\n\n- 特徴\n    - 課題＆レビューが中心\n    - 個別指導\n        - 講義型より個別型の方が平均点が高い\n\n　\n\n## 技術研修の必要性について\n\n- 業界全体が人材不足\n    - 補うために人材育成が重要\n- 学生のレベル\n    - 日本は情報系学科の学生が少ない\n    - 絶対数が少ないので新卒は未経験者が多くなりがち\n\n　\n\n## 効果の出ない3つのこと\n\n### 研修期間が固定\n\n- 配属前に技術研修を行う理由\n    - 技術水準を一定にしたい\n    - 現場教育は負担が大きい\n    - 理想を刷り込む\n\n\n- 1ヶ月の外部研修で発生した問題\n    - 現場配属したら知識が足らず現場に迷惑\n    - 配属先を変更しOJTで追加研修\n\n\n- 3ヶ月の社内研修で発生した問題\n    - 必要な知識が多く詰め込み式で中途半端になりがち\n    - 未経験者にはハードルが高くて様々な不満や批判\n\n\n- 研修期間が固定では全員が求める水準に到達しない\n    - 半分程度\n\n\n- CodeCampの実績\n    - JavaScriptで簡単なWebアプリを作成してみる\n    - 課題＆レビューで理解度を確認\n    - 一定水準クリアまでのレッスン回数(1回40分)\n        - 2~28回でブレが大きい\n\n\n- 研修期間は早抜け方式\n    - 研修の目的が達成出来ない\n\n### 優れた教師がいない\n\n- 文部科学省\n    - 教育の成否は教師にかかっているといっても過言ではない\n    - 条件\n        - 教職に対する**強い情熱**\n        - **教育の専門家**としての確かな力量\n        - 総合的な人間力\n\n\n- 教師次第で脱落者が発生\n    - 未経験者の教育の成否は教師にかかっているといっても過言ではない\n\n\n- CodeCampの実績\n    - 生徒が教師を選ぶことが出来る\n    - 教育スキルの違いは生徒からの人気へ顕著に現れる\n\n\n- 優れたエンジニア ≠ 優れた教師\n    - 出来る人は出来ない人の気持ちがわからないことが多い\n    - 未経験者だった人の方が教師には向いているかも\n\n\n- 研修担当は教育スキルで選別\n    - エンジニアとしての知識に加え、研修担当者には教育スキルが必要\n\n### 個別フォローがない\n\n- 分からないことがあったら質問してください\n    - 大丈夫です！←全然大丈夫じゃないｗ\n\n\n- CodeCampの実績\n    - 課題はコードレビュー合格まで再提出\n    - 課題クリアまでのコードレビュー回数\n        - 1回でクリア出来るのは全体の8％\n        - 9割以上の生徒が指摘や改善の余地がある\n\n\n- 理解度や改善点は千差万別\n    - 1:1の面談やレビューで個別の状況把握が必須\n\n\n- 個別フォローを必ず行う\n\n　\n\n## まとめ\n\n- 研修期間が固定\n    - 完全早抜けではなくても、理解度によって時期をずらす\n\n\n- 優れた教師がいない\n    - 教えるのがうまいか、未経験者に対する理解で選ぶべき\n\n\n- 個別フォローがない\n"}
{"_id":{"$oid":"563d9b67bf652a600632d055"},"title":"モバイル時代でも戦える - Webエンジニアの歩み #devsumiD 参加メモ","create":{"$date":"2015-02-20T01:03:00.000Z"},"modify":{"$date":"2015-02-20T01:03:00.000Z"},"categories":["devsumi","Meetup"],"image":null,"body":"\n[モバイル時代でも戦える - Webエンジニアの歩み方](http://event.shoeisha.jp/devsumi/20150219/session/697/)\n\n\u003ePCよりもモバイルが売上を上回り、インターネットトラフィックもモバイルが主流の時代に突入。モバイルはネイティブが主力と言われ、従来のWebの領域が食いつぶされつつある状況です。こうした中で、Webはモバイルでどんな役割を果たすのか？エンジニアは何にフォーカスしていけば良いのか？\nレスポンシブWebデザインやHTML5ハイブリッド開発、UI/UXといった、モバイルに関わる専門家を集め、これからを探ります。\n\n## 座談会\n\n- Apache Cordova\n    - Webの技術でNativeアプリを作る開発ツール\n    - Webの技術でやっていけると思っていたら全然違っていた。\n        - Nativeで書かなければいけないところは多い\n\n\n- NativeとWebの違い\n    - Apple Designの型の上でやっていくNativeと何でも入れることが出来るWeb\n    - モバイルファースト\n        - パソコン優先の考え方を変える必要がある\n        - 上の人ほどPCファーストの考え方が多い\n    - モバイルならではのUI/UXデザイン\n        - アクションを起こした時の効果やアニメーションまでデザインに含める\n\n\n- 業務アプリでは\n    - BYODなどクロスプラットフォームが必要になる場合もある\n    - Cordovaが非常に有用\n\n\n- NativeとWebの差は開発者が楽できるとか？\n    - WebエンジニアがいるからといってHybridが楽になるわけではない\n    - HybridにはHybridのノウハウも必要になってくる\n\n\n- Browser vs Native\n    - HTMLは元々マークアップ言語でドキュメントを表示するためのもの\n    - Nativeの方がどうしてもリッチ\n    - ホーム画面にアプリアイコンがあると、サービスが近くなる\n\n\n- Webのメリットはオープンなところ\n    - アプリはストアからインストールしなければ始まらない\n    - Webの場合はランディングしたらすぐ体験させることが出来る\n\n\n- Webエンジニアがこの先生きのこるには\n    - なぜWebかNativeか、考えて行かなければならない\n    - プロトタイピングにCordovaは使える\n    - NativeとHybridを使い分けていけば良い\n"}
{"_id":{"$oid":"563d9b67bf652a600632d056"},"title":"SONY の 4Kハンディカム FDR-AX30 で E7系 を撮る。","create":{"$date":"2015-02-25T15:29:00.000Z"},"modify":{"$date":"2015-02-25T15:29:00.000Z"},"categories":["camera"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/02/26/0001.jpg","body":"\nSONYの4Kハンディカム FDR-AX30を買いました。\n\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00S7KOEZM/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/31qzvB2JLcL._SL160_.jpg\" alt=\"ソニー デジタル4Kビデオカメラレコーダー「FDR-AX30」（ブラック）内蔵メモリー：64GBSONY 4Kハンディカム FDR-AX30-B\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00S7KOEZM/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eソニー デジタル4Kビデオカメラレコーダー「FDR-AX30」（ブラック）内蔵メモリー：64GBSONY 4Kハンディカム FDR-AX30-B\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.02.25\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003eSony \u003cbr /\u003e売り上げランキング: 98,909\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00S7KOEZM/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n\n子供が幼稚園に入って、ビデオカメラの必要性をひしひしと感じたので、思い切って4Kハンディカムに手を出してみました。\n\n\u003c!-- more --\u003e\n\n## 開封の儀\n\n### パッケージ\n\n[![パッケージ][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/26/0001.jpg\n\nパッケージは正方形に近いデザイン。\n\n### 本体\n\n[![本体][0002]][0002]\n[0002]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/26/0002.jpg\n\n銀座のソニーストアで[FDR-AX100](http://www.amazon.co.jp/exec/obidos/ASIN/B00HVRG7MU/yug1224-22/ref=nosim/)を触ってみたことがあったので、小さく感じるけれど、重量は約585gで意外とズシッとくる。\n\n### 付属品\n\n[![付属品][0003]][0003]\n[0003]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/26/0003.jpg\n\nリチャージャブルバッテリーパック(NP-FV70)、ACアダプター(AC-L200D)、電源コード、HDMIマイクロ端子ケーブル、USB接続サポートケーブル、取扱説明書、保証書\n\n本体から伸びているUSBが短いのでそれを延長するケーブルは便利。\n\n撮ってそのまま編集せずにテレビに映したい人も多いだろうし、HDMIケーブルがついているのも嬉しい。\n\n### メモリーカード\n\n[![SDXC][0004]][0004]\n[0004]: https://dl.dropboxusercontent.com/u/3189929/images/2015/02/26/0004.jpg\n\nFDR-AX30は内蔵メモリ60GBなのですが、不安なのでSDXCカードも合わせて購入。\n\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00J3KA8JG/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/51SIByHvwLL._SL160_.jpg\" alt=\"Transcend SDXCカード 128GB UHS-I U3対応 (最大読込速度95MB/s,最大書込速度60MB/s) U3シリーズ 4K動画撮影 無期限保証 TS128GSDU3\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00J3KA8JG/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eTranscend SDXCカード 128GB UHS-I U3対応 (最大読込速度95MB/s,最大書込速度60MB/s) U3シリーズ 4K動画撮影 無期限保証 TS128GSDU3\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.02.25\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003eトランセンド・ジャパン (2014-04-15)\u003cbr /\u003e売り上げランキング: 1,149\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00J3KA8JG/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n\n## 撮り比べ\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1OErYD2dVv4\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\n\n先に所有していた SONY ILCE-7 α7 と 北陸新幹線(長野新幹線)のE7系を撮り比べてみました。\n\nα7 は 1440x1080 29.97p MP4、AX30 は 3840×2160 29.97p XAVC S で撮影して、動画は1920x1080 29.97pで作成しているのでフォーマットがバラバラ。\n\nα7はAVCHDで撮れば良かったかもしれないけれど、そうするとフレームレートが変わってしまうのよね。\n\n## まとめ\n\n2/20に届いてすぐ、2/22のお遊戯会に臨んだのですが、5年前くらいのVictorのHDビデオカメラの画質と比べたら、4Kは圧倒的。\n\n観客席からズームしても、ステージ上の子供たちの顔がはっきり撮れました。\n\n結局撮影した動画を見るのはTVやiPhone/iPadなので、FullHDに縮小しても全然問題無し。\n\n保存用マスターデータと観賞用データを作ってみたけれど、今後どうやって管理していくか悩んでいます。\n\nとりあえずバックアップはS3にぶち込んでいますけど。。。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d057"},"title":"在来線長距離通勤者は新幹線に乗るべき。","create":{"$date":"2015-03-09T10:49:00.000Z"},"modify":{"$date":"2015-03-09T10:49:00.000Z"},"categories":["Diary"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/03/09/0001.jpg","body":"\n普段から在来線で新橋まで、ドアtoドアで2時間半通勤をしている。\n\n学生時代も3時間通学だったので、もうすぐ9年目になる。\n\n学生時代は普通車で立ちっぱなしだったけれど、一回グリーン車に乗ると当たり前のように乗るようになってしまった。\n\n　\n\n\u003ciframe class=\"bookmarklet hatena-embed\" src=\"http://hatenablog.com/embed?url=http%3A%2F%2Fwww.jreast.co.jp%2Ftabidoki%2Fgreen%2Fabout.html\" title=\"えきねっと（JR東日本）｜旅どきnet＞普通列車グリーン車＞普通列車グリーン車とは\" style=\"border:none;display:block;margin:0 0 1.7rem;overflow:hidden;height:155px;width:100%;max-width:468px;\"\u003e\u003ca href=\"http://www.jreast.co.jp/tabidoki/green/about.html\" target=\"_blank\"\u003eえきねっと（JR東日本）｜旅どきnet＞普通列車グリーン車＞普通列車グリーン車とは\u003c/a\u003e\u003c/iframe\u003e\n\n　\n\n980円払えば、ぎゅうぎゅう詰めの車内とおさらば出来て、リクライニングチェアで快適に過ごせるなんて最高。\n\nしかし、グリーン車に乗ったとしても、結局所要時間は変わらない。\n\n\u003c!-- more --\u003e\n\n特急列車に乗っても間に合わない程の寝坊をした時『Suica定期券用特急料金』の存在に気が付いた。\n\n　\n\n\u003ciframe class=\"bookmarklet hatena-embed\" src=\"http://hatenablog.com/embed?url=https%3A%2F%2Fwww.jreast.co.jp%2Fsuica%2Fuse%2Fshinkansen%2Fcommute.html\" title=\"JR東日本：Suica＞利用方法＞新幹線の利用＞新幹線停車駅が2駅以上含まれる「Suica定期券」での利用\" style=\"border:none;display:block;margin:0 0 1.7rem;overflow:hidden;height:155px;width:100%;max-width:468px;\"\u003e\u003ca href=\"https://www.jreast.co.jp/suica/use/shinkansen/commute.html\" target=\"_blank\"\u003eJR東日本：Suica＞利用方法＞新幹線の利用＞新幹線停車駅が2駅以上含まれる「Suica定期券」での利用\u003c/a\u003e\u003c/iframe\u003e\n\n　\n\n新幹線停車駅が2駅以上含まれるSuica定期券の場合、その区間内ならば通常よりも安い料金で新幹線に乗ることが出来る。\n\n熊谷-東京の場合ならば、1,180円。\n\nぎゅうぎゅう詰めの車内とおさらば出来て、リクライニングチェアで快適に過ごし、なおかつ在来線よりも速い。\n\n在来線長距離通勤者で新幹線に乗らない手はない。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d058"},"title":"gulpでSVGをWebフォント化する","create":{"$date":"2015-03-10T09:00:00.000Z"},"modify":{"$date":"2015-03-10T09:00:00.000Z"},"categories":["gulp","Node.js","io.js"],"image":"https://raw.githubusercontent.com/YuG1224/gulp-task-svg-webify/master/doc/sample.png","body":"\n[YuG1224/gulp-task-svg-webify](https://github.com/YuG1224/gulp-task-svg-webify)\n\nWebフォント化するために[IcoMoon](https://icomoon.io/)にSVGをアップロードするのが面倒なので、SVG画像をminifyして、Webフォント化するgulpタスクを作りました。\n\n参考にしたのはここ。\n\n\u003ciframe class=\"bookmarklet hatena-embed\" src=\"http://hatenablog.com/embed?url=http%3A%2F%2Fwhiskers.nukos.kitchen%2F2014%2F12%2F23%2Fgulp-consolidate.html\" title=\"これからはじめるGulp（23）：gulp-consolidateでgulp-iconfontで作ったアイコンフォントのシンボル一覧HTMLを作る | Webデザイン、フロントエンド系の技術に関する備忘録 - whiskers\" style=\"border:none;display:block;margin:0 0 1.7rem;overflow:hidden;height:155px;width:100%;max-width:468px;\"\u003e\u003ca href=\"http://whiskers.nukos.kitchen/2014/12/23/gulp-consolidate.html\" target=\"_blank\"\u003eこれからはじめるGulp（23）：gulp-consolidateでgulp-iconfontで作ったアイコンフォントのシンボル一覧HTMLを作る | Webデザイン、フロントエンド系の技術に関する備忘録 - whiskers\u003c/a\u003e\u003c/iframe\u003e\n\n\u003c!-- more --\u003e\n\n## 構造\n\n全体の構造は以下。\n\n`src/svg/`以下にSVG画像を置けば、`dist`以下に生成される仕組みになっています。\n\n``` bash\n.\n├── README.md\n├── dist\n│   ├── css\n│   ├── fonts\n│   ├── index.html\n│   └── svg\n├── doc\n├── gulpfile.coffee\n├── node_modules\n├── package.json\n└── src\n    ├── svg\n    ├── template.css\n    └── template.html\n```\n\n## gulp minify\n\nsvgのminifyには`gulp-svgmin`を使います。\n\n`./src/svg/`以下に置いたSVGを圧縮して、`./dist/svg/`以下に出力します。\n\n``` coffee\ngulp = require \"gulp\"\nforeach = require \"gulp-foreach\"\nsvgmin = require \"gulp-svgmin\"\nconcat = require \"gulp-concat\"\n\n# minify\ngulp.task \"minify\", () -\u003e\n  return gulp.src [\"src/svg/*.svg\"]\n    .pipe foreach (stream, file) -\u003e\n      filename = file.path.replace file.base, \"\"\n      stream.pipe svgmin()\n        .pipe concat filename\n    .pipe gulp.dest \"dist/svg\"\n```\n\n## gulp webify\n\nminifyしたSVGを元に`gulp-iconfont`と`gulp-consolidate`でwebfont化します。\n\ntemplate用のcssとhtmlは[cognitom/symbols-for-sketch](https://github.com/cognitom/symbols-for-sketch/tree/master/templates)にあるtemplateを自分が好きなHandlebars形式に改変して使わせて頂きました。\n\nWebフォント化した時にデフォルトではUnicodeの私用領域の最初E001から埋めていくのですが、SoftBankの絵文字と衝突してしまい環境によっては正しく表示されなくなります。\n\n\u003ciframe class=\"bookmarklet hatena-embed\" src=\"http://hatenablog.com/embed?url=http%3A%2F%2Fja.wikipedia.org%2Fwiki%2F%25E6%2590%25BA%25E5%25B8%25AF%25E9%259B%25BB%25E8%25A9%25B1%25E3%2581%25AE%25E7%25B5%25B5%25E6%2596%2587%25E5%25AD%2597\" title=\"携帯電話の絵文字 - Wikipedia\" style=\"border:none;display:block;margin:0 0 1.7rem;overflow:hidden;height:155px;width:100%;max-width:468px;\"\u003e\u003ca href=\"http://ja.wikipedia.org/wiki/%E6%90%BA%E5%B8%AF%E9%9B%BB%E8%A9%B1%E3%81%AE%E7%B5%B5%E6%96%87%E5%AD%97\" target=\"_blank\"\u003e携帯電話の絵文字 - Wikipedia\u003c/a\u003e\u003c/iframe\u003e\n\nスマホ利用もあると考えて、`options.startCodepoint`を`0xF001`にしてみました。\n\n``` coffee\ngulp = require \"gulp\"\nforeach = require \"gulp-foreach\"\niconfont = require \"gulp-iconfont\"\nconsolidate = require \"gulp-consolidate\"\nconcat = require \"gulp-concat\"\nrs = require(\"run-sequence\").use(gulp)\n\noptions =\n  fontName: \"webfont\"\n  className: \"wf\"\n  startCodepoint: 0xF001\n\n# webify\ngulp.task \"webify\", () -\u003e\n  return gulp.src [\"dist/svg/*.svg\"]\n    .pipe iconfont options\n    .on \"codepoints\", (codepoints, options) -\u003e\n      for val in codepoints\n        val.codepoint = val.codepoint.toString(16).toUpperCase()\n      engine = \"handlebars\"\n      consolidateOptions =\n        glyphs: codepoints,\n        fontName: options.fontName\n        fontPath: \"../fonts/\"\n        className: options.className\n\n      gulp.src \"src/template.css\"\n        .pipe consolidate engine, consolidateOptions\n        .pipe concat \"#{options.fontName}.css\"\n        .pipe gulp.dest \"dist/css/\"\n\n      gulp.src \"src/template.html\"\n        .pipe consolidate engine, consolidateOptions\n        .pipe concat \"index.html\"\n        .pipe gulp.dest \"dist/\"\n\n    .pipe gulp.dest \"dist/fonts/\"\n```\n\n## gulp webserver\n\nSVGを編集しながら、生成されたWebフォントをブラウザで確認するために、webserverのタスクも作りました。\n\n`src/svg/*.svg`の変更を監視してminify,webifyが実行され、`dist`の変更を監視してlivereload機能が動きます。\n\n[![debug画面][0001]][0001]\n[0001]: https://raw.githubusercontent.com/YuG1224/gulp-task-svg-webify/master/doc/sample.png\n\n``` coffee\ngulp = require \"gulp\"\ndel = require \"del\"\nrs = require(\"run-sequence\").use(gulp)\nwebserver = require \"gulp-webserver\"\n\n# watch\ngulp.task \"watch\", () -\u003e\n  gulp.watch [\"src/svg/*.svg\"], () -\u003e\n    rs \"clean\", \"minify\", \"webify\"\n\n# webserver\ngulp.task \"webserver\", [\"compile\", \"watch\"], () -\u003e\n  gulp.src \"dist\"\n    .pipe webserver\n      livereload: true\n\n# clean\ngulp.task \"clean\", (done) -\u003e\n  del [\"dist/*/*\"], done\n\n# initialize\ngulp.task \"initialize\", (done) -\u003e\n  del [\"dist\"], done\n\n# compile\ngulp.task \"compile\", (done) -\u003e\n  rs \"initialize\", \"minify\", \"webify\", done\n```\n\n## まとめ\n\n``` bash\n$ gulp compile    // minify, webify を1回のみ実行\n$ gulp webserver  // 変更を監視して、minify, webify を実行し、ブラウザ画面を自動更新\n```\n\n途中、`gulp-iconfont`が最低500x500以上のSVGが対象ということに気づかず、Webフォントが崩れてしまう現象にハマった。\n\n素材が500x500以上というのが気になるけれど、ひとまずこれでIcoMoonにアップしなくてもローカル環境でWebフォント化することが出来るようになった。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d059"},"title":"Spigen シン・フィットA レビュー。","create":{"$date":"2015-03-21T16:07:00.000Z"},"modify":{"$date":"2015-03-21T16:07:00.000Z"},"categories":["iPhone"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/03/21/0007.jpg","body":"\n普段は基本的には裸族。\n\n会社支給のiPhoneが6に交換になったので、ついでに私物の6 Plusもケースに入れることにしました。\n\n[![パッケージ][0001]][0001]\n\n購入したのは、iPhone 6用にシン・フィットA（サテンシルバー）、iPhone 6 Plus用にシン・フィットA（ガンメタル）。\n\n\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00JH883ZK/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/31u4GSDkIdL._SL160_.jpg\" alt=\"iPhone 6 ケース Spigen Apple iphone 4.7 (2014) シン・フィットA (国内正規品) (サテン・シルバー 【SGP10942】)\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00JH883ZK/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eiPhone 6 ケース Spigen Apple iphone 4.7 (2014) シン・フィットA (国内正規品) (サテン・シルバー 【SGP10942】)\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.03.21\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003eSpigen SGP \u003cbr /\u003e売り上げランキング: 9,564\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00JH883ZK/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00JH82Y82/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/51ToBLUoY2L._SL160_.jpg\" alt=\"iPhone 6 Plus ケース Spigen シン・フィットA Apple iPhone (5.5) (国内正規品) (ガンメタル 【SGP10890】)\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00JH82Y82/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eiPhone 6 Plus ケース Spigen シン・フィットA Apple iPhone (5.5) (国内正規品) (ガンメタル 【SGP10890】)\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.03.21\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003eSpigen \u003cbr /\u003e売り上げランキング: 31,339\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00JH82Y82/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003c!-- more --\u003e\n\n## 装着前\n\n[![外側][0002]][0002]\n\nAppleマークが見えるようにくり抜かれているけれど、透明な固めのフィルムが貼ってあるので、その部分だけ傷ついてしまうなんてことは無さそう。\n\n[![内側][0003]][0003]\n\n薄さが特徴になっている製品ということもあって、内側にクッション性のあるものが貼られているわけではないので、衝撃吸収能力はほぼ無し。\n\n## 装着後\n\n[![装着後][0004]][0004]\n\nエッジ部分が画面よりも出っ張っているように感じるので、最初は少し違和感がある。\n\n慣れてしまえば特に問題は無し。\n\n[![Appleマーク][0005]][0005]\n\niPhone背面色とケース色が同じではないので、意外と気になってしまう人はいるかも。\n\nツルツルした素材なのでBunker Ringも使えるし、分厚いケースが嫌いな人にはオススメ。\n\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/03/21/0001.jpg\n[0002]: https://dl.dropboxusercontent.com/u/3189929/images/2015/03/21/0002.jpg\n[0003]: https://dl.dropboxusercontent.com/u/3189929/images/2015/03/21/0003.jpg\n[0004]: https://dl.dropboxusercontent.com/u/3189929/images/2015/03/21/0004.jpg\n[0005]: https://dl.dropboxusercontent.com/u/3189929/images/2015/03/21/0005.jpg\n"}
{"_id":{"$oid":"563d9b67bf652a600632d05a"},"title":"boot2docker up で password を聞かれるときの対処法。","create":{"$date":"2015-04-08T00:09:00.000Z"},"modify":{"$date":"2015-04-08T00:09:00.000Z"},"categories":["Docker"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/04/0001.png","body":"\n`boot2docker up`でpasswordを聞かれるようになってしまったので解決方法。\n\n## 事象\n\n`boot2docker up`で`docker@localhost`のpasswordを聞かれ、何回入力しても聞かれ続ける。\n\n``` terminal\n$ boot2docker up\nWaiting for VM and Docker daemon to start...\n...........docker@localhost's password:\ndocker@localhost's password:\ndocker@localhost's password:\ndocker@localhost's password:\n```\n\n\u003c!-- more --\u003e\n\n## 解決方法\n\n[\"boot2docker up\" asking for password #405](https://github.com/boot2docker/boot2docker/issues/405) と同様に`boot2docker upgrade`するだけ。\n\n``` terminal\n$ boot2docker upgrade\ndocker is up to date (1.5.0), skipping upgrade...\nboot2docker is up to date (v1.5.0), skipping upgrade...\nLatest release for boot2docker/boot2docker is v1.5.0\nDownloading boot2docker ISO image...\nSuccess: downloaded https://github.com/boot2docker/boot2docker/releases/download/v1.5.0/boot2docker.iso\n\u0009to /Users/yug1224/.boot2docker/boot2docker.iso\n```\n\n`boot2docker delete`してから起動し直したら成功しました。\n\n``` terminal\n$ boot2docker delete\n$ boot2docker init\n$ boot2docker up\nWaiting for VM and Docker daemon to start...\n........................ooooooooooooooooooooooooooo\nStarted.\nWriting /Users/yug1224/.boot2docker/certs/boot2docker-vm/ca.pem\nWriting /Users/yug1224/.boot2docker/certs/boot2docker-vm/cert.pem\nWriting /Users/yug1224/.boot2docker/certs/boot2docker-vm/key.pem\n\nTo connect the Docker client to the Docker daemon, please set:\n    export DOCKER_HOST=tcp://192.168.59.107:2376\n    export DOCKER_CERT_PATH=/Users/yug1224/.boot2docker/certs/boot2docker-vm\n    export DOCKER_TLS_VERIFY=1\n```\n"}
{"_id":{"$oid":"563d9b67bf652a600632d05b"},"title":"Gunma.web#19でDTについてLTしてきた。","create":{"$date":"2015-05-09T05:27:00.000Z"},"modify":{"$date":"2015-05-09T05:27:00.000Z"},"categories":["Node.js","ImageMagick","Meetup"],"image":null,"body":"\nGW前の2015/04/25(土)に[Gunma.web#19](https://gunmaweb.doorkeeper.jp/events/22312)で動的画像変換について発表してきました。\n\n\u003ciframe src=\"//www.slideshare.net/slideshow/embed_code/key/pSIEQ73RkzW0GL\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen\u003e \u003c/iframe\u003e\n\n※実際のDEMOではDTらしくもっとエロい画像を使いましたｗ\n\n\u003c!-- more --\u003e\n\n構成機能はだいたい下記の通り。\n\n- Web/APサーバはNode.js\n    - [node-gridfs-image-converter](https://github.com/YuG1224/node-gridfs-image-converter)\n- MongoDB GridFS に画像を格納\n- [node-imagemagick-native](https://github.com/mash/node-imagemagick-native)で画像処理\n- Nginx でリバースプロキシ\n    - リクエストパラメータ毎にキャッシュコントロール\n\n最初は[nginx-gridfs](https://github.com/mdirolf/nginx-gridfs)でGridFSから画像を取得し、[nginx_small_light](https://github.com/cubicdaiya/ngx_small_light)で動的画像変換構成にしたかったのですが、バージョンが新しいMongoDBでSharding/Replicaset環境の場合、nginx-gridfsが上手く動かなかったので、画像の取得も変換も配信も全てNode.jsを経由することにしてみました。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d05c"},"title":"Golang製HTTP負荷テストツールVegetaを使ってみた。","create":{"$date":"2015-05-29T14:31:00.000Z"},"modify":{"$date":"2015-05-29T14:31:00.000Z"},"categories":["Golang"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/05/29/0001.jpg","body":"\n負荷試験をすることになったので、jMeterやApache Benchではなくて、Vegetaを使ってみた。\n\n## Vegeta とは\n\nGolang製のHTTP load testing tool。\n\n[README](https://github.com/tsenart/vegeta)のVegetaに惚れたｗ\n\n[![Vegeta][0001]][0001]\n\n\u003c!-- more --\u003e\n\n## install\n\nMac OS Xならbrewで一発。\n\n``` bash\n$ brew install vegeta\n```\n\nその他の場合はGoのコマンドで。\n\n``` bash\n$ go get github.com/tsenart/vegeta\n$ go install github.com/tsenart/vegeta\n```\n\n## 使い方\n\n### シナリオを用意\n\n`\u003cMethod\u003e \u003cURL\u003e`というようにアクセスするURLを順番に記述していくだけでOK。\n\n例えばこんな感じ。\n\n``` txt\nGET http://localhost:7826\nGET http://localhost:7826/archive\nGET http://localhost:7826/2015/02/26/fdr-ax30\n```\n\n## Attack!!!\n\n*くらえ!!こいつが超ベジータのビッグ・バン・アタックだ!!!*\n\n実際にリクエストを投げるときは`vegeta attack`コマンドを使う。\n\n`-rate=100`で秒間100リクエスト、`-duration=10s`でそれを10秒間ということ。\n\n``` bash\n$ vegeta attack -rate=100 -duration=10s -targets=targets.txt \u003e results.txt\n```\n\n## Report\n\n実行結果の確認は`vageta report`コマンドで。\n\n`-reporter`で出力方法を選ぶことが出来る。\n\n### text\n\n一番基本的なテキスト。`-reporter`を指定しない場合もこれ。\n\n``` bash\n$ vegeta report -inputs=results.txt -reporter=text\nRequests\u0009[total, rate]\u0009\u0009\u00091000, 100.10\nDuration\u0009[total, attack, wait]\u0009\u00099.992317035s, 9.989999919s, 2.317116ms\nLatencies\u0009[mean, 50, 95, 99, max]\u0009\u00093.743189ms, 3.344156ms, 5.421547ms, 58.951463ms, 58.951463ms\nBytes In\u0009[total, mean]\u0009\u0009\u000938100431, 38100.43\nBytes Out\u0009[total, mean]\u0009\u0009\u00090, 0.00\nSuccess\u0009\u0009[ratio]\u0009\u0009\u0009\u0009100.00%\nStatus Codes\u0009[code:count]\u0009\u0009\u0009200:1000  \nError Set:\n```\n\n### json\n\njsonでの出力。`jq`と一緒に使うと見やすい。\n\n``` bash\n$ vegeta report -inputs=results.txt -reporter=json | jq .\n{\n  \"latencies\": {\n    \"mean\": 3743189,\n    \"50th\": 3344156,\n    \"95th\": 5421547,\n    \"99th\": 58951463,\n    \"max\": 58951463\n  },\n  \"bytes_in\": {\n    \"total\": 38100431,\n    \"mean\": 38100.431\n  },\n  \"bytes_out\": {\n    \"total\": 0,\n    \"mean\": 0\n  },\n  \"duration\": 9989999919,\n  \"wait\": 2317116,\n  \"requests\": 1000,\n  \"rate\": 100.10010091172254,\n  \"success\": 1,\n  \"status_codes\": {\n    \"200\": 1000\n  },\n  \"errors\": []\n}\n```\n\n### plot\n\ncanvasを使ったグラフでの出力。ブラウザで開くとPNG画像もダウンロード出来る。\n\n``` bash\n$ vegeta report -inputs=results.txt -reporter=plot \u003e plot.html\n```\n\n[![Plot][0002]][0002]\n\n## まとめ\n\n残念ながらjMeterほど高機能では無い。\n\nけれども、シンプルな実行方法だったりグラフが出力出来たり、リッチな部分もあるので、なかなか使いやすいと思う。\n\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/05/29/0001.jpg\n[0002]: https://dl.dropboxusercontent.com/u/3189929/images/2015/05/29/0002.png\n"}
{"_id":{"$oid":"563d9b67bf652a600632d05d"},"title":"RG1/1 RX-78-2 ガンダム Ver.GFTを見てきました。","create":{"$date":"2015-06-14T09:59:00.000Z"},"modify":{"$date":"2015-06-14T09:59:00.000Z"},"categories":["camera","GUNDAM"],"image":"https://c1.staticflickr.com/1/324/18777255846_5e458f984e_z.jpg","body":"\nダイバーシティ東京にある「RG1/1 RX-78-2 ガンダム Ver.GFT」\n\nずっと見に行きたかったので、ガンダムを覚えた息子と見に行ってきました。\n\n潮風公園にあった時は足元でバイトしていたので毎日のように見上げていたのですが、新規デカールとディテールアップパーツ追加のマグネット・コーティングバージョンということで、ちょっと雰囲気違っていましたね！\n\n[![](https://c1.staticflickr.com/1/511/18806123801_89f5fe0c47_z.jpg)](https://flic.kr/p/uDQipP)\n\nご尊顔。\n\n\u003c!-- more --\u003e\n\n　\n\n[![](https://c1.staticflickr.com/1/324/18777255846_5e458f984e_z.jpg)](https://flic.kr/p/uBhkYs)\n\nビルと。\n\n　\n\n[![](https://c1.staticflickr.com/1/554/18180933674_bb7f31cf82_z.jpg)](https://flic.kr/p/tGA3aG)\n\nランドセル。\n\n　\n\n\n建物と対比するとガンダムは意外と小さい。しかし市街地戦を想像しやすいのでよりガンダムっぽいなと。\n\n時間的に動くところやプロジェクションマッピングは見られなかったのが残念ですが、帰宅してから「BB戦士 RX-78-2 ガンダム Ver.GFT」をパチ組して余韻に浸っていました。\n\nSDなのにデカール細かいし多すぎるしで辛かったｗｗｗ\n"}
{"_id":{"$oid":"563d9b67bf652a600632d05e"},"title":"Apple Watch Sportを買いました。","create":{"$date":"2015-06-21T13:50:00.000Z"},"modify":{"$date":"2015-06-21T13:50:00.000Z"},"categories":["Apple","Apple Watch"],"image":"https://c1.staticflickr.com/1/303/19017210925_ef95045020_z.jpg","body":"\n発売からもう2ヶ月経ちますが、ようやくApple Watchを買いました。\n\n[![](https://c1.staticflickr.com/1/303/19017210925_ef95045020_z.jpg)](https://flic.kr/p/uYubfZ)\n\n購入したのは Apple Watch Sport で 42mmスペースグレイアルミニウムケースとブラックスポーツバンド のモデル。\n\nAppleCare+ for Apple Watch Sport も追加したので、総額￥54,600 (税別)！\n\n\u003c!-- more --\u003e\n\n## 数日使ってみて\n\n数日使ってみた感想としては、通知を見ることが出来るのはやっぱり便利。\n\niMessageやTwitter、メールの確認が出来ると、iPhoneをポケットから出して無駄に起動するなんてことが無くなる。\n\nただしiPhoneの方で通知をオフにしているものは、Apple Watchでも見ることが出来ないので「嫁にバレたくないLINE通知をこっそり確認...」なんてことが出来ないのが残念なところ。\n\n個人的には、プッシュ型のサービスとは凄く相性が良いなと。\n\n[IFTTT](https://ifttt.com/)ならいろんなものとすでに連携出来るし、ジオフェンスで近くのクーポンが通知されてそのままApple Payで利用なんてことが出来たら面白そう。\n\nでもまだ対応しているアプリも少ないし、Watch OS 2もプレビュー版なので、これからに期待。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d05f"},"title":"Blog を Polymer で Web Conponents化しました。","create":{"$date":"2015-07-07T17:12:00.000Z"},"modify":{"$date":"2015-07-07T17:12:00.000Z"},"categories":["Web Components"],"image":"https://c4.staticflickr.com/4/3807/19500732345_a526e4de35_z.jpg","body":"\n普段このブログは、Markdownで記事を書いて、gulpを使って静的サイトとして出力しています。\n\n少しずつ記事が増えてくるのに比例して、出力待ち時間と出力されるファイルの量も増えてきたので、Polymer で Web Components化してみることにしました。\n\n## Web Components化部分\n\n出力されるファイルの中で冗長になっている部分をWeb Components化。\n\n[![](https://c4.staticflickr.com/4/3807/19500732345_a526e4de35_z.jpg)](https://flic.kr/p/vHdmkc)\n\n具体的にはキャプチャの赤線で囲ってある「各記事のタイトル」「各記事の内容」「カテゴリ一覧」の部分をWeb ComponentsのHTMLに出力するようにしました。\n\n\u003c!-- more --\u003e\n\n## 予想\n\n- 出力待ち時間   ： 激減！！\n- 出力ファイル量 ： 激減！！\n\nとなるのではないかと思っていました。\n\n## 結果\n\n- 出力待ち時間   ： 微減...\n- 出力ファイル量 ： 激減！！\n\nビルドのタスクが悪いのかもしれませんが、出力待ち時間は **1.2min** から **1.1min** 程度であまり変わらず。\n\nファイルサイズについては、**212MB** を **4MB** まで減らすことが出来ました。\n\n```jade\n// before\narticle\n  header.page-header\n    include meta\n    h1.entry-title\n      |{{{title}}}\n    // シェアボタン\n    include share\n  .entry-content\n    |{{{content}}}\n  footer\n    // シェアボタン\n    include share\n    // ad\n    include ad\n    include meta\n```\n\n```jade\n// after\nblock webcomponents\n  link(rel=\"import\", href=\"/webcomponents/{{filename}}.html\")\n\narticle\n  header.page-header\n    #{\"meta-{{filename}}\"}\n    #{\"title-{{filename}}\"}\n    // シェアボタン\n    include share\n  #{\"content-{{filename}}\"}\n  footer\n    // シェアボタン\n    include share\n    // ad\n    include ad\n    #{\"meta-{{filename}}\"}\n```\n\n今までは各記事でincludeの部分が展開されて長いHTMLを生成していました。\n\nWeb Components では Custom Elementが挿入されて中身を共有することが出来るようになるので、ファイルサイズ削減には効果的です。\n\nただし、Web Components の仕組み上 iframe のように動的に import するので、大量に Web Components を設置していると、読込が遅いように感じました。\n\nvulcanizeを使えば、先にimportファイルを展開しておいてくれるので、HTTPリクエストを減らすことが出来るけど、それって元も子もない気がしてやっていません。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d060"},"title":"hubot で毎分URL監視をして Slack に通知する。","create":{"$date":"2015-07-17T12:30:00.000Z"},"modify":{"$date":"2015-07-17T12:30:00.000Z"},"categories":["hubot","CoffeeScript","Slack"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/07/17/0001.png","body":"\nWebサイトのステータスをhubotで監視するスクリプトを作ってみました。\n\n毎分0秒にリクエストを投げて、statusCodeが400以上の場合にSlackに通知します。\n\n[![Slack画面][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/07/17/0001.png\n\nこんなメッセージが流れます。\n\n\u003c!-- more --\u003e\n\n## external-monitoring.coffee\n\nhttps://gist.github.com/YuG1224/a006b63da60e762ded6c\n\n```coffee\n# Description:\n#   URL external monitoring\n#\n# Dependencies:\n#   \"hubot-slack\": \"^3.3.0\"\n#   \"hubot-slack-attachement\": \"^1.0.1\"\n#\n# Commands:\n#   None\n\nCronJob = require(\"cron\").CronJob\nPromise = require(\"q\").Promise\nrequest = require \"request\"\n\nurls = [\n  \"https://aaa.example.jp\"\n  \"https://bbb.example.jp\"\n]\n\nopt =\n  method: \"HEAD\"\n  headers:\n    \"User-Agent\": \"hubot-external-monitoring\"\n\nmodule.exports = (robot) -\u003e\n\n  getStatusCode = (url) -\u003e\n    return new Promise (resolve, reject) -\u003e\n      opt.url = url\n      request opt, (err, res) -\u003e\n        if err then reject err\n        else\n          resolve\n            statusCode: res.statusCode\n            url: res.request.uri.href\n\n  sendSlack = (statusCode, url) -\u003e\n    data =\n      content:\n        fallback: \"CRITICAL: #{url} statusCode #{statusCode}\"\n        text: \"CRITICAL: \u003c#{url}|#{url}\u003e statusCode #{statusCode}\"\n        color: \"#e84050\"\n      channel: \"alert\"\n      username: \"bot\"\n      icon_emoji: \":shit:\"\n    robot.emit \"slack.attachment\", data\n\n  job = new CronJob\n    cronTime: \"0 * * * * *\"\n    onTick: () -\u003e\n      for val in urls\n        getStatusCode val\n          .then (value) -\u003e\n            if value.statusCode \u003e= 400\n              sendSlack value.statusCode, value.url\n          .catch (err) -\u003e\n            console.error err\n  job.start()\n```\n\nBodyは必要ないので、HEADメソッドでリクエスト。\n\n通常のアクセスと区別出来るように、User-Agentは`hubot-external-monitoring`にしておきました。\n\nメッセージは [Attachments](https://api.slack.com/docs/attachments) のフォーマットを使ってちょっとリッチに表現。`hubot-slack-attachement`のモジュールに依存しています。\n\n```\n$ npm install --save hubot-slack-attachement\n```\n"}
{"_id":{"$oid":"563d9b67bf652a600632d061"},"title":"GitBucket の WebHook Event を hubot で Slack に流す。","create":{"$date":"2015-08-14T13:34:00.000Z"},"modify":{"$date":"2015-08-14T13:34:00.000Z"},"categories":["hubot","CoffeeScript","Slack","GitBucket"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/08/14/0001.png","body":"\n[GitBucketのWebHook Event](https://github.com/takezoe/gitbucket/wiki/API-WebHook#webhook-events)をhubotで受けてSlackに流すスクリプトを作ってみました。\n\n[![Slack画面][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/08/14/0001.png\n\nIssue/PR作成、コメント投稿、Issue/PR Closeの時にメッセージが流れます。\n\n\u003c!-- more --\u003e\n\n## gitbucket2slack.coffee\n\nhttps://gist.github.com/YuG1224/966f2a8b21534568cd5f\n\n``` coffee\n# Description:\n#   GitBucket to Slack\n#\n# Dependencies:\n#   \"hubot-slack\": \"^3.3.0\"\n#   \"hubot-slack-attachement\": \"^1.0.1\"\n#\n# Commands:\n#   None\n\nmodule.exports = (robot) -\u003e\n  @robot = robot\n  @robot.router.post \"/hubot/gitbucket2slack/:room\", (req, res) =\u003e\n    room = req.params.room\n    body = req.body\n\n    if body.payload\n\n      payload = JSON.parse body.payload\n      repoUrl = payload.repository.html_url\n      repoName = payload.repository.full_name\n      action = payload.action\n      comment = payload.comment\n      issue = payload.issue\n      pr = payload.pull_request\n      commits = payload.commits\n      userName = \"\"\n      title = \"\"\n      url = \"\"\n      body = \"\"\n\n      if action is \"created\"\n        # Comment\n        if comment\n          action = \"updated\"\n          userName = comment.user.login\n          title = \"##{issue.number}: #{issue.title}\"\n          url = comment.html_url\n          body = comment.body\n          slack = true\n\n      if action in [\"opened\", \"closed\", \"reopened\"]\n        # Issue\n        if issue\n          userName = issue.user.login\n          title = \"##{issue.number}: #{issue.title}\"\n          url = issue.html_url\n          body = if action is \"opened\" then issue.body else action\n          slack = true\n\n        # Pull Request\n        if pr\n          userName = pr.user.login\n          title = \"##{pr.number}: #{pr.title}\"\n          url = pr.html_url\n          body = pr.body\n          slack = true\n\n      if slack\n        data =\n          content:\n            fallback: \"[#{repoName}] #{userName} #{action} #{title}\"\n            pretext: \"[\u003c#{repoUrl}|#{repoName}\u003e] #{userName} #{action} \u003c#{url}|#{title}\u003e\"\n            color: \"#e3e4e6\"\n          username: \"bot\"\n          channel: room\n          icon_url: \"https://raw.githubusercontent.com/takezoe/gitbucket/master/src/main/webapp/assets/common/images/gitbucket.png\"\n        if action in [\"updated\", \"opened\"]\n          data.content.text = body\n        else\n          data.content.text = action\n\n        if action in [\"opened\", \"reopened\"]\n          data.content.color = \"#468847\"\n        if action in [\"closed\"]\n          data.content.color = \"#B94A48\"\n\n        @robot.emit \"slack.attachment\", data\n\n    res.end \"OK\"\n```\n\n`hubot-slack-attachement` に依存しているので、`npm install --save hubot-slack-attachement` は必須。\n\n最初はPushも流すようにしていたのですが、ログが酷いことになったので辞めました。\n\n## WebHook URLs\n\n[![WebHook設定][0002]][0002]\n[0002]: https://dl.dropboxusercontent.com/u/3189929/images/2015/08/14/0002.png\n\n各リポジトリの設定でhubotへのWebHook `http://localhost/gitbucket2slack/:channel` を設定しておきます。\n\n`/:channel` を変えることで任意のchannnelに飛ばすことが出来ます。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d062"},"title":"4ポートUSB急速充電器 Anker PowerPort 4を購入。","create":{"$date":"2015-08-22T13:12:00.000Z"},"modify":{"$date":"2015-08-22T13:12:00.000Z"},"categories":["Anker"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/08/22/0002.png","body":"\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00VTJS58U/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/31hJZcvYcCL._SL160_.jpg\" alt=\"Anker PowerPort 4 (40W 4ポート USB急速充電器)  折りたたみ式プラグ搭載 iPhone / iPad / Andoird / Xperia / Galaxy / Nexus / 3DS / PS Vita / ウォークマン他対応 (40W 4ポート 折りたたみ式) A2142521\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00VTJS58U/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAnker PowerPort 4 (40W 4ポート USB急速充電器)  折りたたみ式プラグ搭載 iPhone / iPad / Andoird / Xperia / Galaxy / Nexus / 3DS / PS Vita / ウォークマン他対応 (40W 4ポート 折りたたみ式) A2142521\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.08.22\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003eAnker \u003cbr /\u003e売り上げランキング: 67\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00VTJS58U/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n\n4ポートで折りたたみ式プラグ搭載のUSB急速充電器「Anker PowerPort 4」を購入しました。\n\n\u003c!-- more --\u003e\n\nパッケージは軽くてコンパクト。内容物も本体と薄い説明書だけでした。\n\n[![外箱][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/08/22/0001.png\n\n角丸の本体は、大きさもデザインもMacの充電器によく似ている。\n\n[![本体・表][0002]][0002]\n[0002]: https://dl.dropboxusercontent.com/u/3189929/images/2015/08/22/0002.png\n\n折りたたみ式プラグ。これが良いというレビューが多いけど、確かに用途に合わせて延長ケーブル足せる構造は使いやすいよね。\n\n[![本体・裏][0003]][0003]\n[0003]: https://dl.dropboxusercontent.com/u/3189929/images/2015/08/22/0003.png\n\nとりあえず、iPhone×2・iPad・カメラを同時に充電することが多いから4ポートにしたけど、これ以上デバイスが増えたらPowerPort 10も買ってしまうかもしれない。\n\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00YS3ZYWY/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/41lhwXGavWL._SL160_.jpg\" alt=\"Anker® PowerPort 10 (60W 10ポート USB急速充電器) iPhone 6 / 6 Plus, iPad Air 2 / mini 3, Galaxy S6 / S6 Edge等対応 【PowerIQ搭載】ブラック\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00YS3ZYWY/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAnker® PowerPort 10 (60W 10ポート USB急速充電器) iPhone 6 / 6 Plus, iPad Air 2 / mini 3, Galaxy S6 / S6 Edge等対応 【PowerIQ搭載】ブラック\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.08.22\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003eAnker \u003cbr /\u003e売り上げランキング: 103\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00YS3ZYWY/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n"}
{"_id":{"$oid":"563d9b67bf652a600632d063"},"title":"ぶっつけ本番でGAIQを受験してみた。","create":{"$date":"2015-08-24T14:54:00.000Z"},"modify":{"$date":"2015-08-24T14:54:00.000Z"},"categories":["Analytics","Google","Google Analytics"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/08/24/0001.png","body":"\nGAIQとは要するに、Google Analyticsをそれなりに使えますよってGoogleから認めてもらえる資格のこと。\n\n\u003eGoogle アナリティクス個人認定資格（GAIQ）は Google アナリティクスの習熟度を認定する資格で、Google アナリティクス個人認定試験に合格した個人に付与されます。\n\nWebの開発をしていて、普段からGoogle Analyticsは使っているのですが、「ただの詳しい人」から一皮ズル剥けたかったので受験してみました。\n\n\u003c!-- more --\u003e\n\n## 試験概要\n\n- 試験費用 : 無料\n- 問題数　 : 70問\n- 制限時間 : 90分\n- 合格基準 : 80%\n- 有効期限 : 18か月\n\n試験費用は無料で、いつでも受験出来るのですごく嬉しい。\n\n有効期限が1年半と短いけれど、Webは移り変わりも激しいのでこれは仕方ないかなと。\n\n## 出題内容\n\n1. プランニングと仕組み\n2. 導入とデータ収集\n3. 設定と管理\n4. コンバージョンとアトリビューション\n5. レポート、指標、ディメンション\n\n[Google Partners - Analytics Certification](https://www.google.co.jp/partners/?hl=ja#p_analyticscertification)\n\nデータ収集や分析の仕方とかAnalyticsの内容だけかと思っていたら、Eコマース関連はもちろんAdsense関連の問題もあったので、関わっていないと結構厳しいかも。\n\n## 勉強方法\n\n今回はぶっつけ本番で挑んだので『何も無し』\n\nAmazoneで良さそうな本があったので買おうかなと悩んではいたけれど、普段の業務で培った知識がどこまで通用するのか試してみました。\n\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00PLUSWRW/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/519VVJ6lVTL._SL160_.jpg\" alt=\"模擬問題全73問付き！GAIQ対策テキスト[2015年7月改訂/新試験対応版]\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00PLUSWRW/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e模擬問題全73問付き！GAIQ対策テキスト[2015年7月改訂/新試験対応版]\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.08.24\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003e (2014-11-13)\u003cbr /\u003e売り上げランキング: 2,886\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00PLUSWRW/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n\n## 結果\n\n[![Google Analytics認定資格証][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/08/24/0001.png\n\nAdsense関連の問題やGoogle専門用語に手こずったけれど、とりあえず無事にGoogle アナリティクス個人認定資格（GAIQ）を取得出来ました。\n"}
{"_id":{"$oid":"563d9b67bf652a600632d064"},"title":"Anker Screen Protector iPhone 6s Plus用は3枚入りでコスパが良かった。","create":{"$date":"2015-09-29T12:03:00.000Z"},"modify":{"$date":"2015-09-29T12:03:00.000Z"},"categories":["Anker","Apple","iPhone"],"image":"https://dl.dropboxusercontent.com/u/3189929/images/2015/09/29/0005.png","body":"\niPhone 6 Plus から iPhone 6s Plus に機種変更しました。\n\n## 一応開封の儀\n\n\u003c!-- [![iPhone 6s Plus][0001]][0001]\n[0001]: https://dl.dropboxusercontent.com/u/3189929/images/2015/09/29/0001.png --\u003e\n\n[![iPhone 6s Plus][0002]][0002]\n[0002]: https://dl.dropboxusercontent.com/u/3189929/images/2015/09/29/0002.png\n\n6 Plusの時はシンプルな真っ白な箱だったけれど、今回は少し柄付き。\n\n[![iPhone 6s Plus vs iPhone 6 Plus][0003]][0003]\n[0003]: https://dl.dropboxusercontent.com/u/3189929/images/2015/09/29/0003.png\n\n[![iPhone 6s Plus vs iPhone 6 Plus][0004]][0004]\n[0004]: https://dl.dropboxusercontent.com/u/3189929/images/2015/09/29/0004.png\n\n左が6s Plus、右が6 Plus。背面に「s」と付いている以外、ほとんど見分けは付きませんでした。\n\n\u003c!-- more --\u003e\n\n## Anker Screen Protector\n\n今までいろんな画面保護シールを使ってきたけれど、充電器等で最近流行りの Anker の製品を買ってみました。\n\n[![Anker Screen Protector][0005]][0005]\n[0005]: https://dl.dropboxusercontent.com/u/3189929/images/2015/09/29/0005.png\n\nパッケージはオーガニックな感じ。\n\n[![Anker Screen Protector][0006]][0006]\n[0006]: https://dl.dropboxusercontent.com/u/3189929/images/2015/09/29/0006.png\n\n大きさは液晶画面ギリギリで、上手く貼るのは結構シビア。\n\n貼った直後は糊が残っているので指すべりは悪いですが、しばらく使っていくうちに馴染んでくるので問題は無かったです。\n\n端が多少引っかかる感じはありますが、安さを考えれば許容範囲内かなと。\n\n\u003cdiv class=\"amazlet-box\" style=\"margin-bottom:0px;\"\u003e\u003cdiv class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00NZVONU4/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003e\u003cimg src=\"http://ecx.images-amazon.com/images/I/41lc38PymyL._SL160_.jpg\" alt=\"Anker®　【3枚入り】iPhone 6 plus 用 液晶保護フィルム 高透明度 高感度 【18ヶ月保証】 (iPhone6 Plus 5.5インチ用 光沢仕上げ)\" style=\"border: none;\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"\u003e\u003cdiv class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00NZVONU4/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAnker®　【3枚入り】iPhone 6 plus 用 液晶保護フィルム 高透明度 高感度 【18ヶ月保証】 (iPhone6 Plus 5.5インチ用 光沢仕上げ)\u003c/a\u003e\u003cdiv class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\"\u003eposted with \u003ca href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\"\u003eamazlet\u003c/a\u003e at 15.09.30\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-detail\"\u003eAnker \u003cbr /\u003e売り上げランキング: 1,316\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-sub-info\" style=\"float: left;\"\u003e\u003cdiv class=\"amazlet-link\" style=\"margin-top: 5px\"\u003e\u003ca href=\"http://www.amazon.co.jp/exec/obidos/ASIN/B00NZVONU4/yug1224-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"\u003eAmazon.co.jpで詳細を見る\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"amazlet-footer\" style=\"clear: left\"\u003e\u003c/div\u003e\u003c/div\u003e\n\n以上\n"}
